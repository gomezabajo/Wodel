/**
 * generated by Xtext 2.13.0
 */
package wodeledu.dsls.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import edutest.AlternativeResponse;
import edutest.Mode;
import edutest.MultiChoiceDiagram;
import edutest.MultiChoiceEmendation;
import edutest.MutatorTests;
import edutest.Navigation;
import edutest.Order;
import edutest.Program;
import edutest.ProgramConfiguration;
import edutest.Test;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.eclipse.core.runtime.FileLocator;
import org.eclipse.core.runtime.Platform;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.osgi.framework.Bundle;
import wodel.utils.exceptions.ModelNotFoundException;
import wodel.utils.manager.ModelManager;

/**
 * @author Pablo Gomez-Abajo - eduTest code generator.
 * 
 * Generates the javascript and html code for the
 * test exercises application
 */
@SuppressWarnings("all")
public class EduTestWebGenerator extends EduTestSuperGenerator {
  private String fileName;

  private String pageName;

  private int num;

  private List<EObject> blocks;

  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    try {
      try {
        int i = 0;
        String _workspaceAbsolutePath = ModelManager.getWorkspaceAbsolutePath();
        String _plus = ("file:/" + _workspaceAbsolutePath);
        String _plus_1 = (_plus + "/");
        String _name = this.project.getName();
        String _plus_2 = (_plus_1 + _name);
        String _plus_3 = (_plus_2 + 
          "/");
        String _outputFolder = ModelManager.getOutputFolder();
        String _plus_4 = (_plus_3 + _outputFolder);
        String _plus_5 = (_plus_4 + "/");
        String _replaceAll = resource.getURI().lastSegment().replaceAll(".test", ".model");
        String xmiFileName = (_plus_5 + _replaceAll);
        final Bundle bundle = Platform.getBundle("wodel.models");
        final URL fileURL = bundle.getEntry("/models/MutatorEnvironment.ecore");
        final String mutatorecore = FileLocator.resolve(fileURL).getFile();
        final List<EPackage> mutatorpackages = ModelManager.loadMetaModel(mutatorecore);
        final Resource mutatormodel = ModelManager.loadModel(mutatorpackages, URI.createURI(xmiFileName).toFileString());
        this.blocks = ModelManager.getObjectsOfType("Block", mutatormodel);
        Iterable<Program> _filter = Iterables.<Program>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Program.class);
        for (final Program p : _filter) {
          {
            if ((i == 0)) {
              String _replaceAll_1 = resource.getURI().lastSegment().replaceAll(".test", "");
              String _plus_6 = ("html/" + _replaceAll_1);
              String _plus_7 = (_plus_6 + ".html");
              this.fileName = _plus_7;
              String _replaceAll_2 = resource.getURI().lastSegment().replaceAll(".test", "");
              String _plus_8 = (_replaceAll_2 + ".html");
              this.pageName = _plus_8;
            } else {
              String _replaceAll_3 = resource.getURI().lastSegment().replaceAll(".test", "");
              String _plus_9 = ("html/" + _replaceAll_3);
              String _plus_10 = (_plus_9 + Integer.valueOf(i));
              String _plus_11 = (_plus_10 + ".html");
              this.fileName = _plus_11;
              String _replaceAll_4 = resource.getURI().lastSegment().replaceAll(".test", "");
              String _plus_12 = (_replaceAll_4 + Integer.valueOf(i));
              String _plus_13 = (_plus_12 + ".html");
              this.pageName = _plus_13;
            }
            fsa.generateFile(this.fileName, EduTestSuperGenerator.removeComments(this.compile(p, resource)));
            i++;
          }
        }
      } catch (final Throwable _t) {
        if (_t instanceof ModelNotFoundException) {
        } else {
          throw Exceptions.sneakyThrow(_t);
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  public CharSequence compile(final Program program, final Resource resource) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<!--");
    this.buildOptions(program, resource, this.blocks, program.getClass());
    _builder.append("-->");
    _builder.newLineIfNotEmpty();
    _builder.append("<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">");
    _builder.newLine();
    _builder.append("<html xmlns=\"http://www.w3.org/1999/xhtml\">");
    _builder.newLine();
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=iso-8859-1\" />");
    _builder.newLine();
    _builder.append("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<link type=\"text/css\" rel=\"stylesheet\" href=\"css/wodel.css\" />");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<link type=\"text/css\" rel=\"stylesheet\" href=\"css/menu.css\" />");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<link type=\"text/css\" rel=\"stylesheet\" href=\"css/table.css\" />");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<title>Wodel</title>");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("</head>");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("<body style=\"background-color: white;\">");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("<script src=\"js/jquery-2.1.4.min.js\" type=\"text/javascript\"></script>");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("<script language=\"javascript\" type=\"text/javascript\">");
    _builder.newLine();
    _builder.append("if (!String.prototype.startsWith) {");
    _builder.newLine();
    _builder.append("  \t\t\t");
    _builder.append("String.prototype.startsWith = function(searchString, position) {");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("position = position || 0;");
    _builder.newLine();
    _builder.append("    \t\t\t");
    _builder.append("return this.indexOf(searchString, position) === position;");
    _builder.newLine();
    _builder.append("  \t\t\t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("// Pass the checkbox name to the function");
    _builder.newLine();
    _builder.append("function getCheckedBoxes(chkboxName) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var checkboxes = document.getElementsByName(chkboxName);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("var checkboxesChecked = [];");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// loop over them all");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("for (var i=0; i<checkboxes.length; i++) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// And stick the checked ones onto an array...");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (checkboxes[i].checked) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("checkboxesChecked.push(checkboxes[i]);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Return the array if it is non-empty, or null");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return checkboxesChecked.length > 0 ? checkboxesChecked : null;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("   \t\t");
    _builder.append("function show(part) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("//");
    int part = 0;
    _builder.newLineIfNotEmpty();
    {
      EList<MutatorTests> _exercises = program.getExercises();
      for(final MutatorTests exercise : _exercises) {
        _builder.append("    \t\t");
        _builder.append("//");
        int _plusPlus = part++;
        _builder.append(_plusPlus, "    \t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("   \t\t\t");
        _builder.append("var test = document.getElementById(\'table-test-");
        _builder.append(part, "   \t\t\t");
        _builder.append("\');");
        _builder.newLineIfNotEmpty();
        _builder.append("   \t\t\t");
        _builder.append("if (test != null) {");
        _builder.newLine();
        _builder.append("\t    \t\t");
        _builder.append("if (part == ");
        _builder.append(part, "\t    \t\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t");
        _builder.append("\t\t");
        _builder.append("test.style.display = \'block\';");
        _builder.newLine();
        _builder.append("    \t\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t    \t\t");
        _builder.append("else {");
        _builder.newLine();
        _builder.append("\t    \t\t\t");
        _builder.append("test.style.display = \'none\';");
        _builder.newLine();
        _builder.append("\t    \t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("    \t\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.append("    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("//");
    _builder.append(part = 0, "\t    ");
    _builder.newLineIfNotEmpty();
    {
      EList<MutatorTests> _exercises_1 = program.getExercises();
      for(final MutatorTests exercise_1 : _exercises_1) {
        _builder.append("//");
        int _plusPlus_1 = part++;
        _builder.append(_plusPlus_1);
        _builder.newLineIfNotEmpty();
        _builder.append("//");
        List<Test> ltests = new ArrayList<Test>();
        _builder.newLineIfNotEmpty();
        {
          if ((exercise_1 instanceof MultiChoiceEmendation)) {
            _builder.newLine();
            _builder.append("//");
            HashMap<Test, Double> points = new HashMap<Test, Double>();
            _builder.newLineIfNotEmpty();
            {
              EList<Test> _tests = ((MultiChoiceEmendation)exercise_1).getTests();
              for(final Test test : _tests) {
                {
                  List<EduTestSuperGenerator.TestOption> _get = this.options.get(exercise_1).get(test);
                  boolean _tripleNotEquals = (_get != null);
                  if (_tripleNotEquals) {
                    {
                      Integer _get_1 = this.total.get(exercise_1);
                      boolean _tripleNotEquals_1 = (_get_1 != null);
                      if (_tripleNotEquals_1) {
                        _builder.append("//");
                        int _size = this.options.get(exercise_1).get(test).size();
                        double _multiply = (1.0 * _size);
                        Integer _get_2 = this.total.get(exercise_1);
                        double _divide = (_multiply / (_get_2).intValue());
                        Double _put = points.put(test, Double.valueOf(_divide));
                        _builder.append(_put);
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  }
                }
              }
            }
            _builder.append("//");
            Map<Test, Double> _put_1 = this.puntuation.put(exercise_1, points);
            _builder.append(_put_1);
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            _builder.append("//");
            HashMap<Test, Double> penal = new HashMap<Test, Double>();
            _builder.newLineIfNotEmpty();
            {
              EList<Test> _tests_1 = ((MultiChoiceEmendation)exercise_1).getTests();
              for(final Test test_1 : _tests_1) {
                {
                  if ((exercise_1 instanceof MultiChoiceEmendation)) {
                    {
                      Double _get_3 = this.puntuation.get(exercise_1).get(test_1);
                      boolean _tripleNotEquals_2 = (_get_3 != null);
                      if (_tripleNotEquals_2) {
                        _builder.append("//");
                        Double _get_4 = this.puntuation.get(exercise_1).get(test_1);
                        double _penalty = ((MultiChoiceEmendation)exercise_1).getConfig().getPenalty();
                        double _multiply_1 = ((_get_4).doubleValue() * _penalty);
                        Double _put_2 = penal.put(test_1, Double.valueOf(_multiply_1));
                        _builder.append(_put_2);
                        _builder.newLineIfNotEmpty();
                      } else {
                        _builder.append("//");
                        Double _put_3 = penal.put(test_1, Double.valueOf(0.0));
                        _builder.append(_put_3);
                        _builder.newLineIfNotEmpty();
                      }
                    }
                  }
                }
                {
                  if ((exercise_1 instanceof AlternativeResponse)) {
                    _builder.append("//");
                    Double _put_4 = penal.put(test_1, Double.valueOf(0.0));
                    _builder.append(_put_4);
                    _builder.newLineIfNotEmpty();
                  }
                }
                {
                  if ((exercise_1 instanceof MultiChoiceDiagram)) {
                    _builder.append("//");
                    Double _put_5 = penal.put(test_1, Double.valueOf(0.0));
                    _builder.append(_put_5);
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
            _builder.append("//");
            Map<Test, Double> _put_6 = this.penalty.put(exercise_1, penal);
            _builder.append(_put_6);
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            {
              EList<Test> _tests_2 = ((MultiChoiceEmendation)exercise_1).getTests();
              for(final Test test_2 : _tests_2) {
                _builder.append("//");
                boolean _add = ltests.add(test_2);
                _builder.append(_add);
                _builder.newLineIfNotEmpty();
              }
            }
            {
              Order _order = ((MultiChoiceEmendation)exercise_1).getConfig().getOrder();
              boolean _equals = Objects.equal(_order, Order.FIXED);
              if (_equals) {
                _builder.newLine();
              }
            }
            {
              Order _order_1 = ((MultiChoiceEmendation)exercise_1).getConfig().getOrder();
              boolean _equals_1 = Objects.equal(_order_1, Order.RANDOM);
              if (_equals_1) {
                _builder.append("//");
                Collections.shuffle(ltests);
                _builder.newLineIfNotEmpty();
              }
            }
            {
              Order _order_2 = ((MultiChoiceEmendation)exercise_1).getConfig().getOrder();
              boolean _equals_2 = Objects.equal(_order_2, Order.ASCENDING);
              if (_equals_2) {
                _builder.append("//");
                Collections.<Test>sort(ltests, new Comparator<Test>() {
                  @Override
                  public int compare(final Test t1, final Test t2) {
                    if (((EduTestWebGenerator.this.options.get(exercise_1).get(t1) != null) && (EduTestWebGenerator.this.options.get(exercise_1).get(t2) != null))) {
                      int _size = EduTestWebGenerator.this.options.get(exercise_1).get(t1).size();
                      int _size_1 = EduTestWebGenerator.this.options.get(exercise_1).get(t2).size();
                      return (_size - _size_1);
                    }
                    return 0;
                  }
                });
                _builder.newLineIfNotEmpty();
              }
            }
            {
              Order _order_3 = ((MultiChoiceEmendation)exercise_1).getConfig().getOrder();
              boolean _equals_3 = Objects.equal(_order_3, Order.DESCENDING);
              if (_equals_3) {
                _builder.append("//");
                Collections.<Test>sort(ltests, new Comparator<Test>() {
                  @Override
                  public int compare(final Test t1, final Test t2) {
                    if (((EduTestWebGenerator.this.options.get(exercise_1).get(t1) != null) && (EduTestWebGenerator.this.options.get(exercise_1).get(t2) != null))) {
                      int _size = EduTestWebGenerator.this.options.get(exercise_1).get(t2).size();
                      int _size_1 = EduTestWebGenerator.this.options.get(exercise_1).get(t1).size();
                      return (_size - _size_1);
                    }
                    return 0;
                  }
                });
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        {
          if ((exercise_1 instanceof AlternativeResponse)) {
            _builder.append("//");
            boolean _addAll = ltests.addAll(((AlternativeResponse)exercise_1).getTests());
            _builder.append(_addAll);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((exercise_1 instanceof MultiChoiceDiagram)) {
            _builder.append("//");
            boolean _addAll_1 = ltests.addAll(((MultiChoiceDiagram)exercise_1).getTests());
            _builder.append(_addAll_1);
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("//");
        List<Test> _put_7 = this.tests.put(exercise_1, ltests);
        _builder.append(_put_7);
        _builder.newLineIfNotEmpty();
        _builder.append("var currentTotal");
        _builder.append(part);
        _builder.append(" = ");
        int _size_1 = exercise_1.getTests().size();
        _builder.append(_size_1);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("//COUNTER: ");
        _builder.append(this.num = 0);
        _builder.newLineIfNotEmpty();
        {
          List<Test> _get_5 = this.tests.get(exercise_1);
          for(final Test test_3 : _get_5) {
            _builder.append("//COUNTER: ");
            _builder.append(this.num = (this.num + 1));
            _builder.newLineIfNotEmpty();
            _builder.append("var exercise");
            _builder.append(this.num);
            _builder.append("_");
            _builder.append(part);
            _builder.append("Mark = false;");
            _builder.newLineIfNotEmpty();
            {
              if ((exercise_1 instanceof MultiChoiceEmendation)) {
                {
                  Double _get_6 = this.puntuation.get(exercise_1).get(test_3);
                  boolean _tripleNotEquals_3 = (_get_6 != null);
                  if (_tripleNotEquals_3) {
                    _builder.append("var weight");
                    _builder.append(this.num);
                    _builder.append("_");
                    _builder.append(part);
                    _builder.append("Mark = ");
                    Double _get_7 = this.puntuation.get(exercise_1).get(test_3);
                    _builder.append(_get_7);
                    _builder.append(";");
                    _builder.newLineIfNotEmpty();
                  } else {
                    _builder.append("var weight");
                    _builder.append(this.num);
                    _builder.append("_");
                    _builder.append(part);
                    _builder.append("Mark = 0.0;");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
            _builder.append("var answered");
            _builder.append(this.num);
            _builder.append("_");
            _builder.append(part);
            _builder.append("Exercise = false;");
            _builder.newLineIfNotEmpty();
            {
              if ((exercise_1 instanceof MultiChoiceEmendation)) {
                {
                  Double _get_8 = this.penalty.get(exercise_1).get(test_3);
                  boolean _tripleNotEquals_4 = (_get_8 != null);
                  if (_tripleNotEquals_4) {
                    _builder.append("var penalty");
                    _builder.append(this.num);
                    _builder.append("_");
                    _builder.append(part);
                    _builder.append("Mark = ");
                    Double _get_9 = this.penalty.get(exercise_1).get(test_3);
                    _builder.append(_get_9);
                    _builder.append(";");
                    _builder.newLineIfNotEmpty();
                  } else {
                    _builder.append("var penalty");
                    _builder.append(this.num);
                    _builder.append("_");
                    _builder.append(part);
                    _builder.append("Mark = 0.0;");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          }
        }
        _builder.append("   \t\t");
        _builder.append("function show");
        _builder.append(part, "   \t\t");
        _builder.append("(num) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    \t\t");
        _builder.append("var exercise = null;");
        _builder.newLine();
        _builder.append("    \t\t");
        _builder.append("//COUNTER: ");
        _builder.append(this.num = 0, "    \t\t");
        _builder.newLineIfNotEmpty();
        {
          List<Test> _get_10 = this.tests.get(exercise_1);
          for(final Test test_4 : _get_10) {
            _builder.append("    \t\t");
            _builder.append("//COUNTER: ");
            _builder.append(this.num = (this.num + 1), "    \t\t");
            _builder.newLineIfNotEmpty();
            _builder.append("    \t\t");
            _builder.append("exercise = document.getElementById(\'exercise-");
            _builder.append(this.num, "    \t\t");
            _builder.append("-");
            _builder.append(part, "    \t\t");
            _builder.append("\');");
            _builder.newLineIfNotEmpty();
            _builder.append("    \t\t");
            _builder.append("if (num == ");
            _builder.append(this.num, "    \t\t");
            _builder.append(") {");
            _builder.newLineIfNotEmpty();
            _builder.append("    \t\t");
            _builder.append("\t");
            _builder.append("exercise.style.display = \'block\';");
            _builder.newLine();
            _builder.append("    \t\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("    \t\t");
            _builder.append("else {");
            _builder.newLine();
            _builder.append("    \t\t");
            _builder.append("\t");
            _builder.append("exercise.style.display = \'none\';");
            _builder.newLine();
            _builder.append("    \t\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
        _builder.append("    \t");
        _builder.append("}");
        _builder.newLine();
        {
          if ((exercise_1 instanceof AlternativeResponse)) {
            _builder.append("    \t");
            _builder.append("function right");
            _builder.append(part, "    \t");
            _builder.append("(num, diagram) {");
            _builder.newLineIfNotEmpty();
            _builder.append("    \t");
            _builder.append("\t");
            _builder.append("var image = null;");
            _builder.newLine();
            _builder.append("\t    \t");
            _builder.append("var currentMark = 0;");
            _builder.newLine();
            _builder.append("    \t");
            _builder.append("\t");
            _builder.append("//COUNTER: ");
            _builder.append(this.num = 0, "    \t\t");
            _builder.newLineIfNotEmpty();
            {
              List<Test> _get_11 = this.tests.get(exercise_1);
              for(final Test test_5 : _get_11) {
                _builder.append("    \t");
                _builder.append("\t");
                _builder.append("//COUNTER: ");
                _builder.append(this.num = (this.num + 1), "    \t\t");
                _builder.newLineIfNotEmpty();
                {
                  int _size_2 = this.rand.get(exercise_1).get(test_5).size();
                  boolean _greaterThan = (_size_2 > 0);
                  if (_greaterThan) {
                    _builder.append("//DIAGRAM: ");
                    String diagram = this.rand.get(exercise_1).get(test_5).get(0);
                    _builder.newLineIfNotEmpty();
                    _builder.append("    \t\t");
                    _builder.append("image = document.getElementById(\'td-exercise-");
                    _builder.append(this.num, "    \t\t");
                    _builder.append("-");
                    _builder.append(part, "    \t\t");
                    _builder.append("-");
                    String _replace = diagram.replace("/", "-");
                    _builder.append(_replace, "    \t\t");
                    _builder.append("\');");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    \t\t");
                    _builder.append("if (num == ");
                    _builder.append(this.num, "    \t\t");
                    _builder.append(") {");
                    _builder.newLineIfNotEmpty();
                    {
                      int _indexOf = diagram.indexOf("/");
                      boolean _greaterThan_1 = (_indexOf > 0);
                      if (_greaterThan_1) {
                        _builder.append("    \t\t\t");
                        _builder.append("if (diagram == \'");
                        int _indexOf_1 = diagram.indexOf("/");
                        int _plus = (_indexOf_1 + 1);
                        String _substring = diagram.substring(_plus);
                        _builder.append(_substring, "    \t\t\t");
                        _builder.append("\') {");
                        _builder.newLineIfNotEmpty();
                      } else {
                        _builder.append("    \t\t\t");
                        _builder.append("if (diagram == \'");
                        _builder.append(diagram, "    \t\t\t");
                        _builder.append("\') {");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    _builder.append("    \t\t\t\t");
                    _builder.append("image.style.border = \'1px solid #000000\';");
                    _builder.newLine();
                    _builder.append("    \t\t\t\t");
                    _builder.append("if (diagram == \'");
                    String _replace_1 = test_5.getSource().replace(".model", ".png");
                    _builder.append(_replace_1, "    \t\t\t\t");
                    _builder.append("\') {");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    \t\t\t\t\t");
                    _builder.append("exercise");
                    _builder.append(this.num, "    \t\t\t\t\t");
                    _builder.append("_");
                    _builder.append(part, "    \t\t\t\t\t");
                    _builder.append("Mark = true;");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    \t\t\t\t\t");
                    _builder.append("document.getElementById(\'td-score-null-");
                    _builder.append(this.num, "    \t\t\t\t\t");
                    _builder.append("-");
                    _builder.append(part, "    \t\t\t\t\t");
                    _builder.append("\').style.display = \'none\';");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    \t\t\t\t\t");
                    _builder.append("document.getElementById(\'td-score-accept-");
                    _builder.append(this.num, "    \t\t\t\t\t");
                    _builder.append("-");
                    _builder.append(part, "    \t\t\t\t\t");
                    _builder.append("\').style.display = \'block\';");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    \t\t\t\t\t");
                    _builder.append("document.getElementById(\'td-score-wrong-");
                    _builder.append(this.num, "    \t\t\t\t\t");
                    _builder.append("-");
                    _builder.append(part, "    \t\t\t\t\t");
                    _builder.append("\').style.display = \'none\';");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    \t\t\t\t\t");
                    _builder.append("document.getElementById(\'mark-");
                    _builder.append(this.num, "    \t\t\t\t\t");
                    _builder.append("-");
                    _builder.append(part, "    \t\t\t\t\t");
                    _builder.append("\').innerHTML = \'<img src=\"images/accept.png\" alt=\"ok\" style=\"height: 40px; width: 40px;\" />\';");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    \t\t\t\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("    \t\t\t\t");
                    _builder.append("else {");
                    _builder.newLine();
                    _builder.append("    \t\t\t\t\t");
                    _builder.append("exercise");
                    _builder.append(this.num, "    \t\t\t\t\t");
                    _builder.append("Mark = false;");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    \t\t\t\t\t");
                    _builder.append("document.getElementById(\'td-score-null-");
                    _builder.append(this.num, "    \t\t\t\t\t");
                    _builder.append("-");
                    _builder.append(part, "    \t\t\t\t\t");
                    _builder.append("\').style.display = \'none\';");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    \t\t\t\t\t");
                    _builder.append("document.getElementById(\'td-score-accept-");
                    _builder.append(this.num, "    \t\t\t\t\t");
                    _builder.append("-");
                    _builder.append(part, "    \t\t\t\t\t");
                    _builder.append("\').style.display = \'none\';");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    \t\t\t\t\t");
                    _builder.append("document.getElementById(\'td-score-wrong-");
                    _builder.append(this.num, "    \t\t\t\t\t");
                    _builder.append("-");
                    _builder.append(part, "    \t\t\t\t\t");
                    _builder.append("\').style.display = \'block\';");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    \t\t\t\t\t");
                    _builder.append("document.getElementById(\'mark-");
                    _builder.append(this.num, "    \t\t\t\t\t");
                    _builder.append("-");
                    _builder.append(part, "    \t\t\t\t\t");
                    _builder.append("\').innerHTML = \'<img src=\"images/wrong.png\" alt=\"error\" style=\"height: 40px; width: 40px;\" />\';");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    \t\t\t\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("    \t\t\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t    \t\t");
                    _builder.append("else {");
                    _builder.newLine();
                    _builder.append("    \t\t\t\t");
                    _builder.append("image.style.border = \'\';");
                    _builder.newLine();
                    _builder.append("    \t\t\t");
                    _builder.append("}");
                    _builder.newLine();
                    {
                      boolean _isRetry = ((AlternativeResponse)exercise_1).getConfig().isRetry();
                      boolean _equals_4 = (_isRetry == false);
                      if (_equals_4) {
                        _builder.append("document.getElementById(\'a-right-");
                        _builder.append(this.num);
                        _builder.append("-");
                        _builder.append(part);
                        _builder.append("-");
                        String _replace_2 = diagram.replace("/", "-");
                        _builder.append(_replace_2);
                        _builder.append("\').onclick = function() { return; }");
                        _builder.newLineIfNotEmpty();
                        _builder.append("document.getElementById(\'a-wrong-");
                        _builder.append(this.num);
                        _builder.append("-");
                        _builder.append(part);
                        _builder.append("-");
                        String _replace_3 = diagram.replace("/", "-");
                        _builder.append(_replace_3);
                        _builder.append("\').onclick = function() { return; }");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    _builder.append("    \t\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("   \t\t\t");
                    _builder.append("if (exercise");
                    _builder.append(this.num, "   \t\t\t");
                    _builder.append("_");
                    _builder.append(part, "   \t\t\t");
                    _builder.append("Mark == true) {");
                    _builder.newLineIfNotEmpty();
                    _builder.append("   \t\t\t\t");
                    _builder.append("currentMark = currentMark + 1;");
                    _builder.newLine();
                    _builder.append("   \t\t\t");
                    _builder.append("}");
                    _builder.newLine();
                  }
                }
              }
            }
            _builder.append("    \t");
            _builder.append("\t");
            _builder.append("if (document.getElementById(\'current-mark-");
            _builder.append(part, "    \t\t");
            _builder.append("\') !=!== null{");
            _builder.newLineIfNotEmpty();
            _builder.append("    \t");
            _builder.append("\t\t");
            _builder.append("document.getElementById(\'current-mark-");
            _builder.append(part, "    \t\t\t");
            _builder.append("\').innerHTML = \'<label class=\"text\">Current mark: \' + currentMark + \'/\' + currentTotal");
            _builder.append(part, "    \t\t\t");
            _builder.append(" + \'</label>\';//SETS THE CURRENT MARK");
            _builder.newLineIfNotEmpty();
            _builder.append("    \t");
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("window.location.replace(window.location);");
            _builder.newLine();
            _builder.append("    \t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("    \t");
            _builder.append("function wrong");
            _builder.append(part, "    \t");
            _builder.append("(num, diagram) {");
            _builder.newLineIfNotEmpty();
            _builder.append("    \t");
            _builder.append("\t");
            _builder.append("var image = null;");
            _builder.newLine();
            _builder.append("\t    \t");
            _builder.append("var currentMark = 0;");
            _builder.newLine();
            _builder.append("    \t");
            _builder.append("\t");
            _builder.append("//COUNTER: ");
            _builder.append(this.num = 0, "    \t\t");
            _builder.newLineIfNotEmpty();
            {
              List<Test> _get_12 = this.tests.get(exercise_1);
              for(final Test test_6 : _get_12) {
                _builder.append("    \t");
                _builder.append("\t");
                _builder.append("//COUNTER: ");
                _builder.append(this.num = (this.num + 1), "    \t\t");
                _builder.newLineIfNotEmpty();
                {
                  int _size_3 = this.rand.get(exercise_1).get(test_6).size();
                  boolean _greaterThan_2 = (_size_3 > 0);
                  if (_greaterThan_2) {
                    _builder.append("//DIAGRAM: ");
                    String diagram_1 = this.rand.get(exercise_1).get(test_6).get(0);
                    _builder.newLineIfNotEmpty();
                    _builder.append("    \t\t");
                    _builder.append("image = document.getElementById(\'td-exercise-");
                    _builder.append(this.num, "    \t\t");
                    _builder.append("-");
                    _builder.append(part, "    \t\t");
                    _builder.append("-");
                    String _replace_4 = diagram_1.replace("/", "-");
                    _builder.append(_replace_4, "    \t\t");
                    _builder.append("\');");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    \t\t");
                    _builder.append("if (num == ");
                    _builder.append(this.num, "    \t\t");
                    _builder.append(") {");
                    _builder.newLineIfNotEmpty();
                    {
                      int _indexOf_2 = diagram_1.indexOf("/");
                      boolean _greaterThan_3 = (_indexOf_2 > 0);
                      if (_greaterThan_3) {
                        _builder.append("    \t\t\t");
                        _builder.append("if (diagram == \'");
                        int _indexOf_3 = diagram_1.indexOf("/");
                        int _plus_1 = (_indexOf_3 + 1);
                        String _substring_1 = diagram_1.substring(_plus_1);
                        _builder.append(_substring_1, "    \t\t\t");
                        _builder.append("\') {");
                        _builder.newLineIfNotEmpty();
                      } else {
                        _builder.append("    \t\t\t");
                        _builder.append("if (diagram == \'");
                        _builder.append(diagram_1, "    \t\t\t");
                        _builder.append("\') {");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    _builder.append("    \t\t\t\t");
                    _builder.append("image.style.border = \'1px solid #000000\';");
                    _builder.newLine();
                    _builder.append("    \t\t\t\t");
                    _builder.append("if (diagram != \'");
                    String _replace_5 = test_6.getSource().replace(".model", ".png");
                    _builder.append(_replace_5, "    \t\t\t\t");
                    _builder.append("\') {");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    \t\t\t\t\t");
                    _builder.append("exercise");
                    _builder.append(this.num, "    \t\t\t\t\t");
                    _builder.append("_");
                    _builder.append(part, "    \t\t\t\t\t");
                    _builder.append("Mark = true;");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    \t\t\t\t\t");
                    _builder.append("document.getElementById(\'td-score-null-");
                    _builder.append(this.num, "    \t\t\t\t\t");
                    _builder.append("-");
                    _builder.append(part, "    \t\t\t\t\t");
                    _builder.append("\').style.display = \'none\';");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    \t\t\t\t\t");
                    _builder.append("document.getElementById(\'td-score-accept-");
                    _builder.append(this.num, "    \t\t\t\t\t");
                    _builder.append("-");
                    _builder.append(part, "    \t\t\t\t\t");
                    _builder.append("\').style.display = \'block\';");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    \t\t\t\t\t");
                    _builder.append("document.getElementById(\'td-score-wrong-");
                    _builder.append(this.num, "    \t\t\t\t\t");
                    _builder.append("-");
                    _builder.append(part, "    \t\t\t\t\t");
                    _builder.append("\').style.display = \'none\';");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    \t\t\t\t\t");
                    _builder.append("document.getElementById(\'mark-");
                    _builder.append(this.num, "    \t\t\t\t\t");
                    _builder.append("-");
                    _builder.append(part, "    \t\t\t\t\t");
                    _builder.append("\').innerHTML = \'<img src=\"images/accept.png\" alt=\"ok\" style=\"height: 40px; width: 40px;\" />\';");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    \t\t\t\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("    \t\t\t\t");
                    _builder.append("else {");
                    _builder.newLine();
                    _builder.append("    \t\t\t\t\t");
                    _builder.append("exercise");
                    _builder.append(this.num, "    \t\t\t\t\t");
                    _builder.append("_");
                    _builder.append(part, "    \t\t\t\t\t");
                    _builder.append("Mark = false;");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    \t\t\t\t\t");
                    _builder.append("document.getElementById(\'td-score-null-");
                    _builder.append(this.num, "    \t\t\t\t\t");
                    _builder.append("-");
                    _builder.append(part, "    \t\t\t\t\t");
                    _builder.append("\').style.display = \'none\';");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    \t\t\t\t\t");
                    _builder.append("document.getElementById(\'td-score-accept-");
                    _builder.append(this.num, "    \t\t\t\t\t");
                    _builder.append("-");
                    _builder.append(part, "    \t\t\t\t\t");
                    _builder.append("\').style.display = \'none\';");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    \t\t\t\t\t");
                    _builder.append("document.getElementById(\'td-score-wrong-");
                    _builder.append(this.num, "    \t\t\t\t\t");
                    _builder.append("-");
                    _builder.append(part, "    \t\t\t\t\t");
                    _builder.append("\').style.display = \'block\';");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    \t\t\t\t\t");
                    _builder.append("document.getElementById(\'mark-");
                    _builder.append(this.num, "    \t\t\t\t\t");
                    _builder.append("-");
                    _builder.append(part, "    \t\t\t\t\t");
                    _builder.append("\').innerHTML = \'<img src=\"images/wrong.png\" alt=\"error\" style=\"height: 40px; width: 40px;\" />\';");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    \t\t\t\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("    \t\t\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t    \t\t");
                    _builder.append("else {");
                    _builder.newLine();
                    _builder.append("    \t\t\t\t");
                    _builder.append("image.style.border = \'\';");
                    _builder.newLine();
                    _builder.append("    \t\t\t");
                    _builder.append("}");
                    _builder.newLine();
                    {
                      boolean _isRetry_1 = ((AlternativeResponse)exercise_1).getConfig().isRetry();
                      boolean _equals_5 = (_isRetry_1 == false);
                      if (_equals_5) {
                        _builder.append("document.getElementById(\'a-right-");
                        _builder.append(this.num);
                        _builder.append("-");
                        _builder.append(part);
                        _builder.append("-");
                        String _replace_6 = diagram_1.replace("/", "-");
                        _builder.append(_replace_6);
                        _builder.append("\').onclick = function() { return; }");
                        _builder.newLineIfNotEmpty();
                        _builder.append("document.getElementById(\'a-wrong-");
                        _builder.append(this.num);
                        _builder.append("-");
                        _builder.append(part);
                        _builder.append("-");
                        String _replace_7 = diagram_1.replace("/", "-");
                        _builder.append(_replace_7);
                        _builder.append("\').onclick = function() { return; }");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    _builder.append("    \t\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("   \t\t\t");
                    _builder.append("if (exercise");
                    _builder.append(this.num, "   \t\t\t");
                    _builder.append("_");
                    _builder.append(part, "   \t\t\t");
                    _builder.append("Mark == true) {");
                    _builder.newLineIfNotEmpty();
                    _builder.append("   \t\t\t\t");
                    _builder.append("currentMark = currentMark + 1;");
                    _builder.newLine();
                    _builder.append("   \t\t\t");
                    _builder.append("}");
                    _builder.newLine();
                  }
                }
              }
            }
            _builder.append("    \t");
            _builder.append("\t");
            _builder.append("if (document.getElementById(\'current-mark-");
            _builder.append(part, "    \t\t");
            _builder.append("\') != null) {");
            _builder.newLineIfNotEmpty();
            _builder.append("    \t");
            _builder.append("\t\t");
            _builder.append("document.getElementById(\'current-mark-");
            _builder.append(part, "    \t\t\t");
            _builder.append("\').innerHTML = \'<label class=\"text\">Current mark: \' + currentMark + \'/\' + currentTotal");
            _builder.append(part, "    \t\t\t");
            _builder.append(" + \'</label>\';//SETS THE CURRENT MARK");
            _builder.newLineIfNotEmpty();
            _builder.append("    \t");
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("window.location.replace(window.location);");
            _builder.newLine();
            _builder.append("    \t");
            _builder.append("}");
            _builder.newLine();
          }
        }
        {
          if ((exercise_1 instanceof MultiChoiceDiagram)) {
            _builder.append("    \t");
            _builder.append("function check");
            _builder.append(part, "    \t");
            _builder.append("(num, diagram) {");
            _builder.newLineIfNotEmpty();
            _builder.append("    \t");
            _builder.append("\t");
            _builder.append("var image = null;");
            _builder.newLine();
            _builder.append("\t    \t");
            _builder.append("var currentMark = 0;");
            _builder.newLine();
            _builder.append("    \t");
            _builder.append("\t");
            _builder.append("//COUNTER: ");
            _builder.append(this.num = 0, "    \t\t");
            _builder.newLineIfNotEmpty();
            {
              List<Test> _get_13 = this.tests.get(exercise_1);
              for(final Test test_7 : _get_13) {
                _builder.append("    \t\t");
                _builder.append("//COUNTER: ");
                _builder.append(this.num = (this.num + 1), "    \t\t");
                _builder.newLineIfNotEmpty();
                {
                  List<String> _get_14 = this.diagrams.get(exercise_1).get(test_7);
                  for(final String diagram_2 : _get_14) {
                    _builder.append("image = document.getElementById(\'td-exercise-");
                    _builder.append(this.num);
                    _builder.append("-");
                    _builder.append(part);
                    _builder.append("-");
                    String _replace_8 = diagram_2.replace("/", "-");
                    _builder.append(_replace_8);
                    _builder.append("\');");
                    _builder.newLineIfNotEmpty();
                    _builder.append("if (num == ");
                    _builder.append(this.num);
                    _builder.append(") {");
                    _builder.newLineIfNotEmpty();
                    {
                      int _indexOf_4 = diagram_2.indexOf("/");
                      boolean _greaterThan_4 = (_indexOf_4 > 0);
                      if (_greaterThan_4) {
                        _builder.append("\t");
                        _builder.append("if (diagram == \'");
                        int _indexOf_5 = diagram_2.indexOf("/");
                        int _plus_2 = (_indexOf_5 + 1);
                        String _substring_2 = diagram_2.substring(_plus_2);
                        _builder.append(_substring_2, "\t");
                        _builder.append("\') {");
                        _builder.newLineIfNotEmpty();
                      } else {
                        _builder.append("\t");
                        _builder.append("if (diagram == \'");
                        _builder.append(diagram_2, "\t");
                        _builder.append("\') {");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    _builder.append("\t\t");
                    _builder.append("image.style.border = \'1px solid #000000\';");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("if (diagram == \'");
                    String _replace_9 = test_7.getSource().replace(".model", ".png");
                    _builder.append(_replace_9, "\t\t");
                    _builder.append("\') {");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t");
                    _builder.append("exercise");
                    _builder.append(this.num, "\t\t\t");
                    _builder.append("_");
                    _builder.append(part, "\t\t\t");
                    _builder.append("Mark = true;");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t");
                    _builder.append("document.getElementById(\'td-score-null-");
                    _builder.append(this.num, "\t\t\t");
                    _builder.append("-");
                    _builder.append(part, "\t\t\t");
                    _builder.append("\').style.display = \'none\';");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t");
                    _builder.append("document.getElementById(\'td-score-accept-");
                    _builder.append(this.num, "\t\t\t");
                    _builder.append("-");
                    _builder.append(part, "\t\t\t");
                    _builder.append("\').style.display = \'block\';");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t");
                    _builder.append("document.getElementById(\'td-score-wrong-");
                    _builder.append(this.num, "\t\t\t");
                    _builder.append("-");
                    _builder.append(part, "\t\t\t");
                    _builder.append("\').style.display = \'none\';");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t");
                    _builder.append("document.getElementById(\'mark-");
                    _builder.append(this.num, "\t\t\t");
                    _builder.append("-");
                    _builder.append(part, "\t\t\t");
                    _builder.append("\').innerHTML = \'<img src=\"images/accept.png\" alt=\"ok\" style=\"height: 40px; width: 40px;\" />\';");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("else {");
                    _builder.newLine();
                    _builder.append("\t\t\t");
                    _builder.append("exercise");
                    _builder.append(this.num, "\t\t\t");
                    _builder.append("_");
                    _builder.append(part, "\t\t\t");
                    _builder.append("Mark = false;");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t");
                    _builder.append("document.getElementById(\'td-score-null-");
                    _builder.append(this.num, "\t\t\t");
                    _builder.append("-");
                    _builder.append(part, "\t\t\t");
                    _builder.append("\').style.display = \'none\';");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t");
                    _builder.append("document.getElementById(\'td-score-accept-");
                    _builder.append(this.num, "\t\t\t");
                    _builder.append("-");
                    _builder.append(part, "\t\t\t");
                    _builder.append("\').style.display = \'none\';");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t");
                    _builder.append("document.getElementById(\'td-score-wrong-");
                    _builder.append(this.num, "\t\t\t");
                    _builder.append("-");
                    _builder.append(part, "\t\t\t");
                    _builder.append("\').style.display = \'block\';");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t");
                    _builder.append("document.getElementById(\'mark-");
                    _builder.append(this.num, "\t\t\t");
                    _builder.append("-");
                    _builder.append(part, "\t\t\t");
                    _builder.append("\').innerHTML = \'<img src=\"images/wrong.png\" alt=\"wrong\" style=\"height: 40px; width: 40px;\" />\';");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t    \t\t");
                    _builder.append("else {");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("image.style.border = \'\';");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                    {
                      boolean _isRetry_2 = ((MultiChoiceDiagram)exercise_1).getConfig().isRetry();
                      boolean _equals_6 = (_isRetry_2 == false);
                      if (_equals_6) {
                        _builder.append("document.getElementById(\'a-exercise-");
                        _builder.append(this.num);
                        _builder.append("-");
                        _builder.append(part);
                        _builder.append("-");
                        String _replace_10 = diagram_2.replace("/", "-");
                        _builder.append(_replace_10);
                        _builder.append("\').onclick = function() { return; }");
                        _builder.newLineIfNotEmpty();
                      }
                    }
                    _builder.append("}");
                    _builder.newLine();
                  }
                }
                _builder.append("   \t\t\t");
                _builder.append("if (exercise");
                _builder.append(this.num, "   \t\t\t");
                _builder.append("_");
                _builder.append(part, "   \t\t\t");
                _builder.append("Mark == true) {");
                _builder.newLineIfNotEmpty();
                _builder.append("   \t\t\t\t");
                _builder.append("currentMark = currentMark + 1;");
                _builder.newLine();
                _builder.append("   \t\t\t");
                _builder.append("}");
                _builder.newLine();
              }
            }
            _builder.append("    \t");
            _builder.append("\t");
            _builder.append("if (document.getElementById(\'current-mark-");
            _builder.append(part, "    \t\t");
            _builder.append("\') != null) {");
            _builder.newLineIfNotEmpty();
            _builder.append("    \t");
            _builder.append("\t\t");
            _builder.append("document.getElementById(\'current-mark-");
            _builder.append(part, "    \t\t\t");
            _builder.append("\').innerHTML = \'<label class=\"text\">Current mark: \' + currentMark + \'/\' + currentTotal");
            _builder.append(part, "    \t\t\t");
            _builder.append(" + \'</label>\';//SETS THE CURRENT MARK");
            _builder.newLineIfNotEmpty();
            _builder.append("    \t");
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("\t\t\t");
            _builder.append("window.location.replace(window.location);");
            _builder.newLine();
            _builder.append("    \t");
            _builder.append("}");
            _builder.newLine();
          }
        }
        {
          if ((exercise_1 instanceof MultiChoiceEmendation)) {
            _builder.append("    \t");
            _builder.append("function submit");
            _builder.append(part, "    \t");
            _builder.append("(num, diagram) {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t    \t");
            _builder.append("var currentMark = 0;");
            _builder.newLine();
            _builder.append("\t    \t");
            _builder.append("var weightedMark = 0.0;");
            _builder.newLine();
            _builder.append("\t    \t");
            _builder.append("var penaltyMark = 0.0;");
            _builder.newLine();
            _builder.append("    \t");
            _builder.append("\t");
            _builder.append("//COUNTER: ");
            _builder.append(this.num = 0, "    \t\t");
            _builder.newLineIfNotEmpty();
            {
              List<Test> _get_15 = this.tests.get(exercise_1);
              for(final Test test_8 : _get_15) {
                _builder.append("    \t\t");
                _builder.append("//COUNTER: ");
                _builder.append(this.num = (this.num + 1), "    \t\t");
                _builder.newLineIfNotEmpty();
                _builder.append("    \t\t");
                _builder.append("if (num == ");
                _builder.append(this.num, "    \t\t");
                _builder.append(") {");
                _builder.newLineIfNotEmpty();
                _builder.append("    \t\t\t");
                _builder.append("var answered");
                _builder.append(this.num, "    \t\t\t");
                _builder.append("_");
                _builder.append(part, "    \t\t\t");
                _builder.append("Exercise = false;");
                _builder.newLineIfNotEmpty();
                _builder.append("//");
                String diagram_3 = "";
                _builder.newLineIfNotEmpty();
                {
                  List<EduTestSuperGenerator.TestOption> _get_16 = this.options.get(exercise_1).get(test_8);
                  boolean _tripleNotEquals_5 = (_get_16 != null);
                  if (_tripleNotEquals_5) {
                    {
                      List<EduTestSuperGenerator.TestOption> _get_17 = this.options.get(exercise_1).get(test_8);
                      for(final EduTestSuperGenerator.TestOption opt : _get_17) {
                        {
                          if ((opt.solution == true)) {
                            _builder.append("//");
                            _builder.append(diagram_3 = opt.path);
                            _builder.newLineIfNotEmpty();
                          }
                        }
                      }
                    }
                  }
                }
                _builder.append("    \t\t\t");
                _builder.append("if (diagram == \'");
                String _replace_11 = diagram_3.replace("/", "-");
                _builder.append(_replace_11, "    \t\t\t");
                _builder.append("\') {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("var correction = true;");
                _builder.newLine();
                {
                  Mode _mode = ((MultiChoiceEmendation)exercise_1).getConfig().getMode();
                  boolean _equals_7 = Objects.equal(_mode, Mode.CHECKBOX);
                  if (_equals_7) {
                    _builder.append("var checkboxes = document.getElementsByName(\'checkbox-");
                    _builder.append(this.num);
                    _builder.append("-");
                    _builder.append(part);
                    _builder.append("-");
                    String _replace_12 = diagram_3.replace("/", "-");
                    _builder.append(_replace_12);
                    _builder.append("\');");
                    _builder.newLineIfNotEmpty();
                    _builder.append("if (getCheckedBoxes(\'checkbox-");
                    _builder.append(this.num);
                    _builder.append("-");
                    _builder.append(part);
                    _builder.append("-");
                    String _replace_13 = diagram_3.replace("/", "-");
                    _builder.append(_replace_13);
                    _builder.append("\') == null) {");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("correction = false;");
                    _builder.newLine();
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("else {");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("for (var i = 0; i < checkboxes.length; i++) {");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("var value = checkboxes[i].value;");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("if (value.startsWith(\'");
                    String _replace_14 = diagram_3.replace("/", "-");
                    _builder.append(_replace_14, "\t\t");
                    _builder.append("\') == true) {");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t\t\t");
                    _builder.append("if (checkboxes[i].checked == false) {");
                    _builder.newLine();
                    _builder.append("\t\t\t\t");
                    _builder.append("correction = false;");
                    _builder.newLine();
                    _builder.append("\t\t\t\t");
                    _builder.append("break;");
                    _builder.newLine();
                    _builder.append("\t\t\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("else {");
                    _builder.newLine();
                    _builder.append("\t\t\t");
                    _builder.append("if (checkboxes[i].checked == true) {");
                    _builder.newLine();
                    _builder.append("\t\t\t\t");
                    _builder.append("correction = false;");
                    _builder.newLine();
                    _builder.append("\t\t\t\t");
                    _builder.append("break;");
                    _builder.newLine();
                    _builder.append("\t\t\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("}");
                    _builder.newLine();
                  } else {
                    Mode _mode_1 = ((MultiChoiceEmendation)exercise_1).getConfig().getMode();
                    boolean _equals_8 = Objects.equal(_mode_1, Mode.RADIOBUTTON);
                    if (_equals_8) {
                      _builder.append("var radiobuttons = document.getElementsByName(\'radiobutton-");
                      _builder.append(this.num);
                      _builder.append("-");
                      _builder.append(part);
                      _builder.append("-");
                      String _replace_15 = diagram_3.replace("/", "-");
                      _builder.append(_replace_15);
                      _builder.append("\');");
                      _builder.newLineIfNotEmpty();
                      _builder.append("if (getCheckedBoxes(\'radiobutton-");
                      _builder.append(this.num);
                      _builder.append("-");
                      _builder.append(part);
                      _builder.append("-");
                      String _replace_16 = diagram_3.replace("/", "-");
                      _builder.append(_replace_16);
                      _builder.append("\') == null) {");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t");
                      _builder.append("correction = false;");
                      _builder.newLine();
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("else {");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("for (var i = 0; i < radiobuttons.length; i++) {");
                      _builder.newLine();
                      _builder.append("\t\t");
                      _builder.append("var value = radiobuttons[i].value;");
                      _builder.newLine();
                      _builder.append("\t\t");
                      _builder.append("if (value.startsWith(\'");
                      String _replace_17 = diagram_3.replace("/", "-");
                      _builder.append(_replace_17, "\t\t");
                      _builder.append("\') == true) {");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t\t");
                      _builder.append("if (radiobuttons[i].checked == false) {");
                      _builder.newLine();
                      _builder.append("\t\t\t\t");
                      _builder.append("correction = false;");
                      _builder.newLine();
                      _builder.append("\t\t\t\t");
                      _builder.append("break;");
                      _builder.newLine();
                      _builder.append("\t\t\t");
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("\t\t");
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("\t\t");
                      _builder.append("else {");
                      _builder.newLine();
                      _builder.append("\t\t\t");
                      _builder.append("if (radiobuttons[i].checked == true) {");
                      _builder.newLine();
                      _builder.append("\t\t\t\t");
                      _builder.append("correction = false;");
                      _builder.newLine();
                      _builder.append("\t\t\t\t");
                      _builder.append("break;");
                      _builder.newLine();
                      _builder.append("\t\t\t");
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("\t\t");
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("\t");
                      _builder.append("}");
                      _builder.newLine();
                      _builder.append("}");
                      _builder.newLine();
                    }
                  }
                }
                _builder.append("\t");
                _builder.append("if (correction == true) {");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("exercise");
                _builder.append(this.num, "\t\t");
                _builder.append("_");
                _builder.append(part, "\t\t");
                _builder.append("Mark = true;");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("document.getElementById(\'td-score-null-");
                _builder.append(this.num, "\t\t");
                _builder.append("-");
                _builder.append(part, "\t\t");
                _builder.append("\').style.display = \'none\';");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("document.getElementById(\'td-score-accept-");
                _builder.append(this.num, "\t\t");
                _builder.append("-");
                _builder.append(part, "\t\t");
                _builder.append("\').style.display = \'block\';");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("document.getElementById(\'td-score-wrong-");
                _builder.append(this.num, "\t\t");
                _builder.append("-");
                _builder.append(part, "\t\t");
                _builder.append("\').style.display = \'none\';");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("document.getElementById(\'mark-");
                _builder.append(this.num, "\t\t");
                _builder.append("-");
                _builder.append(part, "\t\t");
                _builder.append("\').innerHTML = \'<img src=\"images/accept.png\" alt=\"ok\" style=\"height: 40px; width: 40px;\" />\';");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("   \t\t\t\t\t");
                _builder.append("else {");
                _builder.newLine();
                _builder.append("\t\t");
                _builder.append("exercise");
                _builder.append(this.num, "\t\t");
                _builder.append("_");
                _builder.append(part, "\t\t");
                _builder.append("Mark = false;");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("document.getElementById(\'td-score-null-");
                _builder.append(this.num, "\t\t");
                _builder.append("-");
                _builder.append(part, "\t\t");
                _builder.append("\').style.display = \'none\';");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("document.getElementById(\'td-score-accept-");
                _builder.append(this.num, "\t\t");
                _builder.append("-");
                _builder.append(part, "\t\t");
                _builder.append("\').style.display = \'none\';");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("document.getElementById(\'td-score-wrong-");
                _builder.append(this.num, "\t\t");
                _builder.append("-");
                _builder.append(part, "\t\t");
                _builder.append("\').style.display = \'block\';");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t");
                _builder.append("document.getElementById(\'mark-");
                _builder.append(this.num, "\t\t");
                _builder.append("-");
                _builder.append(part, "\t\t");
                _builder.append("\').innerHTML = \'<img src=\"images/wrong.png\" alt=\"error\" style=\"height: 40px; width: 40px;\" />\';");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("answered");
                _builder.append(this.num, "\t");
                _builder.append("_");
                _builder.append(part, "\t");
                _builder.append("Exercise = true;");
                _builder.newLineIfNotEmpty();
                _builder.append("    \t\t\t");
                _builder.append("}");
                _builder.newLine();
                {
                  boolean _isRetry_3 = ((MultiChoiceEmendation)exercise_1).getConfig().isRetry();
                  boolean _equals_9 = (_isRetry_3 == false);
                  if (_equals_9) {
                    _builder.append("   \t\t\t\t");
                    _builder.append("if (document.getElementById(\'a-submit-");
                    _builder.append(this.num, "   \t\t\t\t");
                    _builder.append("-");
                    _builder.append(part, "   \t\t\t\t");
                    _builder.append("-");
                    String _replace_18 = diagram_3.replace("/", "-");
                    _builder.append(_replace_18, "   \t\t\t\t");
                    _builder.append("\') != null) {");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    \t\t\t\t");
                    _builder.append("document.getElementById(\'a-submit-");
                    _builder.append(this.num, "    \t\t\t\t");
                    _builder.append("-");
                    _builder.append(part, "    \t\t\t\t");
                    _builder.append("-");
                    String _replace_19 = diagram_3.replace("/", "-");
                    _builder.append(_replace_19, "    \t\t\t\t");
                    _builder.append("\').onclick = function() { return; }");
                    _builder.newLineIfNotEmpty();
                    _builder.append("    \t\t\t");
                    _builder.append("}");
                    _builder.newLine();
                  }
                }
                _builder.append("\t   \t\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("  \t\t\t");
                _builder.append("if (exercise");
                _builder.append(this.num, "  \t\t\t");
                _builder.append("_");
                _builder.append(part, "  \t\t\t");
                _builder.append("Mark == true) {");
                _builder.newLineIfNotEmpty();
                _builder.append("currentMark = currentMark + 1;");
                _builder.newLine();
                _builder.append("weightedMark = weightedMark + weight");
                _builder.append(this.num);
                _builder.append("_");
                _builder.append(part);
                _builder.append("Mark;");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t");
                _builder.append("}");
                _builder.newLine();
                _builder.append("\t\t\t");
                _builder.append("if ((answered");
                _builder.append(this.num, "\t\t\t");
                _builder.append("_");
                _builder.append(part, "\t\t\t");
                _builder.append("Exercise == true) && (exercise");
                _builder.append(this.num, "\t\t\t");
                _builder.append("_");
                _builder.append(part, "\t\t\t");
                _builder.append("Mark == false)) {");
                _builder.newLineIfNotEmpty();
                _builder.append("penaltyMark = penaltyMark + penalty");
                _builder.append(this.num);
                _builder.append("_");
                _builder.append(part);
                _builder.append("Mark;");
                _builder.newLineIfNotEmpty();
                _builder.append("\t\t\t");
                _builder.append("}");
                _builder.newLine();
              }
            }
            _builder.append("\t\t   \t");
            _builder.append("if (document.getElementById(\'current-mark-");
            _builder.append(part, "\t\t   \t");
            _builder.append("\') != null) {");
            _builder.newLineIfNotEmpty();
            _builder.append("    \t");
            _builder.append("\t\t");
            _builder.append("document.getElementById(\'current-mark-");
            _builder.append(part, "    \t\t\t");
            _builder.append("\').innerHTML = \'<label class=\"text\">Current mark: \' + currentMark + \'/\' + currentTotal");
            _builder.append(part, "    \t\t\t");
            _builder.append(" + \'</label>\';//SETS THE CURRENT MARK");
            _builder.newLineIfNotEmpty();
            _builder.append("    \t");
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("    \t");
            _builder.append("\t");
            _builder.append("var tempMark = weightedMark - penaltyMark;");
            _builder.newLine();
            _builder.append("    \t");
            _builder.append("\t");
            _builder.append("if (tempMark < 0) {");
            _builder.newLine();
            _builder.append("    \t");
            _builder.append("\t\t");
            _builder.append("tempMark = 0.0;");
            _builder.newLine();
            _builder.append("    \t");
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("    \t");
            _builder.append("\t");
            _builder.append("if (document.getElementById(\'weighted-mark-");
            _builder.append(part, "    \t\t");
            _builder.append("\') != null) {");
            _builder.newLineIfNotEmpty();
            _builder.append("    \t");
            _builder.append("\t\t");
            _builder.append("document.getElementById(\'weighted-mark-");
            _builder.append(part, "    \t\t\t");
            _builder.append("\').innerHTML = \'<label class=\"text\">Current mark: \' + Math.round(tempMark * 100) + \'%</label>\';//SETS THE WEIGHTED MARK");
            _builder.newLineIfNotEmpty();
            _builder.append("    \t");
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
            _builder.append("   \t\t\t");
            _builder.append("window.location.replace(window.location);");
            _builder.newLine();
            _builder.append("    \t");
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t    ");
    _builder.append("</script>");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<!--");
    _builder.append(part = 0, "\t    ");
    _builder.append("-->");
    _builder.newLineIfNotEmpty();
    {
      EList<MutatorTests> _exercises_2 = program.getExercises();
      for(final MutatorTests exercise_2 : _exercises_2) {
        _builder.append("<!--");
        int _plusPlus_2 = part++;
        _builder.append(_plusPlus_2);
        _builder.append("-->");
        _builder.newLineIfNotEmpty();
        {
          if ((part == 1)) {
            _builder.append("<table class=\"table-test-");
            _builder.append(part);
            _builder.append("\" id=\"table-test-");
            _builder.append(part);
            _builder.append("\" style=\"height: 100%; display: block;\">");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("<table class=\"table-test-");
            _builder.append(part);
            _builder.append("\" id=\"table-test-");
            _builder.append(part);
            _builder.append("\" style=\"height: 100%; display: none;\">");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          ProgramConfiguration _config = program.getConfig();
          boolean _tripleNotEquals_6 = (_config != null);
          if (_tripleNotEquals_6) {
            {
              Navigation _navigation = program.getConfig().getNavigation();
              boolean _equals_10 = Objects.equal(_navigation, Navigation.FREE);
              if (_equals_10) {
                {
                  if ((part > 1)) {
                    _builder.append("<tr>");
                    _builder.newLine();
                    _builder.append("<td align=\"left\">");
                    _builder.newLine();
                    _builder.append("<a href=\"#\" class=\"test-back-");
                    _builder.append((part - 1));
                    _builder.append("\" id=\"test-back-");
                    _builder.append((part - 1));
                    _builder.append("\" onclick=\"show(");
                    _builder.append((part - 1));
                    _builder.append(");\"><img src=\"images/back.png\" alt=\"back\" style=\"height: 30px; width: 30px;\" /></a>");
                    _builder.newLineIfNotEmpty();
                    _builder.append("</td>");
                    _builder.newLine();
                    _builder.append("</tr>");
                    _builder.newLine();
                  }
                }
              }
            }
          }
        }
        {
          int _length = ((Object[])Conversions.unwrapArray(program.getExercises(), Object.class)).length;
          boolean _lessThan = (part < _length);
          if (_lessThan) {
            _builder.append("<tr>");
            _builder.newLine();
            _builder.append("<td align=\"left\">");
            _builder.newLine();
            _builder.append("<a href=\"#\" class=\"test-continue-");
            _builder.append((part + 1));
            _builder.append("\" id=\"test-continue-");
            _builder.append((part + 1));
            _builder.append("\" onclick=\"show(");
            _builder.append((part + 1));
            _builder.append(");\"><img src=\"images/continue.png\" alt=\"continue\" style=\"height: 30px; width: 30px;\" /></a>");
            _builder.newLineIfNotEmpty();
            _builder.append("</td>");
            _builder.newLine();
            _builder.append("</tr>");
            _builder.newLine();
          }
        }
        _builder.append("\t    ");
        _builder.append("<tr>");
        _builder.newLine();
        {
          if ((exercise_2 instanceof AlternativeResponse)) {
            CharSequence _showone = this.showone(((AlternativeResponse)exercise_2), part);
            _builder.append(_showone);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((exercise_2 instanceof MultiChoiceDiagram)) {
            CharSequence _showall = this.showall(((MultiChoiceDiagram)exercise_2), part);
            _builder.append(_showall);
            _builder.newLineIfNotEmpty();
          }
        }
        {
          if ((exercise_2 instanceof MultiChoiceEmendation)) {
            CharSequence _show = this.show(((MultiChoiceEmendation)exercise_2), part);
            _builder.append(_show);
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("</tr>");
        _builder.newLine();
        _builder.append("</table>");
        _builder.newLine();
      }
    }
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("</html>");
    _builder.newLine();
    return _builder;
  }

  public CharSequence showone(final AlternativeResponse ss, final int part) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t    ");
    _builder.append("<td valign=\"top\">");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<div id=\"pretty-menu\">");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<ul>");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("<!--COUNTER: ");
    _builder.append(this.num = 0, "    \t");
    _builder.append("--> ");
    _builder.newLineIfNotEmpty();
    {
      EList<Test> _tests = ss.getTests();
      for(final Test test : _tests) {
        _builder.append("<!--COUNTER: ");
        _builder.append(this.num = (this.num + 1));
        _builder.append("-->");
        _builder.newLineIfNotEmpty();
        _builder.append("<li class=\"score-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\">");
        _builder.newLineIfNotEmpty();
        _builder.append("<table class=\"score-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\" id=\"score-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\">");
        _builder.newLineIfNotEmpty();
        _builder.append("<tr>");
        _builder.newLine();
        _builder.append("<td id=\"td-score-null-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\" style=\"display: block;\">");
        _builder.newLineIfNotEmpty();
        _builder.append("<img src=\"images/null.png\" alt=\"null\" style=\"height: 40px; width: 40px;\" />");
        _builder.newLine();
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("<td id=\"td-score-accept-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\" style=\"display: none;\">");
        _builder.newLineIfNotEmpty();
        _builder.append("<img src=\"images/accept.png\" alt=\"ok\" style=\"height: 40px; width: 40px;\" />");
        _builder.newLine();
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("<td id=\"td-score-wrong-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\" style=\"display: none;\">");
        _builder.newLineIfNotEmpty();
        _builder.append("<img src=\"images/wrong.png\" alt=\"error\" style=\"height: 40px; width: 40px;\" />");
        _builder.newLine();
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("<td>");
        _builder.newLine();
        _builder.append("<a href=\"#\" class=\"ex-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\" id=\"ex-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\" onclick=\"show");
        _builder.append(part);
        _builder.append("(");
        _builder.append(this.num);
        _builder.append(");\">Exercise ");
        _builder.append(this.num);
        _builder.append("</a>");
        _builder.newLineIfNotEmpty();
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("</tr>");
        _builder.newLine();
        _builder.append("</table>");
        _builder.newLine();
        _builder.append("</li>");
        _builder.newLine();
      }
    }
    _builder.append("<li><p class=\"current-mark-");
    _builder.append(part);
    _builder.append("\" id=\"current-mark-");
    _builder.append(part);
    _builder.append("\"></p></li>");
    _builder.newLineIfNotEmpty();
    _builder.append("</ul>");
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("</td>");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("<!--COUNTER: ");
    _builder.append(this.num = 0, "    \t");
    _builder.append("--> ");
    _builder.newLineIfNotEmpty();
    {
      EList<Test> _tests_1 = ss.getTests();
      for(final Test test_1 : _tests_1) {
        {
          int _size = this.rand.get(ss).get(test_1).size();
          boolean _greaterThan = (_size > 0);
          if (_greaterThan) {
            _builder.append("    \t\t");
            _builder.append("<!--DIAGRAM: ");
            String diagram = this.rand.get(ss).get(test_1).get(0);
            _builder.append("-->");
            _builder.newLineIfNotEmpty();
            _builder.append("<!--COUNTER: ");
            _builder.append(this.num = (this.num + 1));
            _builder.append("-->");
            _builder.newLineIfNotEmpty();
            _builder.append("<td class=\"exercise-");
            _builder.append(this.num);
            _builder.append("-");
            _builder.append(part);
            _builder.append("\" id=\"exercise-");
            _builder.append(this.num);
            _builder.append("-");
            _builder.append(part);
            _builder.append("\" valign=\"top\" style=\"display: none;\">");
            _builder.newLineIfNotEmpty();
            _builder.append("<fieldset valign=\"top\">");
            _builder.newLine();
            _builder.append("<legend class=\"text\"><font color=\"black\">");
            String _question = test_1.getQuestion();
            _builder.append(_question);
            _builder.append("&nbsp;&nbsp;&nbsp;<div class=\"mark-");
            _builder.append(this.num);
            _builder.append("-");
            _builder.append(part);
            _builder.append("\" id=\"mark-");
            _builder.append(this.num);
            _builder.append("-");
            _builder.append(part);
            _builder.append("\"></div></font></legend>");
            _builder.newLineIfNotEmpty();
            _builder.append("<table class=\"pretty\">");
            _builder.newLine();
            _builder.append("<tr>");
            _builder.newLine();
            _builder.append("<td valign=\"top\">");
            _builder.newLine();
            _builder.append("<table class=\"pretty\">");
            _builder.newLine();
            _builder.append("<tr>");
            _builder.newLine();
            _builder.append("<td id=\"td-exercise-");
            _builder.append(this.num);
            _builder.append("-");
            _builder.append(part);
            _builder.append("-");
            String _replace = diagram.replace("/", "-");
            _builder.append(_replace);
            _builder.append("\" valign=\"top\">");
            _builder.newLineIfNotEmpty();
            _builder.append("<img src=\"diagrams/");
            String _replace_1 = test_1.getSource().replace(".model", "");
            _builder.append(_replace_1);
            _builder.append("/");
            _builder.append(diagram);
            _builder.append("\" title=\"exercise-");
            _builder.append(this.num);
            _builder.append("-");
            _builder.append(part);
            _builder.append("-");
            String _replace_2 = diagram.replace("/", "-");
            _builder.append(_replace_2);
            _builder.append("\" id=\"exercise-");
            _builder.append(this.num);
            _builder.append("-");
            _builder.append(part);
            _builder.append("-");
            String _replace_3 = diagram.replace("/", "-");
            _builder.append(_replace_3);
            _builder.append("\" name=\"exercise-");
            _builder.append(this.num);
            _builder.append("-");
            _builder.append(part);
            _builder.append("-");
            String _replace_4 = diagram.replace("/", "-");
            _builder.append(_replace_4);
            _builder.append("\" class=\"images\" />");
            _builder.newLineIfNotEmpty();
            _builder.append("</td>");
            _builder.newLine();
            _builder.append("</tr>");
            _builder.newLine();
            _builder.append("</table>");
            _builder.newLine();
            _builder.append("</td>");
            _builder.newLine();
            _builder.append("</tr>");
            _builder.newLine();
            _builder.append("<tr>");
            _builder.newLine();
            _builder.append("<td>");
            _builder.newLine();
            _builder.append("<table class=\"pretty\" width=\"100%\">");
            _builder.newLine();
            _builder.append("<tr>");
            _builder.newLine();
            _builder.append("<td id=\"td-right-");
            _builder.append(this.num);
            _builder.append("-");
            _builder.append(part);
            _builder.append("-");
            String _replace_5 = diagram.replace("/", "-");
            _builder.append(_replace_5);
            _builder.append("\" valign=\"top\" style=\"text-align:left\">");
            _builder.newLineIfNotEmpty();
            {
              int _indexOf = diagram.indexOf("/");
              boolean _greaterThan_1 = (_indexOf > 0);
              if (_greaterThan_1) {
                _builder.append("<a href=\"#\" class=\"a-right-");
                _builder.append(this.num);
                _builder.append("-");
                _builder.append(part);
                _builder.append("-");
                String _replace_6 = diagram.replace("/", "-");
                _builder.append(_replace_6);
                _builder.append("\" id=\"a-right-");
                _builder.append(this.num);
                _builder.append("-");
                _builder.append(part);
                _builder.append("-");
                String _replace_7 = diagram.replace("/", "-");
                _builder.append(_replace_7);
                _builder.append("\" onclick=\"right");
                _builder.append(part);
                _builder.append("(");
                _builder.append(this.num);
                _builder.append(",\'");
                int _indexOf_1 = diagram.indexOf("/");
                int _plus = (_indexOf_1 + 1);
                String _substring = diagram.substring(_plus);
                _builder.append(_substring);
                _builder.append("\');\"><img src=\"images/accept.png\" alt=\"accept\" style=\"height: 40px; width: 40px;\" class=\"images\" /></a>");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("<a href=\"#\" class=\"a-right-");
                _builder.append(this.num);
                _builder.append("-");
                _builder.append(part);
                _builder.append("-");
                String _replace_8 = diagram.replace("/", "-");
                _builder.append(_replace_8);
                _builder.append("\" id=\"a-right-");
                _builder.append(this.num);
                _builder.append("-");
                _builder.append(part);
                _builder.append("-");
                String _replace_9 = diagram.replace("/", "-");
                _builder.append(_replace_9);
                _builder.append("\" onclick=\"right");
                _builder.append(part);
                _builder.append("(");
                _builder.append(this.num);
                _builder.append(",\'");
                _builder.append(diagram);
                _builder.append("\');\"><img src=\"images/accept.png\" alt=\"accept\" style=\"height: 40px; width: 40px;\" class=\"images\" /></a>");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("</td>");
            _builder.newLine();
            _builder.append("<td id=\"td-wrong-");
            _builder.append(this.num);
            _builder.append("-");
            _builder.append(diagram);
            _builder.append("\" valign=\"top\" style=\"text-align:right\">");
            _builder.newLineIfNotEmpty();
            {
              int _indexOf_2 = diagram.indexOf("/");
              boolean _greaterThan_2 = (_indexOf_2 > 0);
              if (_greaterThan_2) {
                _builder.append("<a href=\"#\" class=\"a-wrong-");
                _builder.append(this.num);
                _builder.append("-");
                _builder.append(part);
                _builder.append("-");
                String _replace_10 = diagram.replace("/", "-");
                _builder.append(_replace_10);
                _builder.append("\" id=\"a-wrong-");
                _builder.append(this.num);
                _builder.append("-");
                _builder.append(part);
                _builder.append("-");
                String _replace_11 = diagram.replace("/", "-");
                _builder.append(_replace_11);
                _builder.append("\" onclick=\"wrong");
                _builder.append(part);
                _builder.append("(");
                _builder.append(this.num);
                _builder.append(",\'");
                int _indexOf_3 = diagram.indexOf("/");
                int _plus_1 = (_indexOf_3 + 1);
                String _substring_1 = diagram.substring(_plus_1);
                _builder.append(_substring_1);
                _builder.append("\');\"><img src=\"images/wrong.png\" alt=\"wrong\" style=\"height: 40px; width: 40px;\" class=\"images\" /></a>");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("<a href=\"#\" class=\"a-wrong-");
                _builder.append(this.num);
                _builder.append("-");
                _builder.append(part);
                _builder.append("-");
                String _replace_12 = diagram.replace("/", "-");
                _builder.append(_replace_12);
                _builder.append("\" id=\"a-wrong-");
                _builder.append(this.num);
                _builder.append("-");
                _builder.append(part);
                _builder.append("-");
                String _replace_13 = diagram.replace("/", "-");
                _builder.append(_replace_13);
                _builder.append("\" onclick=\"wrong");
                _builder.append(part);
                _builder.append("(");
                _builder.append(this.num);
                _builder.append(",\'");
                _builder.append(diagram);
                _builder.append("\');\"><img src=\"images/wrong.png\" alt=\"wrong\" style=\"height: 40px; width: 40px;\" class=\"images\" /></a>");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("</td>");
            _builder.newLine();
            _builder.append("</tr>");
            _builder.newLine();
            _builder.append("</table>");
            _builder.newLine();
            _builder.append("</td>");
            _builder.newLine();
            _builder.append("</tr>");
            _builder.newLine();
            _builder.append("</table>");
            _builder.newLine();
            _builder.append("</fieldset>");
            _builder.newLine();
            _builder.append("</td>");
            _builder.newLine();
          }
        }
      }
    }
    return _builder;
  }

  public CharSequence showall(final MultiChoiceDiagram ss, final int part) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t    ");
    _builder.append("<td valign=\"top\">");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<div id=\"pretty-menu\">");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<ul>");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("<!--COUNTER: ");
    _builder.append(this.num = 0, "    \t");
    _builder.append("--> ");
    _builder.newLineIfNotEmpty();
    {
      EList<Test> _tests = ss.getTests();
      for(final Test test : _tests) {
        _builder.append("<!--COUNTER: ");
        _builder.append(this.num = (this.num + 1));
        _builder.append("-->");
        _builder.newLineIfNotEmpty();
        _builder.append("<li class=\"score-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\">");
        _builder.newLineIfNotEmpty();
        _builder.append("<table class=\"score-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\" id=\"score-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\">");
        _builder.newLineIfNotEmpty();
        _builder.append("<tr>");
        _builder.newLine();
        _builder.append("<td id=\"td-score-null-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\" style=\"display: block;\">");
        _builder.newLineIfNotEmpty();
        _builder.append("<img src=\"images/null.png\" alt=\"null\" style=\"height: 40px; width: 40px;\" />");
        _builder.newLine();
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("<td id=\"td-score-accept-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\" style=\"display: none;\">");
        _builder.newLineIfNotEmpty();
        _builder.append("<img src=\"images/accept.png\" alt=\"ok\" style=\"height: 40px; width: 40px;\" />");
        _builder.newLine();
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("<td id=\"td-score-wrong-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\" style=\"display: none;\">");
        _builder.newLineIfNotEmpty();
        _builder.append("<img src=\"images/wrong.png\" alt=\"error\" style=\"height: 40px; width: 40px;\" />");
        _builder.newLine();
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("<td>");
        _builder.newLine();
        _builder.append("<a href=\"#\" class=\"ex-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\" id=\"ex-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\" onclick=\"show");
        _builder.append(part);
        _builder.append("(");
        _builder.append(this.num);
        _builder.append(");\">Exercise ");
        _builder.append(this.num);
        _builder.append("</a>");
        _builder.newLineIfNotEmpty();
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("</tr>");
        _builder.newLine();
        _builder.append("</table>");
        _builder.newLine();
        _builder.append("</li>");
        _builder.newLine();
      }
    }
    _builder.append("<li><p class=\"current-mark-");
    _builder.append(part);
    _builder.append("\" id=\"current-mark-");
    _builder.append(part);
    _builder.append("\"></p></li>");
    _builder.newLineIfNotEmpty();
    _builder.append("</ul>");
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("</td>");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("<!--COUNTER: ");
    _builder.append(this.num = 0, "    \t");
    _builder.append("--> ");
    _builder.newLineIfNotEmpty();
    {
      EList<Test> _tests_1 = ss.getTests();
      for(final Test test_1 : _tests_1) {
        _builder.append("<!--COUNTER: ");
        _builder.append(this.num = (this.num + 1));
        _builder.append("-->");
        _builder.newLineIfNotEmpty();
        _builder.append("<td class=\"exercise-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\" id=\"exercise-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\" valign=\"top\" style=\"display: none;\">");
        _builder.newLineIfNotEmpty();
        _builder.append("<fieldset valign=\"top\">");
        _builder.newLine();
        _builder.append("<legend class=\"text\"><font color=\"black\">");
        String _question = test_1.getQuestion();
        _builder.append(_question);
        _builder.append("&nbsp;&nbsp;&nbsp;<div class=\"mark-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\" id=\"mark-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\"></div></font></legend>");
        _builder.newLineIfNotEmpty();
        _builder.append("<table class=\"pretty\">");
        _builder.newLine();
        _builder.append("<tr>");
        _builder.newLine();
        _builder.append("<td valign=\"top\">");
        _builder.newLine();
        _builder.append("<table class=\"pretty\">");
        _builder.newLine();
        _builder.append("<tr>");
        _builder.newLine();
        {
          List<String> _get = this.rand.get(ss).get(test_1);
          for(final String diagram : _get) {
            _builder.append("<td id=\"td-exercise-");
            _builder.append(this.num);
            _builder.append("-");
            _builder.append(part);
            _builder.append("-");
            String _replace = diagram.replace("/", "-");
            _builder.append(_replace);
            _builder.append("\" valign=\"top\">");
            _builder.newLineIfNotEmpty();
            {
              int _indexOf = diagram.indexOf("/");
              boolean _greaterThan = (_indexOf > 0);
              if (_greaterThan) {
                _builder.append("<a href=\"#\" class=\"a-exercise-");
                _builder.append(this.num);
                _builder.append("-");
                _builder.append(part);
                _builder.append("-");
                String _replace_1 = diagram.replace("/", "-");
                _builder.append(_replace_1);
                _builder.append("\" id=\"a-exercise-");
                _builder.append(this.num);
                _builder.append("-");
                _builder.append(part);
                _builder.append("-");
                String _replace_2 = diagram.replace("/", "-");
                _builder.append(_replace_2);
                _builder.append("\" onclick=\"check");
                _builder.append(part);
                _builder.append("(");
                _builder.append(this.num);
                _builder.append(",\'");
                int _indexOf_1 = diagram.indexOf("/");
                int _plus = (_indexOf_1 + 1);
                String _substring = diagram.substring(_plus);
                _builder.append(_substring);
                _builder.append("\');\"><img src=\"diagrams/");
                String _replace_3 = test_1.getSource().replace(".model", "");
                _builder.append(_replace_3);
                _builder.append("/");
                _builder.append(diagram);
                _builder.append("\" title=\"exercise-");
                _builder.append(this.num);
                _builder.append("-");
                String _replace_4 = diagram.replace("/", "-");
                _builder.append(_replace_4);
                _builder.append("\" id=\"exercise-");
                _builder.append(this.num);
                _builder.append("-");
                String _replace_5 = diagram.replace("/", "-");
                _builder.append(_replace_5);
                _builder.append("\" name=\"exercise-");
                _builder.append(this.num);
                _builder.append("-");
                String _replace_6 = diagram.replace("/", "-");
                _builder.append(_replace_6);
                _builder.append("\" class=\"images\" /></a>");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("<a href=\"#\" class=\"a-exercise-");
                _builder.append(this.num);
                _builder.append("-");
                _builder.append(part);
                _builder.append("-");
                String _replace_7 = diagram.replace("/", "-");
                _builder.append(_replace_7);
                _builder.append("\" id=\"a-exercise-");
                _builder.append(this.num);
                _builder.append("-");
                _builder.append(part);
                _builder.append("-");
                String _replace_8 = diagram.replace("/", "-");
                _builder.append(_replace_8);
                _builder.append("\" onclick=\"check");
                _builder.append(part);
                _builder.append("(");
                _builder.append(this.num);
                _builder.append(",\'");
                _builder.append(diagram);
                _builder.append("\');\"><img src=\"diagrams/");
                String _replace_9 = test_1.getSource().replace(".model", "");
                _builder.append(_replace_9);
                _builder.append("/");
                _builder.append(diagram);
                _builder.append("\" title=\"exercise-");
                _builder.append(this.num);
                _builder.append("-");
                String _replace_10 = diagram.replace("/", "-");
                _builder.append(_replace_10);
                _builder.append("\" id=\"exercise-");
                _builder.append(this.num);
                _builder.append("-");
                String _replace_11 = diagram.replace("/", "-");
                _builder.append(_replace_11);
                _builder.append("\" name=\"exercise-");
                _builder.append(this.num);
                _builder.append("-");
                String _replace_12 = diagram.replace("/", "-");
                _builder.append(_replace_12);
                _builder.append("\" class=\"images\" /></a>");
                _builder.newLineIfNotEmpty();
              }
            }
            _builder.append("</td>");
            _builder.newLine();
          }
        }
        _builder.append("</tr>");
        _builder.newLine();
        _builder.append("</table>");
        _builder.newLine();
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("</tr>");
        _builder.newLine();
        _builder.append("</table>");
        _builder.newLine();
        _builder.append("</fieldset>");
        _builder.newLine();
        _builder.append("</td>");
        _builder.newLine();
      }
    }
    return _builder;
  }

  public CharSequence show(final MultiChoiceEmendation sc, final int part) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t    ");
    _builder.append("<td valign=\"top\">");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<div id=\"pretty-menu\">");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("<ul>");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("<!--COUNTER: ");
    _builder.append(this.num = 0, "    \t");
    _builder.append("--> ");
    _builder.newLineIfNotEmpty();
    {
      List<Test> _get = this.tests.get(sc);
      for(final Test test : _get) {
        _builder.append("<!--COUNTER: ");
        _builder.append(this.num = (this.num + 1));
        _builder.append("-->");
        _builder.newLineIfNotEmpty();
        _builder.append("<li class=\"score-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\">");
        _builder.newLineIfNotEmpty();
        _builder.append("<table class=\"score-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\" id=\"score-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\">");
        _builder.newLineIfNotEmpty();
        _builder.append("<tr>");
        _builder.newLine();
        _builder.append("<td id=\"td-score-null-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\" style=\"display: block;\">");
        _builder.newLineIfNotEmpty();
        _builder.append("<img src=\"images/null.png\" alt=\"null\" style=\"height: 40px; width: 40px;\" />");
        _builder.newLine();
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("<td id=\"td-score-accept-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\" style=\"display: none;\">");
        _builder.newLineIfNotEmpty();
        _builder.append("<img src=\"images/accept.png\" alt=\"ok\" style=\"height: 40px; width: 40px;\" />");
        _builder.newLine();
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("<td id=\"td-score-wrong-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\" style=\"display: none;\">");
        _builder.newLineIfNotEmpty();
        _builder.append("<img src=\"images/wrong.png\" alt=\"error\" style=\"height: 40px; width: 40px;\" />");
        _builder.newLine();
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("<td>");
        _builder.newLine();
        _builder.append("<a href=\"#\" class=\"ex-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\" id=\"ex-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\" onclick=\"show");
        _builder.append(part);
        _builder.append("(");
        _builder.append(this.num);
        _builder.append(");\">Exercise ");
        _builder.append(this.num);
        _builder.append("</a>");
        _builder.newLineIfNotEmpty();
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("</tr>");
        _builder.newLine();
        _builder.append("</table>");
        _builder.newLine();
        _builder.append("</li>");
        _builder.newLine();
      }
    }
    {
      boolean _isWeighted = sc.getConfig().isWeighted();
      boolean _equals = (_isWeighted == false);
      if (_equals) {
        _builder.append("<li><p class=\"current-mark-");
        _builder.append(part);
        _builder.append("\" id=\"current-mark-");
        _builder.append(part);
        _builder.append("\"></p></li>");
        _builder.newLineIfNotEmpty();
        _builder.append("<li><p class=\"weighted-mark-");
        _builder.append(part);
        _builder.append("\" id=\"weighted-mark-");
        _builder.append(part);
        _builder.append("\" style=\"display: none;\"></p></li>");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      boolean _isWeighted_1 = sc.getConfig().isWeighted();
      boolean _equals_1 = (_isWeighted_1 == true);
      if (_equals_1) {
        _builder.append("<li><p class=\"current-mark-");
        _builder.append(part);
        _builder.append("\" id=\"current-mark-");
        _builder.append(part);
        _builder.append("\" style=\"display: none;\"></p></li>");
        _builder.newLineIfNotEmpty();
        _builder.append("<li><p class=\"weighted-mark-");
        _builder.append(part);
        _builder.append("\" id=\"weighted-mark-");
        _builder.append(part);
        _builder.append("\"></p></li>");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</ul>");
    _builder.newLine();
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("</td>");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("<!--COUNTER: ");
    _builder.append(this.num = 0, "    \t");
    _builder.append("--> ");
    _builder.newLineIfNotEmpty();
    {
      List<Test> _get_1 = this.tests.get(sc);
      for(final Test test_1 : _get_1) {
        _builder.append("<!--");
        String diagram = "";
        _builder.append("-->");
        _builder.newLineIfNotEmpty();
        {
          List<EduTestSuperGenerator.TestOption> _get_2 = this.options.get(sc).get(test_1);
          boolean _tripleNotEquals = (_get_2 != null);
          if (_tripleNotEquals) {
            {
              List<EduTestSuperGenerator.TestOption> _get_3 = this.options.get(sc).get(test_1);
              for(final EduTestSuperGenerator.TestOption opt : _get_3) {
                {
                  if ((opt.solution == true)) {
                    _builder.append("<!--");
                    _builder.append(diagram = opt.path);
                    _builder.append("-->");
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          }
        }
        _builder.append("<!--COUNTER: ");
        _builder.append(this.num = (this.num + 1));
        _builder.append("-->");
        _builder.newLineIfNotEmpty();
        _builder.append("<td class=\"exercise-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\" id=\"exercise-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\" valign=\"top\" style=\"display: none;\">");
        _builder.newLineIfNotEmpty();
        _builder.append("<fieldset valign=\"top\">");
        _builder.newLine();
        _builder.append("<legend class=\"text\"><font color=\"black\">");
        String _question = test_1.getQuestion();
        _builder.append(_question);
        _builder.append("&nbsp;&nbsp;&nbsp;<div class=\"mark-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\" id=\"mark-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("\"></div></font></legend>");
        _builder.newLineIfNotEmpty();
        _builder.append("<table class=\"pretty\">");
        _builder.newLine();
        _builder.append("<tr>");
        _builder.newLine();
        _builder.append("<td valign=\"top\">");
        _builder.newLine();
        _builder.append("<table class=\"pretty\">");
        _builder.newLine();
        _builder.append("<tr>");
        _builder.newLine();
        _builder.append("<td id=\"td-exercise-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("-");
        String _replace = diagram.replace("/", "-");
        _builder.append(_replace);
        _builder.append("\" valign=\"top\">");
        _builder.newLineIfNotEmpty();
        _builder.append("<img src=\"");
        _builder.append(diagram);
        _builder.append("\" title=\"exercise-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("-");
        String _replace_1 = diagram.replace("/", "-");
        _builder.append(_replace_1);
        _builder.append("\" id=\"exercise-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("-");
        String _replace_2 = diagram.replace("/", "-");
        _builder.append(_replace_2);
        _builder.append("\" name=\"exercise-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("-");
        String _replace_3 = diagram.replace("/", "-");
        _builder.append(_replace_3);
        _builder.append("\" class=\"images\" />");
        _builder.newLineIfNotEmpty();
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("</tr>");
        _builder.newLine();
        _builder.append("</table>");
        _builder.newLine();
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("</tr>");
        _builder.newLine();
        _builder.append("<tr>");
        _builder.newLine();
        _builder.append("<td>");
        _builder.newLine();
        _builder.append("<table class=\"pretty\" width=\"100%\">");
        _builder.newLine();
        _builder.append("<!--");
        int i = 0;
        _builder.append("-->");
        _builder.newLineIfNotEmpty();
        {
          List<EduTestSuperGenerator.TestOption> _get_4 = this.options.get(sc).get(test_1);
          boolean _tripleNotEquals_1 = (_get_4 != null);
          if (_tripleNotEquals_1) {
            {
              List<EduTestSuperGenerator.TestOption> _get_5 = this.options.get(sc).get(test_1);
              for(final EduTestSuperGenerator.TestOption opt_1 : _get_5) {
                {
                  Mode _mode = sc.getConfig().getMode();
                  boolean _equals_2 = Objects.equal(_mode, Mode.CHECKBOX);
                  if (_equals_2) {
                    {
                      int _size = opt_1.text.size();
                      boolean _greaterThan = (_size > 0);
                      if (_greaterThan) {
                        _builder.append("<tr>");
                        _builder.newLine();
                        _builder.append("<td valign=\"top\" style=\"text-align:left\">");
                        _builder.newLine();
                        _builder.append("<input type=\"checkbox\" name=\"checkbox-");
                        _builder.append(this.num);
                        _builder.append("-");
                        _builder.append(part);
                        _builder.append("-");
                        String _replace_4 = diagram.replace("/", "-");
                        _builder.append(_replace_4);
                        _builder.append("\" value=\"");
                        String _replace_5 = opt_1.path.replace("/", "-");
                        _builder.append(_replace_5);
                        _builder.append("-");
                        _builder.append(i);
                        _builder.append("\" />");
                        _builder.newLineIfNotEmpty();
                        List<String> _get_6 = opt_1.text.get(Integer.valueOf(0));
                        _builder.append(_get_6);
                        _builder.newLineIfNotEmpty();
                        _builder.append("<!--");
                        int _plusPlus = i++;
                        _builder.append(_plusPlus);
                        _builder.append("-->");
                        _builder.newLineIfNotEmpty();
                        _builder.append("<td>");
                        _builder.newLine();
                        _builder.append("</tr>");
                        _builder.newLine();
                      }
                    }
                  } else {
                    Mode _mode_1 = sc.getConfig().getMode();
                    boolean _equals_3 = Objects.equal(_mode_1, Mode.RADIOBUTTON);
                    if (_equals_3) {
                      _builder.append("<tr>");
                      _builder.newLine();
                      _builder.append("<td valign=\"top\" style=\"text-align:left\">");
                      _builder.newLine();
                      _builder.append("<input type=\"radio\" name=\"radiobutton-");
                      _builder.append(this.num);
                      _builder.append("-");
                      _builder.append(part);
                      _builder.append("-");
                      String _replace_6 = diagram.replace("/", "-");
                      _builder.append(_replace_6);
                      _builder.append("\" value=\"");
                      String _replace_7 = opt_1.path.replace("/", "-");
                      _builder.append(_replace_7);
                      _builder.append("-");
                      _builder.append(i);
                      _builder.append("\" />");
                      _builder.newLineIfNotEmpty();
                      _builder.append("<!--");
                      int j = 0;
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      {
                        List<String> _get_7 = opt_1.text.get(Integer.valueOf(0));
                        for(final String text : _get_7) {
                          {
                            int _size_1 = opt_1.text.get(Integer.valueOf(0)).size();
                            boolean _lessThan = (j < _size_1);
                            if (_lessThan) {
                              _builder.append(text);
                              _builder.append("<br/>");
                              _builder.newLineIfNotEmpty();
                            } else {
                              _builder.append(text);
                              _builder.newLineIfNotEmpty();
                            }
                          }
                          _builder.append("<!--");
                          int _plusPlus_1 = j++;
                          _builder.append(_plusPlus_1);
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                      _builder.append("<!--");
                      int _plusPlus_2 = i++;
                      _builder.append(_plusPlus_2);
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      _builder.append("<td>");
                      _builder.newLine();
                      _builder.append("</tr>");
                      _builder.newLine();
                    }
                  }
                }
              }
            }
          }
        }
        _builder.append("</table>");
        _builder.newLine();
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("</tr>");
        _builder.newLine();
        _builder.append("<tr>");
        _builder.newLine();
        _builder.append("<td>");
        _builder.newLine();
        _builder.append("<table class=\"pretty\" width=\"100%\">");
        _builder.newLine();
        _builder.append("<tr>");
        _builder.newLine();
        _builder.append("<td id=\"td-submit-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("-");
        String _replace_8 = diagram.replace("/", "-");
        _builder.append(_replace_8);
        _builder.append("\" valign=\"top\" style=\"text-align:left\">");
        _builder.newLineIfNotEmpty();
        _builder.append("<a href=\"#\" class=\"a-submit-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("-");
        String _replace_9 = diagram.replace("/", "-");
        _builder.append(_replace_9);
        _builder.append("\" id=\"a-submit-");
        _builder.append(this.num);
        _builder.append("-");
        _builder.append(part);
        _builder.append("-");
        String _replace_10 = diagram.replace("/", "-");
        _builder.append(_replace_10);
        _builder.append("\" onclick=\"submit");
        _builder.append(part);
        _builder.append("(");
        _builder.append(this.num);
        _builder.append(",\'");
        String _replace_11 = diagram.replace("/", "-");
        _builder.append(_replace_11);
        _builder.append("\');\"><img src=\"images/submit.png\" alt=\"submit\" style=\"height: 40px; width: 160px;\" class=\"images\" /></a>");
        _builder.newLineIfNotEmpty();
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("</tr>");
        _builder.newLine();
        _builder.append("</table>");
        _builder.newLine();
        _builder.append("</td>");
        _builder.newLine();
        _builder.append("</tr>");
        _builder.newLine();
        _builder.append("</table>");
        _builder.newLine();
        _builder.append("</fieldset>");
        _builder.newLine();
        _builder.append("</td>");
        _builder.newLine();
      }
    }
    return _builder;
  }
}
