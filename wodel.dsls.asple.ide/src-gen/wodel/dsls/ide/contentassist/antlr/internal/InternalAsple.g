/*
 * generated by Xtext 2.37.0
 */
grammar InternalASPLE;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package wodel.dsls.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package wodel.dsls.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import wodel.dsls.services.ASPLEGrammarAccess;

}
@parser::members {
	private ASPLEGrammarAccess grammarAccess;

	public void setGrammarAccess(ASPLEGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleProgram
entryRuleProgram
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProgramAccess().getGroup()); }
		(rule__Program__Group__0)
		{ after(grammarAccess.getProgramAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDeclaration
entryRuleDeclaration
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDeclarationAccess().getGroup()); }
		(rule__Declaration__Group__0)
		{ after(grammarAccess.getDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEInt
entryRuleEInt
:
{ before(grammarAccess.getEIntRule()); }
	 ruleEInt
{ after(grammarAccess.getEIntRule()); } 
	 EOF 
;

// Rule EInt
ruleEInt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEIntAccess().getGroup()); }
		(rule__EInt__Group__0)
		{ after(grammarAccess.getEIntAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEBoolean
entryRuleEBoolean
:
{ before(grammarAccess.getEBooleanRule()); }
	 ruleEBoolean
{ after(grammarAccess.getEBooleanRule()); } 
	 EOF 
;

// Rule EBoolean
ruleEBoolean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEBooleanAccess().getAlternatives()); }
		(rule__EBoolean__Alternatives)
		{ after(grammarAccess.getEBooleanAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEDouble
entryRuleEDouble
:
{ before(grammarAccess.getEDoubleRule()); }
	 ruleEDouble
{ after(grammarAccess.getEDoubleRule()); } 
	 EOF 
;

// Rule EDouble
ruleEDouble 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEDoubleAccess().getGroup()); }
		(rule__EDouble__Group__0)
		{ after(grammarAccess.getEDoubleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIdentifier
entryRuleIdentifier
:
{ before(grammarAccess.getIdentifierRule()); }
	 ruleIdentifier
{ after(grammarAccess.getIdentifierRule()); } 
	 EOF 
;

// Rule Identifier
ruleIdentifier 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIdentifierAccess().getGroup()); }
		(rule__Identifier__Group__0)
		{ after(grammarAccess.getIdentifierAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLiteral
entryRuleLiteral
:
{ before(grammarAccess.getLiteralRule()); }
	 ruleLiteral
{ after(grammarAccess.getLiteralRule()); } 
	 EOF 
;

// Rule Literal
ruleLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLiteralAccess().getAlternatives()); }
		(rule__Literal__Alternatives)
		{ after(grammarAccess.getLiteralAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInteger
entryRuleInteger
:
{ before(grammarAccess.getIntegerRule()); }
	 ruleInteger
{ after(grammarAccess.getIntegerRule()); } 
	 EOF 
;

// Rule Integer
ruleInteger 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntegerAccess().getGroup()); }
		(rule__Integer__Group__0)
		{ after(grammarAccess.getIntegerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBoolean
entryRuleBoolean
:
{ before(grammarAccess.getBooleanRule()); }
	 ruleBoolean
{ after(grammarAccess.getBooleanRule()); } 
	 EOF 
;

// Rule Boolean
ruleBoolean 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanAccess().getGroup()); }
		(rule__Boolean__Group__0)
		{ after(grammarAccess.getBooleanAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDouble
entryRuleDouble
:
{ before(grammarAccess.getDoubleRule()); }
	 ruleDouble
{ after(grammarAccess.getDoubleRule()); } 
	 EOF 
;

// Rule Double
ruleDouble 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDoubleAccess().getGroup()); }
		(rule__Double__Group__0)
		{ after(grammarAccess.getDoubleAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAssignment
entryRuleAssignment
:
{ before(grammarAccess.getAssignmentRule()); }
	 ruleAssignment
{ after(grammarAccess.getAssignmentRule()); } 
	 EOF 
;

// Rule Assignment
ruleAssignment 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAssignmentAccess().getGroup()); }
		(rule__Assignment__Group__0)
		{ after(grammarAccess.getAssignmentAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditional
entryRuleConditional
:
{ before(grammarAccess.getConditionalRule()); }
	 ruleConditional
{ after(grammarAccess.getConditionalRule()); } 
	 EOF 
;

// Rule Conditional
ruleConditional 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionalAccess().getGroup()); }
		(rule__Conditional__Group__0)
		{ after(grammarAccess.getConditionalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLoop
entryRuleLoop
:
{ before(grammarAccess.getLoopRule()); }
	 ruleLoop
{ after(grammarAccess.getLoopRule()); } 
	 EOF 
;

// Rule Loop
ruleLoop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLoopAccess().getAlternatives()); }
		(rule__Loop__Alternatives)
		{ after(grammarAccess.getLoopAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTransput
entryRuleTransput
:
{ before(grammarAccess.getTransputRule()); }
	 ruleTransput
{ after(grammarAccess.getTransputRule()); } 
	 EOF 
;

// Rule Transput
ruleTransput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTransputAccess().getGroup()); }
		(rule__Transput__Group__0)
		{ after(grammarAccess.getTransputAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
		(rule__Expression__Alternatives)
		{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBinaryOperator
entryRuleBinaryOperator
:
{ before(grammarAccess.getBinaryOperatorRule()); }
	 ruleBinaryOperator
{ after(grammarAccess.getBinaryOperatorRule()); } 
	 EOF 
;

// Rule BinaryOperator
ruleBinaryOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBinaryOperatorAccess().getGroup()); }
		(rule__BinaryOperator__Group__0)
		{ after(grammarAccess.getBinaryOperatorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Mode
ruleMode
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModeAccess().getAlternatives()); }
		(rule__Mode__Alternatives)
		{ after(grammarAccess.getModeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EBoolean__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEBooleanAccess().getTrueKeyword_0()); }
		'true'
		{ after(grammarAccess.getEBooleanAccess().getTrueKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getEBooleanAccess().getFalseKeyword_1()); }
		'false'
		{ after(grammarAccess.getEBooleanAccess().getFalseKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Alternatives_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEDoubleAccess().getEKeyword_4_0_0()); }
		'E'
		{ after(grammarAccess.getEDoubleAccess().getEKeyword_4_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getEDoubleAccess().getEKeyword_4_0_1()); }
		'e'
		{ after(grammarAccess.getEDoubleAccess().getEKeyword_4_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Literal__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLiteralAccess().getIntegerParserRuleCall_0()); }
		ruleInteger
		{ after(grammarAccess.getLiteralAccess().getIntegerParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getBooleanParserRuleCall_1()); }
		ruleBoolean
		{ after(grammarAccess.getLiteralAccess().getBooleanParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getLiteralAccess().getDoubleParserRuleCall_2()); }
		ruleDouble
		{ after(grammarAccess.getLiteralAccess().getDoubleParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getAssignmentParserRuleCall_0()); }
		ruleAssignment
		{ after(grammarAccess.getStatementAccess().getAssignmentParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getConditionalParserRuleCall_1()); }
		ruleConditional
		{ after(grammarAccess.getStatementAccess().getConditionalParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getLoopParserRuleCall_2()); }
		ruleLoop
		{ after(grammarAccess.getStatementAccess().getLoopParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getTransputParserRuleCall_3()); }
		ruleTransput
		{ after(grammarAccess.getStatementAccess().getTransputParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopAccess().getGroup_0()); }
		(rule__Loop__Group_0__0)
		{ after(grammarAccess.getLoopAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getLoopAccess().getGroup_1()); }
		(rule__Loop__Group_1__0)
		{ after(grammarAccess.getLoopAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getPrimaryParserRuleCall_0()); }
		rulePrimary
		{ after(grammarAccess.getExpressionAccess().getPrimaryParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExpressionAccess().getBinaryOperatorParserRuleCall_1()); }
		ruleBinaryOperator
		{ after(grammarAccess.getExpressionAccess().getBinaryOperatorParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getIdentifierParserRuleCall_0()); }
		ruleIdentifier
		{ after(grammarAccess.getPrimaryAccess().getIdentifierParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getLiteralParserRuleCall_1()); }
		ruleLiteral
		{ after(grammarAccess.getPrimaryAccess().getLiteralParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperator__OperatorAlternatives_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryOperatorAccess().getOperatorPlusSignKeyword_2_0_0()); }
		'+'
		{ after(grammarAccess.getBinaryOperatorAccess().getOperatorPlusSignKeyword_2_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryOperatorAccess().getOperatorHyphenMinusKeyword_2_0_1()); }
		'-'
		{ after(grammarAccess.getBinaryOperatorAccess().getOperatorHyphenMinusKeyword_2_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryOperatorAccess().getOperatorAsteriskKeyword_2_0_2()); }
		'*'
		{ after(grammarAccess.getBinaryOperatorAccess().getOperatorAsteriskKeyword_2_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryOperatorAccess().getOperatorSolidusKeyword_2_0_3()); }
		'/'
		{ after(grammarAccess.getBinaryOperatorAccess().getOperatorSolidusKeyword_2_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryOperatorAccess().getOperatorPercentSignKeyword_2_0_4()); }
		'%'
		{ after(grammarAccess.getBinaryOperatorAccess().getOperatorPercentSignKeyword_2_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryOperatorAccess().getOperatorEqualsSignEqualsSignKeyword_2_0_5()); }
		'=='
		{ after(grammarAccess.getBinaryOperatorAccess().getOperatorEqualsSignEqualsSignKeyword_2_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryOperatorAccess().getOperatorExclamationMarkEqualsSignKeyword_2_0_6()); }
		'!='
		{ after(grammarAccess.getBinaryOperatorAccess().getOperatorExclamationMarkEqualsSignKeyword_2_0_6()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryOperatorAccess().getOperatorGreaterThanSignKeyword_2_0_7()); }
		'>'
		{ after(grammarAccess.getBinaryOperatorAccess().getOperatorGreaterThanSignKeyword_2_0_7()); }
	)
	|
	(
		{ before(grammarAccess.getBinaryOperatorAccess().getOperatorLessThanSignKeyword_2_0_8()); }
		'<'
		{ after(grammarAccess.getBinaryOperatorAccess().getOperatorLessThanSignKeyword_2_0_8()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mode__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModeAccess().getIntEnumLiteralDeclaration_0()); }
		('int')
		{ after(grammarAccess.getModeAccess().getIntEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getModeAccess().getBoolEnumLiteralDeclaration_1()); }
		('bool')
		{ after(grammarAccess.getModeAccess().getBoolEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getModeAccess().getDoubleEnumLiteralDeclaration_2()); }
		('double')
		{ after(grammarAccess.getModeAccess().getDoubleEnumLiteralDeclaration_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getProgramAction_0()); }
	()
	{ after(grammarAccess.getProgramAccess().getProgramAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__1__Impl
	rule__Program__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getBeginKeyword_1()); }
	'begin'
	{ after(grammarAccess.getProgramAccess().getBeginKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__2__Impl
	rule__Program__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getGroup_2()); }
	(rule__Program__Group_2__0)*
	{ after(grammarAccess.getProgramAccess().getGroup_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__3__Impl
	rule__Program__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getStatementsAssignment_3()); }
	(rule__Program__StatementsAssignment_3)*
	{ after(grammarAccess.getProgramAccess().getStatementsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getEndKeyword_4()); }
	'end'
	{ after(grammarAccess.getProgramAccess().getEndKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group_2__0__Impl
	rule__Program__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getDeclarationsAssignment_2_0()); }
	(rule__Program__DeclarationsAssignment_2_0)
	{ after(grammarAccess.getProgramAccess().getDeclarationsAssignment_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Program__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProgramAccess().getSemicolonKeyword_2_1()); }
	';'
	{ after(grammarAccess.getProgramAccess().getSemicolonKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declaration__Group__0__Impl
	rule__Declaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationAccess().getDeclarationAction_0()); }
	()
	{ after(grammarAccess.getDeclarationAccess().getDeclarationAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declaration__Group__1__Impl
	rule__Declaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationAccess().getRefAssignment_1()); }
	(rule__Declaration__RefAssignment_1)?
	{ after(grammarAccess.getDeclarationAccess().getRefAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declaration__Group__2__Impl
	rule__Declaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationAccess().getModeAssignment_2()); }
	(rule__Declaration__ModeAssignment_2)?
	{ after(grammarAccess.getDeclarationAccess().getModeAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declaration__Group__3__Impl
	rule__Declaration__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationAccess().getIdentifiersAssignment_3()); }
	(rule__Declaration__IdentifiersAssignment_3)
	{ after(grammarAccess.getDeclarationAccess().getIdentifiersAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declaration__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationAccess().getGroup_4()); }
	(rule__Declaration__Group_4__0)*
	{ after(grammarAccess.getDeclarationAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declaration__Group_4__0__Impl
	rule__Declaration__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getDeclarationAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Declaration__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDeclarationAccess().getIdentifiersAssignment_4_1()); }
	(rule__Declaration__IdentifiersAssignment_4_1)
	{ after(grammarAccess.getDeclarationAccess().getIdentifiersAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EInt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__0__Impl
	rule__EInt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EInt__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EInt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
	{ after(grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EDouble__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EDouble__Group__0__Impl
	rule__EDouble__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_0()); }
	('-')?
	{ after(grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EDouble__Group__1__Impl
	rule__EDouble__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_1()); }
	(RULE_INT)?
	{ after(grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EDouble__Group__2__Impl
	rule__EDouble__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEDoubleAccess().getFullStopKeyword_2()); }
	'.'
	{ after(grammarAccess.getEDoubleAccess().getFullStopKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EDouble__Group__3__Impl
	rule__EDouble__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_3()); }
	RULE_INT
	{ after(grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EDouble__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEDoubleAccess().getGroup_4()); }
	(rule__EDouble__Group_4__0)?
	{ after(grammarAccess.getEDoubleAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__EDouble__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EDouble__Group_4__0__Impl
	rule__EDouble__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEDoubleAccess().getAlternatives_4_0()); }
	(rule__EDouble__Alternatives_4_0)
	{ after(grammarAccess.getEDoubleAccess().getAlternatives_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EDouble__Group_4__1__Impl
	rule__EDouble__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_4_1()); }
	('-')?
	{ after(grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__EDouble__Group_4__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_4_2()); }
	RULE_INT
	{ after(grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Identifier__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Identifier__Group__0__Impl
	rule__Identifier__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdentifierAccess().getIdentifierAction_0()); }
	()
	{ after(grammarAccess.getIdentifierAccess().getIdentifierAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Identifier__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIdentifierAccess().getNameAssignment_1()); }
	(rule__Identifier__NameAssignment_1)
	{ after(grammarAccess.getIdentifierAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Integer__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Integer__Group__0__Impl
	rule__Integer__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegerAccess().getIntegerAction_0()); }
	()
	{ after(grammarAccess.getIntegerAccess().getIntegerAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Integer__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIntegerAccess().getValueAssignment_1()); }
	(rule__Integer__ValueAssignment_1)
	{ after(grammarAccess.getIntegerAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Boolean__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Boolean__Group__0__Impl
	rule__Boolean__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanAccess().getBooleanAction_0()); }
	()
	{ after(grammarAccess.getBooleanAccess().getBooleanAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Boolean__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBooleanAccess().getValueAssignment_1()); }
	(rule__Boolean__ValueAssignment_1)
	{ after(grammarAccess.getBooleanAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Double__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Double__Group__0__Impl
	rule__Double__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Double__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoubleAccess().getDoubleAction_0()); }
	()
	{ after(grammarAccess.getDoubleAccess().getDoubleAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Double__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Double__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Double__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDoubleAccess().getValueAssignment_1()); }
	(rule__Double__ValueAssignment_1)
	{ after(grammarAccess.getDoubleAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Assignment__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__0__Impl
	rule__Assignment__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getVarAssignment_0()); }
	(rule__Assignment__VarAssignment_0)
	{ after(grammarAccess.getAssignmentAccess().getVarAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__1__Impl
	rule__Assignment__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }
	'='
	{ after(grammarAccess.getAssignmentAccess().getEqualsSignKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__2__Impl
	rule__Assignment__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getValueAssignment_2()); }
	(rule__Assignment__ValueAssignment_2)
	{ after(grammarAccess.getAssignmentAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Assignment__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAssignmentAccess().getSemicolonKeyword_3()); }
	';'
	{ after(grammarAccess.getAssignmentAccess().getSemicolonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__0__Impl
	rule__Conditional__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getConditionalAction_0()); }
	()
	{ after(grammarAccess.getConditionalAccess().getConditionalAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__1__Impl
	rule__Conditional__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getIfKeyword_1()); }
	'if'
	{ after(grammarAccess.getConditionalAccess().getIfKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__2__Impl
	rule__Conditional__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getConditionalAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__3__Impl
	rule__Conditional__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getExpressionAssignment_3()); }
	(rule__Conditional__ExpressionAssignment_3)
	{ after(grammarAccess.getConditionalAccess().getExpressionAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__4__Impl
	rule__Conditional__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getConditionalAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__5__Impl
	rule__Conditional__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getLeftCurlyBracketKeyword_5()); }
	'{'
	{ after(grammarAccess.getConditionalAccess().getLeftCurlyBracketKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__6__Impl
	rule__Conditional__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getIfAssignment_6()); }
	(rule__Conditional__IfAssignment_6)*
	{ after(grammarAccess.getConditionalAccess().getIfAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__7__Impl
	rule__Conditional__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getConditionalAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getGroup_8()); }
	(rule__Conditional__Group_8__0)?
	{ after(grammarAccess.getConditionalAccess().getGroup_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Conditional__Group_8__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group_8__0__Impl
	rule__Conditional__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_8__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getElseKeyword_8_0()); }
	'else'
	{ after(grammarAccess.getConditionalAccess().getElseKeyword_8_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_8__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group_8__1__Impl
	rule__Conditional__Group_8__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_8__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getLeftCurlyBracketKeyword_8_1()); }
	'{'
	{ after(grammarAccess.getConditionalAccess().getLeftCurlyBracketKeyword_8_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_8__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group_8__2__Impl
	rule__Conditional__Group_8__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_8__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getElseAssignment_8_2()); }
	(rule__Conditional__ElseAssignment_8_2)*
	{ after(grammarAccess.getConditionalAccess().getElseAssignment_8_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_8__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Conditional__Group_8__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__Group_8__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionalAccess().getRightCurlyBracketKeyword_8_3()); }
	'}'
	{ after(grammarAccess.getConditionalAccess().getRightCurlyBracketKeyword_8_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group_0__0__Impl
	rule__Loop__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getLoopAction_0_0()); }
	()
	{ after(grammarAccess.getLoopAccess().getLoopAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group_0__1__Impl
	rule__Loop__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getWhileKeyword_0_1()); }
	'while'
	{ after(grammarAccess.getLoopAccess().getWhileKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group_0__2__Impl
	rule__Loop__Group_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getLeftParenthesisKeyword_0_2()); }
	'('
	{ after(grammarAccess.getLoopAccess().getLeftParenthesisKeyword_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group_0__3__Impl
	rule__Loop__Group_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getExpressionAssignment_0_3()); }
	(rule__Loop__ExpressionAssignment_0_3)
	{ after(grammarAccess.getLoopAccess().getExpressionAssignment_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group_0__4__Impl
	rule__Loop__Group_0__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getRightParenthesisKeyword_0_4()); }
	')'
	{ after(grammarAccess.getLoopAccess().getRightParenthesisKeyword_0_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_0__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group_0__5__Impl
	rule__Loop__Group_0__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_0__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getLeftCurlyBracketKeyword_0_5()); }
	'{'
	{ after(grammarAccess.getLoopAccess().getLeftCurlyBracketKeyword_0_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_0__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group_0__6__Impl
	rule__Loop__Group_0__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_0__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getStatementsAssignment_0_6()); }
	(rule__Loop__StatementsAssignment_0_6)*
	{ after(grammarAccess.getLoopAccess().getStatementsAssignment_0_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_0__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group_0__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_0__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getRightCurlyBracketKeyword_0_7()); }
	'}'
	{ after(grammarAccess.getLoopAccess().getRightCurlyBracketKeyword_0_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Loop__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group_1__0__Impl
	rule__Loop__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getRepeatKeyword_1_0()); }
	'repeat'
	{ after(grammarAccess.getLoopAccess().getRepeatKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group_1__1__Impl
	rule__Loop__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getLeftCurlyBracketKeyword_1_1()); }
	'{'
	{ after(grammarAccess.getLoopAccess().getLeftCurlyBracketKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group_1__2__Impl
	rule__Loop__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getStatementsAssignment_1_2()); }
	(rule__Loop__StatementsAssignment_1_2)*
	{ after(grammarAccess.getLoopAccess().getStatementsAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group_1__3__Impl
	rule__Loop__Group_1__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getRightCurlyBracketKeyword_1_3()); }
	'}'
	{ after(grammarAccess.getLoopAccess().getRightCurlyBracketKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_1__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group_1__4__Impl
	rule__Loop__Group_1__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_1__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getUntilKeyword_1_4()); }
	'until'
	{ after(grammarAccess.getLoopAccess().getUntilKeyword_1_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_1__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group_1__5__Impl
	rule__Loop__Group_1__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_1__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getLeftParenthesisKeyword_1_5()); }
	'('
	{ after(grammarAccess.getLoopAccess().getLeftParenthesisKeyword_1_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_1__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group_1__6__Impl
	rule__Loop__Group_1__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_1__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getExpressionAssignment_1_6()); }
	(rule__Loop__ExpressionAssignment_1_6)
	{ after(grammarAccess.getLoopAccess().getExpressionAssignment_1_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_1__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Loop__Group_1__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__Group_1__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopAccess().getRightParenthesisKeyword_1_7()); }
	')'
	{ after(grammarAccess.getLoopAccess().getRightParenthesisKeyword_1_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Transput__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transput__Group__0__Impl
	rule__Transput__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Transput__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransputAccess().getTransputAction_0()); }
	()
	{ after(grammarAccess.getTransputAccess().getTransputAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transput__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transput__Group__1__Impl
	rule__Transput__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Transput__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransputAccess().getInputKeyword_1()); }
	'input'
	{ after(grammarAccess.getTransputAccess().getInputKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transput__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transput__Group__2__Impl
	rule__Transput__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Transput__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransputAccess().getVarAssignment_2()); }
	(rule__Transput__VarAssignment_2)
	{ after(grammarAccess.getTransputAccess().getVarAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transput__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transput__Group__3__Impl
	rule__Transput__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Transput__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransputAccess().getOutputKeyword_3()); }
	'output'
	{ after(grammarAccess.getTransputAccess().getOutputKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transput__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Transput__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Transput__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTransputAccess().getExpressionAssignment_4()); }
	(rule__Transput__ExpressionAssignment_4)
	{ after(grammarAccess.getTransputAccess().getExpressionAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__BinaryOperator__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryOperator__Group__0__Impl
	rule__BinaryOperator__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperator__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryOperatorAccess().getBinaryOperatorAction_0()); }
	()
	{ after(grammarAccess.getBinaryOperatorAccess().getBinaryOperatorAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperator__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryOperator__Group__1__Impl
	rule__BinaryOperator__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperator__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryOperatorAccess().getLeftAssignment_1()); }
	(rule__BinaryOperator__LeftAssignment_1)
	{ after(grammarAccess.getBinaryOperatorAccess().getLeftAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperator__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryOperator__Group__2__Impl
	rule__BinaryOperator__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperator__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryOperatorAccess().getOperatorAssignment_2()); }
	(rule__BinaryOperator__OperatorAssignment_2)
	{ after(grammarAccess.getBinaryOperatorAccess().getOperatorAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperator__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__BinaryOperator__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperator__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBinaryOperatorAccess().getRightAssignment_3()); }
	(rule__BinaryOperator__RightAssignment_3)
	{ after(grammarAccess.getBinaryOperatorAccess().getRightAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Program__DeclarationsAssignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getDeclarationsDeclarationParserRuleCall_2_0_0()); }
		ruleDeclaration
		{ after(grammarAccess.getProgramAccess().getDeclarationsDeclarationParserRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__StatementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProgramAccess().getStatementsStatementParserRuleCall_3_0()); }
		ruleStatement
		{ after(grammarAccess.getProgramAccess().getStatementsStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__RefAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclarationAccess().getRefRefKeyword_1_0()); }
		(
			{ before(grammarAccess.getDeclarationAccess().getRefRefKeyword_1_0()); }
			'ref'
			{ after(grammarAccess.getDeclarationAccess().getRefRefKeyword_1_0()); }
		)
		{ after(grammarAccess.getDeclarationAccess().getRefRefKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__ModeAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclarationAccess().getModeModeEnumRuleCall_2_0()); }
		ruleMode
		{ after(grammarAccess.getDeclarationAccess().getModeModeEnumRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__IdentifiersAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclarationAccess().getIdentifiersIdentifierParserRuleCall_3_0()); }
		ruleIdentifier
		{ after(grammarAccess.getDeclarationAccess().getIdentifiersIdentifierParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__IdentifiersAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDeclarationAccess().getIdentifiersIdentifierParserRuleCall_4_1_0()); }
		ruleIdentifier
		{ after(grammarAccess.getDeclarationAccess().getIdentifiersIdentifierParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIdentifierAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getIdentifierAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Integer__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntegerAccess().getValueEIntParserRuleCall_1_0()); }
		ruleEInt
		{ after(grammarAccess.getIntegerAccess().getValueEIntParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Boolean__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanAccess().getValueEBooleanParserRuleCall_1_0()); }
		ruleEBoolean
		{ after(grammarAccess.getBooleanAccess().getValueEBooleanParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Double__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDoubleAccess().getValueEDoubleParserRuleCall_1_0()); }
		ruleEDouble
		{ after(grammarAccess.getDoubleAccess().getValueEDoubleParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__VarAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getVarIdentifierCrossReference_0_0()); }
		(
			{ before(grammarAccess.getAssignmentAccess().getVarIdentifierIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getAssignmentAccess().getVarIdentifierIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getAssignmentAccess().getVarIdentifierCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Assignment__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAssignmentAccess().getValueExpressionParserRuleCall_2_0()); }
		ruleExpression
		{ after(grammarAccess.getAssignmentAccess().getValueExpressionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__ExpressionAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalAccess().getExpressionExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getConditionalAccess().getExpressionExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__IfAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalAccess().getIfStatementParserRuleCall_6_0()); }
		ruleStatement
		{ after(grammarAccess.getConditionalAccess().getIfStatementParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Conditional__ElseAssignment_8_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalAccess().getElseStatementParserRuleCall_8_2_0()); }
		ruleStatement
		{ after(grammarAccess.getConditionalAccess().getElseStatementParserRuleCall_8_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__ExpressionAssignment_0_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopAccess().getExpressionExpressionParserRuleCall_0_3_0()); }
		ruleExpression
		{ after(grammarAccess.getLoopAccess().getExpressionExpressionParserRuleCall_0_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__StatementsAssignment_0_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopAccess().getStatementsStatementParserRuleCall_0_6_0()); }
		ruleStatement
		{ after(grammarAccess.getLoopAccess().getStatementsStatementParserRuleCall_0_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__StatementsAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopAccess().getStatementsStatementParserRuleCall_1_2_0()); }
		ruleStatement
		{ after(grammarAccess.getLoopAccess().getStatementsStatementParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Loop__ExpressionAssignment_1_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopAccess().getExpressionExpressionParserRuleCall_1_6_0()); }
		ruleExpression
		{ after(grammarAccess.getLoopAccess().getExpressionExpressionParserRuleCall_1_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transput__VarAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransputAccess().getVarIdentifierCrossReference_2_0()); }
		(
			{ before(grammarAccess.getTransputAccess().getVarIdentifierIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getTransputAccess().getVarIdentifierIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getTransputAccess().getVarIdentifierCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Transput__ExpressionAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTransputAccess().getExpressionExpressionParserRuleCall_4_0()); }
		ruleExpression
		{ after(grammarAccess.getTransputAccess().getExpressionExpressionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperator__LeftAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryOperatorAccess().getLeftPrimaryParserRuleCall_1_0()); }
		rulePrimary
		{ after(grammarAccess.getBinaryOperatorAccess().getLeftPrimaryParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperator__OperatorAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryOperatorAccess().getOperatorAlternatives_2_0()); }
		(rule__BinaryOperator__OperatorAlternatives_2_0)
		{ after(grammarAccess.getBinaryOperatorAccess().getOperatorAlternatives_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BinaryOperator__RightAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBinaryOperatorAccess().getRightExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getBinaryOperatorAccess().getRightExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
