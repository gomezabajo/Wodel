/**
 * generated by Xtext 2.13.0
 */
package wodeledu.dsls.generator;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.ObjectWriter;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.module.SimpleModule;
import com.google.common.collect.Iterables;
import edutest.AlternativeResponse;
import edutest.MatchPairs;
import edutest.MissingWords;
import edutest.MultiChoiceDiagram;
import edutest.MultiChoiceText;
import edutest.MutatorTests;
import edutest.Program;
import edutest.Test;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import java.util.Set;
import java.util.UUID;
import mutatorenvironment.MutatorEnvironment;
import org.eclipse.core.runtime.FileLocator;
import org.eclipse.core.runtime.Platform;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.emfjson.EMFJs;
import org.emfjson.jackson.JacksonOptions;
import org.osgi.framework.Bundle;
import wodel.utils.exceptions.ModelNotFoundException;
import wodel.utils.manager.ModelManager;

/**
 * @author Pablo Gomez-Abajo - eduTest code generator.
 * 
 * Generates the javascript and html code for the
 * test exercises application
 */
@SuppressWarnings("all")
public class EduTestPolyglotJsonGenerator extends EduTestSuperGenerator {
  private String fileName;

  private String pageName;

  private List<EObject> blocks;

  private List<EObject> mutators;

  private List<EPackage> metamodel;

  private List<EClass> roots;

  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    try {
      try {
        int i = 0;
        String _replaceAll = resource.getURI().lastSegment().replaceAll(".test", ".model");
        String xmiFileName = ((((this.projectPath + "/") + this.outputFolder) + "/") + _replaceAll);
        final Bundle bundle = Platform.getBundle("wodel.models");
        final URL fileURL = bundle.getEntry("/model/MutatorEnvironment.ecore");
        final String mutatorecore = FileLocator.resolve(fileURL).getFile();
        final List<EPackage> mutatorpackages = ModelManager.loadMetaModel(mutatorecore);
        final Resource mutatormodel = ModelManager.loadModel(mutatorpackages, xmiFileName);
        this.blocks = ModelManager.getObjectsOfType("Block", mutatormodel);
        this.mutators = ModelManager.getObjectsOfType("Mutator", mutatormodel);
        Iterable<Program> _filter = Iterables.<Program>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Program.class);
        for (final Program p : _filter) {
          {
            if ((i == 0)) {
              String _replaceAll_1 = resource.getURI().lastSegment().replaceAll(".test", "");
              String _plus = ("xml/" + _replaceAll_1);
              String _plus_1 = (_plus + ".json");
              this.fileName = _plus_1;
              String _replaceAll_2 = resource.getURI().lastSegment().replaceAll(".test", "");
              String _plus_2 = (_replaceAll_2 + ".json");
              this.pageName = _plus_2;
            } else {
              String _replaceAll_3 = resource.getURI().lastSegment().replaceAll(".test", "");
              String _plus_3 = ("xml/" + _replaceAll_3);
              String _plus_4 = (_plus_3 + Integer.valueOf(i));
              String _plus_5 = (_plus_4 + ".json");
              this.fileName = _plus_5;
              String _replaceAll_4 = resource.getURI().lastSegment().replaceAll(".test", "");
              String _plus_6 = (_replaceAll_4 + Integer.valueOf(i));
              String _plus_7 = (_plus_6 + ".json");
              this.pageName = _plus_7;
            }
            ArrayList<EPackage> _arrayList = new ArrayList<EPackage>();
            this.metamodel = _arrayList;
            this.metamodel.addAll(ModelManager.loadMetaModel(p.getMetamodel()));
            ArrayList<EClass> _arrayList_1 = new ArrayList<EClass>();
            this.roots = _arrayList_1;
            this.roots.addAll(ModelManager.getRootEClasses(this.metamodel));
            Map<String, Boolean> options = new LinkedHashMap<String, Boolean>();
            options.put(EMFJs.OPTION_USE_ID, Boolean.valueOf(false));
            options.put(EMFJs.OPTION_INDENT_OUTPUT, Boolean.valueOf(true));
            JacksonOptions.Builder builder = new JacksonOptions.Builder();
            JacksonOptions jacksonOptions = builder.build(options);
            SimpleModule module = new SimpleModule("PoLyGloT");
            ObjectMapper mapper = new ObjectMapper().registerModule(module).configure(SerializationFeature.INDENT_OUTPUT, true);
            JsonNode content = mapper.<JsonNode>valueToTree(this.compile(p, resource));
            ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter();
            OutputStream os = new FileOutputStream("./dump.bak");
            writer.writeValue(os, content);
            os.close();
            InputStream is = new FileInputStream("./dump.bak");
            Scanner scan = new Scanner(is);
            List<String> lines = new ArrayList<String>();
            while (scan.hasNextLine()) {
              lines.add(scan.nextLine());
            }
            String compiled = "";
            for (final String l : lines) {
              String _compiled = compiled;
              compiled = (_compiled + l);
            }
            compiled = compiled.replace("\\n", "\n").replace("\\r", "\r").replace("\\t", "\t").replace("\"\"", "\"").replace("\\\\", "/").replace("\\\"", "\"").replace("\\", "/");
            int _length = compiled.length();
            int _minus = (_length - 1);
            compiled = compiled.substring(1, _minus);
            fsa.generateFile(this.fileName, compiled);
            i++;
          }
        }
      } catch (final Throwable _t) {
        if (_t instanceof ModelNotFoundException) {
        } else {
          throw Exceptions.sneakyThrow(_t);
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  public CharSequence compile(final Program program, final Resource resource) {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("\t\t");
      String _xblockexpression = null;
      {
        this.buildOptions(program, resource, this.blocks, this.roots, program.getClass());
        _xblockexpression = "";
      }
      _builder.append(_xblockexpression, "\t\t");
      _builder.newLineIfNotEmpty();
      _builder.append("    \t");
      String statement = "";
      _builder.newLineIfNotEmpty();
      _builder.append("\"data\": {");
      _builder.newLine();
      _builder.append("\t\t");
      EObject main = null;
      _builder.newLineIfNotEmpty();
      {
        int _size = this.blocks.size();
        boolean _greaterThan = (_size > 0);
        if (_greaterThan) {
          _builder.append("\t\t");
          String _xblockexpression_1 = null;
          {
            main = this.blocks.get(0);
            _xblockexpression_1 = "";
          }
          _builder.append(_xblockexpression_1, "\t\t");
          _builder.newLineIfNotEmpty();
        } else {
          {
            int _size_1 = this.mutators.size();
            boolean _greaterThan_1 = (_size_1 > 0);
            if (_greaterThan_1) {
              _builder.append("\t\t");
              String _xblockexpression_2 = null;
              {
                main = this.mutators.get(0);
                _xblockexpression_2 = "";
              }
              _builder.append(_xblockexpression_2, "\t\t");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      _builder.append("\t\t");
      EObject _eContainer = main.eContainer();
      List<EPackage> packages = ModelManager.loadMetaModel(((MutatorEnvironment) _eContainer).getDefinition().getMetamodel());
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      String domain = packages.get(0).getNsURI().replace("http://", "");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      String _xblockexpression_3 = null;
      {
        domain = domain.substring(0, domain.lastIndexOf("/")).replace("/", "");
        _xblockexpression_3 = "";
      }
      _builder.append(_xblockexpression_3, "\t\t");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("    \t");
      int i = 0;
      _builder.newLineIfNotEmpty();
      {
        EList<MutatorTests> _exercises = program.getExercises();
        for(final MutatorTests exercise : _exercises) {
          {
            if ((exercise instanceof AlternativeResponse)) {
              _builder.append("       \t");
              EClass answersClass = null;
              _builder.newLineIfNotEmpty();
              _builder.append("       \t");
              EClass statementClass = null;
              _builder.newLineIfNotEmpty();
              {
                for(final EClass root : this.roots) {
                  {
                    EClass _answers = ((AlternativeResponse)exercise).getConfig().getAnswers();
                    boolean _tripleNotEquals = (_answers != null);
                    if (_tripleNotEquals) {
                      {
                        boolean _equals = ((AlternativeResponse)exercise).getConfig().getAnswers().getName().equals(root.getName());
                        if (_equals) {
                          String _xblockexpression_4 = null;
                          {
                            answersClass = root;
                            _xblockexpression_4 = "";
                          }
                          _builder.append(_xblockexpression_4);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                  {
                    EClass _statement = ((AlternativeResponse)exercise).getConfig().getStatement();
                    boolean _tripleNotEquals_1 = (_statement != null);
                    if (_tripleNotEquals_1) {
                      {
                        boolean _equals_1 = ((AlternativeResponse)exercise).getConfig().getStatement().getName().equals(root.getName());
                        if (_equals_1) {
                          String _xblockexpression_5 = null;
                          {
                            statementClass = root;
                            _xblockexpression_5 = "";
                          }
                          _builder.append(_xblockexpression_5);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              {
                if ((answersClass == null)) {
                  String _xblockexpression_6 = null;
                  {
                    int _size_2 = this.roots.size();
                    int _minus = (_size_2 - 1);
                    answersClass = this.roots.get(_minus);
                    _xblockexpression_6 = "";
                  }
                  _builder.append(_xblockexpression_6);
                  _builder.newLineIfNotEmpty();
                }
              }
              {
                if ((statementClass == null)) {
                  {
                    int _size_2 = this.roots.size();
                    boolean _greaterThan_2 = (_size_2 > 1);
                    if (_greaterThan_2) {
                      String _xblockexpression_7 = null;
                      {
                        statementClass = this.roots.get(1);
                        _xblockexpression_7 = "";
                      }
                      _builder.append(_xblockexpression_7);
                      _builder.newLineIfNotEmpty();
                    } else {
                      String _xblockexpression_8 = null;
                      {
                        statementClass = this.roots.get(0);
                        _xblockexpression_8 = "";
                      }
                      _builder.append(_xblockexpression_8);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              String solution = "";
              _builder.append(" ");
              _builder.newLineIfNotEmpty();
              {
                EList<Test> _tests = ((AlternativeResponse)exercise).getTests();
                for(final Test test : _tests) {
                  String _xblockexpression_9 = null;
                  {
                    String _xifexpression = null;
                    List<String> _get = this.diagrams.get(exercise).get(test).get(answersClass);
                    boolean _tripleNotEquals_2 = (_get != null);
                    if (_tripleNotEquals_2) {
                      String _xifexpression_1 = null;
                      int _size_3 = this.diagrams.get(exercise).get(test).get(answersClass).size();
                      boolean _greaterThan_3 = (_size_3 > 0);
                      if (_greaterThan_3) {
                        _xifexpression_1 = this.diagrams.get(exercise).get(test).get(answersClass).get(0);
                      }
                      _xifexpression = _xifexpression_1;
                    }
                    solution = _xifexpression;
                    _xblockexpression_9 = "";
                  }
                  _builder.append(_xblockexpression_9);
                  _builder.newLineIfNotEmpty();
                  List<String> answers = new ArrayList<String>();
                  _builder.newLineIfNotEmpty();
                  Set<String> answersSet = new LinkedHashSet<String>();
                  _builder.newLineIfNotEmpty();
                  {
                    if (((this.diagrams.get(exercise).get(test).get(answersClass) != null) && (this.diagrams.get(exercise).get(test).get(answersClass).size() > 0))) {
                      _builder.append("        ");
                      String _xblockexpression_10 = null;
                      {
                        answersSet.addAll(this.diagrams.get(exercise).get(test).get(answersClass));
                        _xblockexpression_10 = "";
                      }
                      _builder.append(_xblockexpression_10, "        ");
                      _builder.newLineIfNotEmpty();
                      _builder.append("        ");
                      String _xblockexpression_11 = null;
                      {
                        answers.addAll(answersSet);
                        _xblockexpression_11 = "";
                      }
                      _builder.append(_xblockexpression_11, "        ");
                      _builder.newLineIfNotEmpty();
                      _builder.append("        ");
                      String _xblockexpression_12 = null;
                      {
                        Collections.shuffle(answers);
                        _xblockexpression_12 = "";
                      }
                      _builder.append(_xblockexpression_12, "        ");
                      _builder.newLineIfNotEmpty();
                      {
                        int _size_3 = answers.size();
                        boolean _greaterThan_3 = (_size_3 > 0);
                        if (_greaterThan_3) {
                          String diagram = answers.get(0);
                          _builder.newLineIfNotEmpty();
                          String _replace = test.getSource().replace(".model", "");
                          String _plus = ((this.projectPath + "/src-gen/html/diagrams/") + _replace);
                          String _plus_1 = (_plus + "/");
                          String _plus_2 = (_plus_1 + diagram);
                          File file = new File(_plus_2);
                          _builder.newLineIfNotEmpty();
                          {
                            if ((file.isFile() && file.exists())) {
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          {
            if ((exercise instanceof MultiChoiceDiagram)) {
              _builder.append("    \t");
              List<String> answers_1 = new ArrayList<String>();
              _builder.newLineIfNotEmpty();
              _builder.append("        ");
              int min = Integer.MAX_VALUE;
              _builder.newLineIfNotEmpty();
              {
                EList<Test> _tests_1 = ((MultiChoiceDiagram)exercise).getTests();
                for(final Test test_1 : _tests_1) {
                  {
                    Set<EClass> _keySet = this.diagrams.get(exercise).get(test_1).keySet();
                    for(final EClass eclass : _keySet) {
                      int counter = this.diagrams.get(exercise).get(test_1).get(eclass).size();
                      _builder.newLineIfNotEmpty();
                      {
                        if ((min > counter)) {
                          String _xblockexpression_13 = null;
                          {
                            min = counter;
                            _xblockexpression_13 = "";
                          }
                          _builder.append(_xblockexpression_13);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              _builder.append("       \t");
              EClass answersClass_1 = null;
              _builder.newLineIfNotEmpty();
              _builder.append("       \t");
              EClass statementClass_1 = null;
              _builder.newLineIfNotEmpty();
              {
                for(final EClass root_1 : this.roots) {
                  {
                    EClass _answers_1 = ((MultiChoiceDiagram)exercise).getConfig().getAnswers();
                    boolean _tripleNotEquals_2 = (_answers_1 != null);
                    if (_tripleNotEquals_2) {
                      {
                        boolean _equals_2 = ((MultiChoiceDiagram)exercise).getConfig().getAnswers().getName().equals(root_1.getName());
                        if (_equals_2) {
                          String _xblockexpression_14 = null;
                          {
                            answersClass_1 = root_1;
                            _xblockexpression_14 = "";
                          }
                          _builder.append(_xblockexpression_14);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                  {
                    EClass _statement_1 = ((MultiChoiceDiagram)exercise).getConfig().getStatement();
                    boolean _tripleNotEquals_3 = (_statement_1 != null);
                    if (_tripleNotEquals_3) {
                      {
                        boolean _equals_3 = ((MultiChoiceDiagram)exercise).getConfig().getStatement().getName().equals(root_1.getName());
                        if (_equals_3) {
                          String _xblockexpression_15 = null;
                          {
                            statementClass_1 = root_1;
                            _xblockexpression_15 = "";
                          }
                          _builder.append(_xblockexpression_15);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              {
                if ((answersClass_1 == null)) {
                  String _xblockexpression_16 = null;
                  {
                    int _size_4 = this.roots.size();
                    int _minus = (_size_4 - 1);
                    answersClass_1 = this.roots.get(_minus);
                    _xblockexpression_16 = "";
                  }
                  _builder.append(_xblockexpression_16);
                  _builder.newLineIfNotEmpty();
                }
              }
              {
                if ((statementClass_1 == null)) {
                  {
                    int _size_4 = this.roots.size();
                    boolean _greaterThan_4 = (_size_4 > 1);
                    if (_greaterThan_4) {
                      String _xblockexpression_17 = null;
                      {
                        statementClass_1 = this.roots.get(1);
                        _xblockexpression_17 = "";
                      }
                      _builder.append(_xblockexpression_17);
                      _builder.newLineIfNotEmpty();
                    } else {
                      String _xblockexpression_18 = null;
                      {
                        statementClass_1 = this.roots.get(0);
                        _xblockexpression_18 = "";
                      }
                      _builder.append(_xblockexpression_18);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              String solution_1 = "";
              _builder.append(" ");
              _builder.newLineIfNotEmpty();
              {
                EList<Test> _tests_2 = ((MultiChoiceDiagram)exercise).getTests();
                for(final Test test_2 : _tests_2) {
                  String _xblockexpression_19 = null;
                  {
                    String _xifexpression = null;
                    List<String> _get = this.diagrams.get(exercise).get(test_2).get(statementClass_1);
                    boolean _tripleNotEquals_4 = (_get != null);
                    if (_tripleNotEquals_4) {
                      String _xifexpression_1 = null;
                      int _size_5 = this.diagrams.get(exercise).get(test_2).get(statementClass_1).size();
                      boolean _greaterThan_5 = (_size_5 > 0);
                      if (_greaterThan_5) {
                        _xifexpression_1 = this.diagrams.get(exercise).get(test_2).get(statementClass_1).get(0);
                      } else {
                        _xifexpression_1 = null;
                      }
                      _xifexpression = _xifexpression_1;
                    } else {
                      _xifexpression = null;
                    }
                    statement = _xifexpression;
                    _xblockexpression_19 = "";
                  }
                  _builder.append(_xblockexpression_19);
                  _builder.newLineIfNotEmpty();
                  String _xblockexpression_20 = null;
                  {
                    String _xifexpression = null;
                    List<String> _get = this.diagrams.get(exercise).get(test_2).get(answersClass_1);
                    boolean _tripleNotEquals_4 = (_get != null);
                    if (_tripleNotEquals_4) {
                      String _xifexpression_1 = null;
                      int _size_5 = this.diagrams.get(exercise).get(test_2).get(answersClass_1).size();
                      boolean _greaterThan_5 = (_size_5 > 0);
                      if (_greaterThan_5) {
                        _xifexpression_1 = this.diagrams.get(exercise).get(test_2).get(answersClass_1).get(0);
                      }
                      _xifexpression = _xifexpression_1;
                    }
                    solution_1 = _xifexpression;
                    _xblockexpression_20 = "";
                  }
                  _builder.append(_xblockexpression_20);
                  _builder.newLineIfNotEmpty();
                  String _xblockexpression_21 = null;
                  {
                    ArrayList<String> _arrayList = new ArrayList<String>();
                    answers_1 = _arrayList;
                    _xblockexpression_21 = "";
                  }
                  _builder.append(_xblockexpression_21);
                  _builder.newLineIfNotEmpty();
                  Set<String> answersSet_1 = new LinkedHashSet<String>();
                  _builder.newLineIfNotEmpty();
                  {
                    if (((this.diagrams.get(exercise).get(test_2).get(answersClass_1) != null) && (this.diagrams.get(exercise).get(test_2).get(answersClass_1).size() > 0))) {
                      String _xblockexpression_22 = null;
                      {
                        answersSet_1.addAll(this.diagrams.get(exercise).get(test_2).get(answersClass_1));
                        _xblockexpression_22 = "";
                      }
                      _builder.append(_xblockexpression_22);
                      _builder.newLineIfNotEmpty();
                      String _xblockexpression_23 = null;
                      {
                        answers_1.addAll(answersSet_1);
                        _xblockexpression_23 = "";
                      }
                      _builder.append(_xblockexpression_23);
                      _builder.newLineIfNotEmpty();
                      String _xblockexpression_24 = null;
                      {
                        Collections.shuffle(answers_1);
                        _xblockexpression_24 = "";
                      }
                      _builder.append(_xblockexpression_24);
                      _builder.newLineIfNotEmpty();
                      _builder.append("   ");
                      String _replace_1 = test_2.getSource().replace(".model", "");
                      String _plus_3 = ((this.projectPath + "/src-gen/html/diagrams/") + _replace_1);
                      String _plus_4 = (_plus_3 + "/");
                      String _plus_5 = (_plus_4 + statement);
                      File file_1 = new File(_plus_5);
                      _builder.newLineIfNotEmpty();
                      {
                        if ((file_1.isFile() && file_1.exists())) {
                          UUID uuid = UUID.randomUUID();
                          _builder.newLineIfNotEmpty();
                          int nNodes = 0;
                          _builder.newLineIfNotEmpty();
                          {
                            int _size_5 = answers_1.size();
                            boolean _greaterThan_5 = (_size_5 > 0);
                            if (_greaterThan_5) {
                              _builder.append(" ");
                              _builder.append("\"choices\": [");
                              _builder.newLine();
                              _builder.append("          ");
                              int counter_1 = 0;
                              _builder.newLineIfNotEmpty();
                              _builder.append("          ");
                              int solutions = 1;
                              _builder.newLineIfNotEmpty();
                              _builder.append("          ");
                              double fraction = (100.0 / solutions);
                              _builder.newLineIfNotEmpty();
                              _builder.append("          ");
                              String _xblockexpression_25 = null;
                              {
                                counter_1 = 0;
                                _xblockexpression_25 = "";
                              }
                              _builder.append(_xblockexpression_25, "          ");
                              _builder.newLineIfNotEmpty();
                              {
                                for(final String diagram_1 : answers_1) {
                                  _builder.append("          ");
                                  String _xblockexpression_26 = null;
                                  {
                                    String _replace_2 = test_2.getSource().replace(".model", "");
                                    String _plus_6 = ((this.projectPath + "/src-gen/html/diagrams/") + _replace_2);
                                    String _plus_7 = (_plus_6 + "/");
                                    String _plus_8 = (_plus_7 + diagram_1);
                                    File _file = new File(_plus_8);
                                    file_1 = _file;
                                    _xblockexpression_26 = "";
                                  }
                                  _builder.append(_xblockexpression_26, "          ");
                                  _builder.newLineIfNotEmpty();
                                  {
                                    if ((file_1.isFile() && file_1.exists())) {
                                      String _xblockexpression_27 = null;
                                      {
                                        uuid = UUID.randomUUID();
                                        _xblockexpression_27 = "";
                                      }
                                      _builder.append(_xblockexpression_27);
                                      _builder.newLineIfNotEmpty();
                                      {
                                        if (((diagram_1.startsWith(answersClass_1.getName()) || diagram_1.contains(("/" + answersClass_1.getName()))) || diagram_1.contains(("\\" + answersClass_1.getName())))) {
                                          boolean s = false;
                                          _builder.newLineIfNotEmpty();
                                          {
                                            List<String> _get = this.solutionsMap.get(exercise);
                                            for(final String sol : _get) {
                                              {
                                                if ((((diagram_1.startsWith((sol + "/")) || diagram_1.startsWith((sol + "\\"))) || diagram_1.contains((((sol + "/") + answersClass_1.getName()) + "_"))) || diagram_1.contains((((sol + "\\") + answersClass_1.getName()) + "_")))) {
                                                  String _xblockexpression_28 = null;
                                                  {
                                                    s = true;
                                                    _xblockexpression_28 = "";
                                                  }
                                                  _builder.append(_xblockexpression_28);
                                                  _builder.newLineIfNotEmpty();
                                                }
                                              }
                                            }
                                          }
                                          {
                                            if ((s == true)) {
                                              {
                                                if ((counter_1 < (min - 1))) {
                                                  String _xblockexpression_29 = null;
                                                  {
                                                    counter_1++;
                                                    _xblockexpression_29 = "";
                                                  }
                                                  _builder.append(_xblockexpression_29);
                                                  _builder.newLineIfNotEmpty();
                                                  String _xblockexpression_30 = null;
                                                  {
                                                    solutions++;
                                                    _xblockexpression_30 = "";
                                                  }
                                                  _builder.append(_xblockexpression_30);
                                                  _builder.newLineIfNotEmpty();
                                                }
                                              }
                                            }
                                          }
                                          {
                                            if ((s || diagram_1.equals(solution_1))) {
                                              _builder.append("\"");
                                              String _replace_2 = test_2.getSource().replace(".model", "");
                                              String _plus_6 = ((this.projectPath + "/src-gen/html/diagrams/") + _replace_2);
                                              String _plus_7 = (_plus_6 + "/");
                                              String _plus_8 = (_plus_7 + diagram_1);
                                              _builder.append(_plus_8);
                                              _builder.append("\", ");
                                              _builder.newLineIfNotEmpty();
                                            } else {
                                              _builder.append("\"");
                                              String _replace_3 = test_2.getSource().replace(".model", "");
                                              String _plus_9 = ((this.projectPath + "/src-gen/html/diagrams/") + _replace_3);
                                              String _plus_10 = (_plus_9 + "/");
                                              String _plus_11 = (_plus_10 + diagram_1);
                                              _builder.append(_plus_11);
                                              _builder.append("\", ");
                                              _builder.newLineIfNotEmpty();
                                              {
                                                if ((counter_1 < (min - 1))) {
                                                  String _xblockexpression_31 = null;
                                                  {
                                                    counter_1++;
                                                    _xblockexpression_31 = "";
                                                  }
                                                  _builder.append(_xblockexpression_31);
                                                  _builder.newLineIfNotEmpty();
                                                  String _xblockexpression_32 = null;
                                                  {
                                                    s = false;
                                                    _xblockexpression_32 = "";
                                                  }
                                                  _builder.append(_xblockexpression_32);
                                                  _builder.newLineIfNotEmpty();
                                                  {
                                                    List<String> _get_1 = this.solutionsMap.get(exercise);
                                                    for(final String sol_1 : _get_1) {
                                                      {
                                                        if ((((diagram_1.startsWith((sol_1 + "/")) || diagram_1.startsWith((sol_1 + "\\"))) || diagram_1.contains((((sol_1 + "/") + answersClass_1.getName()) + "_"))) || diagram_1.contains((((sol_1 + "\\") + answersClass_1.getName()) + "_")))) {
                                                          String _xblockexpression_33 = null;
                                                          {
                                                            s = true;
                                                            _xblockexpression_33 = "";
                                                          }
                                                          _builder.append(_xblockexpression_33);
                                                          _builder.newLineIfNotEmpty();
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              _builder.append("],");
                              _builder.newLine();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
              {
                EList<Test> _tests_3 = ((MultiChoiceDiagram)exercise).getTests();
                for(final Test test_3 : _tests_3) {
                  UUID uuid_1 = UUID.randomUUID();
                  _builder.newLineIfNotEmpty();
                  int nNodes_1 = 0;
                  _builder.newLineIfNotEmpty();
                  _builder.append("         ");
                  String _replace_4 = test_3.getSource().replace(".model", "");
                  String _plus_12 = ((this.projectPath + "/src-gen/html/diagrams/") + _replace_4);
                  String _plus_13 = (_plus_12 + "/");
                  String _plus_14 = (_plus_13 + statement);
                  File file_2 = new File(_plus_14);
                  _builder.newLineIfNotEmpty();
                  {
                    if ((file_2.isFile() && file_2.exists())) {
                      {
                        int _size_6 = answers_1.size();
                        boolean _greaterThan_6 = (_size_6 > 0);
                        if (_greaterThan_6) {
                          _builder.append("\"isChoiceCorrect\" : [");
                          _builder.newLine();
                          {
                            for(final String diagram_2 : answers_1) {
                              _builder.append("          ");
                              String _xblockexpression_34 = null;
                              {
                                String _replace_5 = test_3.getSource().replace(".model", "");
                                String _plus_15 = ((this.projectPath + "/src-gen/html/diagrams/") + _replace_5);
                                String _plus_16 = (_plus_15 + "/");
                                String _plus_17 = (_plus_16 + diagram_2);
                                File _file = new File(_plus_17);
                                file_2 = _file;
                                _xblockexpression_34 = "";
                              }
                              _builder.append(_xblockexpression_34, "          ");
                              _builder.newLineIfNotEmpty();
                              {
                                if ((file_2.isFile() && file_2.exists())) {
                                  {
                                    if (((diagram_2.startsWith(answersClass_1.getName()) || diagram_2.contains(("/" + answersClass_1.getName()))) || diagram_2.contains(("\\" + answersClass_1.getName())))) {
                                      _builder.append("           ");
                                      boolean s_1 = false;
                                      _builder.newLineIfNotEmpty();
                                      {
                                        List<String> _get_2 = this.solutionsMap.get(exercise);
                                        for(final String sol_2 : _get_2) {
                                          {
                                            if ((((diagram_2.startsWith((sol_2 + "/")) || diagram_2.startsWith((sol_2 + "\\"))) || diagram_2.contains((((sol_2 + "/") + answersClass_1.getName()) + "_"))) || diagram_2.contains((((sol_2 + "\\") + answersClass_1.getName()) + "_")))) {
                                              _builder.append("           ");
                                              String _xblockexpression_35 = null;
                                              {
                                                s_1 = true;
                                                _xblockexpression_35 = "";
                                              }
                                              _builder.append(_xblockexpression_35, "           ");
                                              _builder.newLineIfNotEmpty();
                                            }
                                          }
                                        }
                                      }
                                      _builder.append("           ");
                                      int counter_2 = 0;
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("           ");
                                      int solutions_1 = 1;
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("           ");
                                      double fraction_1 = (100.0 / solutions_1);
                                      _builder.newLineIfNotEmpty();
                                      {
                                        if ((s_1 == true)) {
                                          {
                                            if ((counter_2 < (min - 1))) {
                                              _builder.append("           ");
                                              String _xblockexpression_36 = null;
                                              {
                                                counter_2++;
                                                _xblockexpression_36 = "";
                                              }
                                              _builder.append(_xblockexpression_36, "           ");
                                              _builder.newLineIfNotEmpty();
                                              _builder.append("           ");
                                              String _xblockexpression_37 = null;
                                              {
                                                solutions_1++;
                                                _xblockexpression_37 = "";
                                              }
                                              _builder.append(_xblockexpression_37, "           ");
                                              _builder.newLineIfNotEmpty();
                                            }
                                          }
                                        }
                                      }
                                      String _xblockexpression_38 = null;
                                      {
                                        String _xifexpression = null;
                                        List<String> _get_3 = this.diagrams.get(exercise).get(test_3).get(answersClass_1);
                                        boolean _tripleNotEquals_4 = (_get_3 != null);
                                        if (_tripleNotEquals_4) {
                                          String _xifexpression_1 = null;
                                          int _size_7 = this.diagrams.get(exercise).get(test_3).get(answersClass_1).size();
                                          boolean _greaterThan_7 = (_size_7 > 0);
                                          if (_greaterThan_7) {
                                            _xifexpression_1 = this.diagrams.get(exercise).get(test_3).get(answersClass_1).get(0);
                                          }
                                          _xifexpression = _xifexpression_1;
                                        }
                                        solution_1 = _xifexpression;
                                        _xblockexpression_38 = "";
                                      }
                                      _builder.append(_xblockexpression_38);
                                      _builder.newLineIfNotEmpty();
                                      {
                                        if ((s_1 || diagram_2.equals(solution_1))) {
                                          _builder.append("           ");
                                          _builder.append("\"true\", ");
                                          _builder.newLine();
                                        } else {
                                          _builder.append("           ");
                                          _builder.append("\"false\",");
                                          _builder.newLine();
                                        }
                                      }
                                      {
                                        if ((counter_2 < (min - 1))) {
                                          _builder.append("           ");
                                          String _xblockexpression_39 = null;
                                          {
                                            counter_2++;
                                            _xblockexpression_39 = "";
                                          }
                                          _builder.append(_xblockexpression_39, "           ");
                                          _builder.newLineIfNotEmpty();
                                          _builder.append("           ");
                                          String _xblockexpression_40 = null;
                                          {
                                            s_1 = false;
                                            _xblockexpression_40 = "";
                                          }
                                          _builder.append(_xblockexpression_40, "           ");
                                          _builder.newLineIfNotEmpty();
                                          {
                                            List<String> _get_3 = this.solutionsMap.get(exercise);
                                            for(final String sol_3 : _get_3) {
                                              {
                                                if ((((diagram_2.startsWith((sol_3 + "/")) || diagram_2.startsWith((sol_3 + "\\"))) || diagram_2.contains((((sol_3 + "/") + answersClass_1.getName()) + "_"))) || diagram_2.contains((((sol_3 + "\\") + answersClass_1.getName()) + "_")))) {
                                                  _builder.append("           ");
                                                  String _xblockexpression_41 = null;
                                                  {
                                                    s_1 = true;
                                                    _xblockexpression_41 = "";
                                                  }
                                                  _builder.append(_xblockexpression_41, "           ");
                                                  _builder.newLineIfNotEmpty();
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          _builder.append("        ");
                          _builder.append("], ");
                          _builder.newLine();
                        }
                      }
                    }
                  }
                  _builder.append("\"question\": [");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("\"Select which of the following object diagrams is a valid instance of the class diagram shown below:\",");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("\"");
                  String _replace_5 = test_3.getSource().replace(".model", "");
                  String _plus_15 = ((this.projectPath + "/src-gen/html/diagrams/") + _replace_5);
                  String _plus_16 = (_plus_15 + "/");
                  String _plus_17 = (_plus_16 + statement);
                  _builder.append(_plus_17, "\t");
                  _builder.append("\",");
                  _builder.newLineIfNotEmpty();
                  _builder.append("],");
                  _builder.newLine();
                }
              }
            }
          }
          {
            if ((exercise instanceof MatchPairs)) {
              _builder.append("        ");
              int min_1 = Integer.MAX_VALUE;
              _builder.newLineIfNotEmpty();
              _builder.append("        ");
              int index = 0;
              _builder.newLineIfNotEmpty();
              _builder.append("        ");
              int max = Integer.MIN_VALUE;
              _builder.newLineIfNotEmpty();
              {
                EList<Test> _tests_4 = ((MatchPairs)exercise).getTests();
                for(final Test test_4 : _tests_4) {
                  {
                    if (((this.options.get(exercise) != null) && (this.options.get(exercise).get(test_4) != null))) {
                      List<String> textOptions = new ArrayList<String>();
                      _builder.newLineIfNotEmpty();
                      int k = 0;
                      _builder.newLineIfNotEmpty();
                      int counter_3 = 0;
                      _builder.newLineIfNotEmpty();
                      int rndIndex = ModelManager.getRandomIndex(this.options.get(exercise).get(test_4));
                      _builder.newLineIfNotEmpty();
                      {
                        int _size_7 = this.options.get(exercise).get(test_4).size();
                        boolean _greaterThan_7 = (_size_7 > 0);
                        if (_greaterThan_7) {
                          {
                            List<EduTestSuperGenerator.TestOption> _get_4 = this.options.get(exercise).get(test_4).get(rndIndex);
                            for(final EduTestSuperGenerator.TestOption opt : _get_4) {
                              {
                                Set<String> _keySet_1 = opt.text.keySet();
                                for(final String key : _keySet_1) {
                                  {
                                    List<String> _get_5 = opt.text.get(key);
                                    for(final String text : _get_5) {
                                      {
                                        boolean _contains = textOptions.contains(text);
                                        boolean _not = (!_contains);
                                        if (_not) {
                                          String _xblockexpression_42 = null;
                                          {
                                            counter_3++;
                                            _xblockexpression_42 = "";
                                          }
                                          _builder.append(_xblockexpression_42);
                                          _builder.newLineIfNotEmpty();
                                          String _xblockexpression_43 = null;
                                          {
                                            textOptions.add(text);
                                            _xblockexpression_43 = "";
                                          }
                                          _builder.append(_xblockexpression_43);
                                          _builder.newLineIfNotEmpty();
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          {
                            if ((counter_3 > max)) {
                              String _xblockexpression_44 = null;
                              {
                                max = counter_3;
                                _xblockexpression_44 = "";
                              }
                              _builder.append(_xblockexpression_44);
                              _builder.newLineIfNotEmpty();
                              String _xblockexpression_45 = null;
                              {
                                index = k;
                                _xblockexpression_45 = "";
                              }
                              _builder.append(_xblockexpression_45);
                              _builder.newLineIfNotEmpty();
                            }
                          }
                          String _xblockexpression_46 = null;
                          {
                            k++;
                            _xblockexpression_46 = "";
                          }
                          _builder.append(_xblockexpression_46);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              _builder.append("        ");
              Map<Test, Map<EduTestSuperGenerator.TestOption, String>> mapPairOptions = new HashMap<Test, Map<EduTestSuperGenerator.TestOption, String>>();
              _builder.newLineIfNotEmpty();
              {
                EList<Test> _tests_5 = ((MatchPairs)exercise).getTests();
                for(final Test test_5 : _tests_5) {
                  {
                    if (((this.options.get(exercise) != null) && (this.options.get(exercise).get(test_5) != null))) {
                      int k_1 = 0;
                      _builder.newLineIfNotEmpty();
                      int counter_4 = 0;
                      _builder.newLineIfNotEmpty();
                      Map<EduTestSuperGenerator.TestOption, String> mapOptions = new HashMap<EduTestSuperGenerator.TestOption, String>();
                      _builder.newLineIfNotEmpty();
                      int rndIndex_1 = ModelManager.getRandomIndex(this.options.get(exercise).get(test_5));
                      _builder.newLineIfNotEmpty();
                      {
                        int _size_8 = this.options.get(exercise).get(test_5).size();
                        boolean _greaterThan_8 = (_size_8 > 0);
                        if (_greaterThan_8) {
                          {
                            List<EduTestSuperGenerator.TestOption> _get_6 = this.options.get(exercise).get(test_5).get(rndIndex_1);
                            for(final EduTestSuperGenerator.TestOption opt_1 : _get_6) {
                              List<String> textOptions_1 = new ArrayList<String>();
                              _builder.newLineIfNotEmpty();
                              {
                                Set<String> _keySet_2 = opt_1.text.keySet();
                                for(final String key_1 : _keySet_2) {
                                  String text_1 = opt_1.text.get(key_1).get(0);
                                  _builder.newLineIfNotEmpty();
                                  {
                                    boolean _contains_1 = textOptions_1.contains(text_1);
                                    boolean _not_1 = (!_contains_1);
                                    if (_not_1) {
                                      String _xblockexpression_47 = null;
                                      {
                                        counter_4++;
                                        _xblockexpression_47 = "";
                                      }
                                      _builder.append(_xblockexpression_47);
                                      _builder.newLineIfNotEmpty();
                                      String _xblockexpression_48 = null;
                                      {
                                        textOptions_1.add(text_1);
                                        _xblockexpression_48 = "";
                                      }
                                      _builder.append(_xblockexpression_48);
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                }
                              }
                              String pairOptions = "";
                              _builder.newLineIfNotEmpty();
                              {
                                for(final String textOption : textOptions_1) {
                                  String _xblockexpression_49 = null;
                                  {
                                    String _pairOptions = pairOptions;
                                    String _replace_6 = textOption.trim().replace("  ", " ").replace(" ", "+");
                                    String _plus_18 = (_replace_6 + ".<br>");
                                    pairOptions = (_pairOptions + _plus_18);
                                    _xblockexpression_49 = "";
                                  }
                                  _builder.append(_xblockexpression_49);
                                  _builder.newLineIfNotEmpty();
                                }
                              }
                              _builder.append(mapOptions.put(opt_1, pairOptions));
                              _builder.newLineIfNotEmpty();
                            }
                          }
                          _builder.append(mapPairOptions.put(test_5, mapOptions));
                          _builder.newLineIfNotEmpty();
                          {
                            if ((min_1 > counter_4)) {
                              String _xblockexpression_50 = null;
                              {
                                min_1 = counter_4;
                                _xblockexpression_50 = "";
                              }
                              _builder.append(_xblockexpression_50);
                              _builder.newLineIfNotEmpty();
                            }
                          }
                          String _xblockexpression_51 = null;
                          {
                            k_1++;
                            _xblockexpression_51 = "";
                          }
                          _builder.append(_xblockexpression_51);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              _builder.append("       \t");
              EClass answersClass_2 = null;
              _builder.newLineIfNotEmpty();
              _builder.append("       \t");
              EClass statementClass_2 = null;
              _builder.newLineIfNotEmpty();
              {
                for(final EClass root_2 : this.roots) {
                  {
                    EClass _answers_2 = ((MatchPairs)exercise).getConfig().getAnswers();
                    boolean _tripleNotEquals_4 = (_answers_2 != null);
                    if (_tripleNotEquals_4) {
                      {
                        boolean _equals_4 = ((MatchPairs)exercise).getConfig().getAnswers().getName().equals(root_2.getName());
                        if (_equals_4) {
                          String _xblockexpression_52 = null;
                          {
                            answersClass_2 = root_2;
                            _xblockexpression_52 = "";
                          }
                          _builder.append(_xblockexpression_52);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                  {
                    EClass _statement_2 = ((MatchPairs)exercise).getConfig().getStatement();
                    boolean _tripleNotEquals_5 = (_statement_2 != null);
                    if (_tripleNotEquals_5) {
                      {
                        boolean _equals_5 = ((MatchPairs)exercise).getConfig().getStatement().getName().equals(root_2.getName());
                        if (_equals_5) {
                          _builder.append("\t\t");
                          String _xblockexpression_53 = null;
                          {
                            statementClass_2 = root_2;
                            _xblockexpression_53 = "";
                          }
                          _builder.append(_xblockexpression_53, "\t\t");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              {
                if ((answersClass_2 == null)) {
                  _builder.append("\t\t");
                  String _xblockexpression_54 = null;
                  {
                    int _size_9 = this.roots.size();
                    int _minus = (_size_9 - 1);
                    answersClass_2 = this.roots.get(_minus);
                    _xblockexpression_54 = "";
                  }
                  _builder.append(_xblockexpression_54, "\t\t");
                  _builder.newLineIfNotEmpty();
                }
              }
              {
                if ((statementClass_2 == null)) {
                  {
                    int _size_9 = this.roots.size();
                    boolean _greaterThan_9 = (_size_9 > 1);
                    if (_greaterThan_9) {
                      _builder.append("\t\t");
                      String _xblockexpression_55 = null;
                      {
                        statementClass_2 = this.roots.get(1);
                        _xblockexpression_55 = "";
                      }
                      _builder.append(_xblockexpression_55, "\t\t");
                      _builder.newLineIfNotEmpty();
                    } else {
                      _builder.append("\t\t");
                      String _xblockexpression_56 = null;
                      {
                        statementClass_2 = this.roots.get(0);
                        _xblockexpression_56 = "";
                      }
                      _builder.append(_xblockexpression_56, "\t\t");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              _builder.append("        ");
              int k_2 = 0;
              _builder.newLineIfNotEmpty();
              {
                EList<Test> _tests_6 = ((MatchPairs)exercise).getTests();
                for(final Test test_6 : _tests_6) {
                  _builder.append("        ");
                  EduTestSuperGenerator.TestOption opt_2 = null;
                  _builder.newLineIfNotEmpty();
                  _builder.append("        ");
                  int rndIndex_2 = ModelManager.getRandomIndex(this.options.get(exercise).get(test_6));
                  _builder.newLineIfNotEmpty();
                  {
                    int _size_10 = this.options.get(exercise).get(test_6).size();
                    boolean _greaterThan_10 = (_size_10 > 0);
                    if (_greaterThan_10) {
                      {
                        if (((this.options.get(exercise).get(test_6) != null) && (this.options.get(exercise).get(test_6).get(rndIndex_2).size() > index))) {
                          _builder.append("        ");
                          String _xblockexpression_57 = null;
                          {
                            opt_2 = this.options.get(exercise).get(test_6).get(rndIndex_2).get(index);
                            _xblockexpression_57 = "";
                          }
                          _builder.append(_xblockexpression_57, "        ");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                      {
                        if ((opt_2 != null)) {
                          _builder.append("        ");
                          String seed = "";
                          _builder.newLineIfNotEmpty();
                          _builder.append("        ");
                          String _xblockexpression_58 = null;
                          {
                            seed = opt_2.path;
                            _xblockexpression_58 = "";
                          }
                          _builder.append(_xblockexpression_58, "        ");
                          _builder.newLineIfNotEmpty();
                          _builder.append("        ");
                          int _lastIndexOf = seed.lastIndexOf("/");
                          int _plus_18 = (_lastIndexOf + 1);
                          String _substring = seed.substring(0, _plus_18);
                          String _name = answersClass_2.getName();
                          String _plus_19 = (_substring + _name);
                          String _plus_20 = (_plus_19 + "_");
                          int _lastIndexOf_1 = seed.lastIndexOf("/");
                          int _plus_21 = (_lastIndexOf_1 + 1);
                          String _substring_1 = seed.substring(_plus_21, seed.length());
                          String _plus_22 = (_plus_20 + _substring_1);
                          _builder.append(seed = _plus_22, "        ");
                          _builder.newLineIfNotEmpty();
                          _builder.append("        ");
                          File file_3 = new File(((this.projectPath + "/src-gen/html/") + seed));
                          _builder.newLineIfNotEmpty();
                          {
                            if ((file_3.isFile() && file_3.exists())) {
                              _builder.append("        ");
                              String _xblockexpression_59 = null;
                              {
                                k_2++;
                                _xblockexpression_59 = "";
                              }
                              _builder.append(_xblockexpression_59, "        ");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          {
            if ((exercise instanceof MissingWords)) {
              {
                EList<Test> _tests_7 = ((MissingWords)exercise).getTests();
                for(final Test test_7 : _tests_7) {
                  {
                    for(final EClass root_3 : this.roots) {
                      {
                        EClass _answers_3 = ((MissingWords)exercise).getConfig().getAnswers();
                        boolean _tripleNotEquals_6 = (_answers_3 != null);
                        if (_tripleNotEquals_6) {
                          {
                            boolean _equals_6 = ((MissingWords)exercise).getConfig().getAnswers().getName().equals(root_3.getName());
                            if (_equals_6) {
                            }
                          }
                        }
                      }
                      {
                        EClass _statement_3 = ((MissingWords)exercise).getConfig().getStatement();
                        boolean _tripleNotEquals_7 = (_statement_3 != null);
                        if (_tripleNotEquals_7) {
                          {
                            boolean _equals_7 = ((MissingWords)exercise).getConfig().getStatement().getName().equals(root_3.getName());
                            if (_equals_7) {
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          {
            if ((exercise instanceof MultiChoiceText)) {
              _builder.append("        ");
              int min_2 = Integer.MAX_VALUE;
              _builder.newLineIfNotEmpty();
              {
                EList<Test> _tests_8 = ((MultiChoiceText)exercise).getTests();
                for(final Test test_8 : _tests_8) {
                  {
                    Set<EClass> _keySet_3 = this.diagrams.get(exercise).get(test_8).keySet();
                    for(final EClass eclass_1 : _keySet_3) {
                      int counter_5 = this.diagrams.get(exercise).get(test_8).get(eclass_1).size();
                      _builder.newLineIfNotEmpty();
                      {
                        if ((min_2 > counter_5)) {
                          String _xblockexpression_60 = null;
                          {
                            min_2 = counter_5;
                            _xblockexpression_60 = "";
                          }
                          _builder.append(_xblockexpression_60);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              _builder.append("       \t");
              EClass answersClass_3 = null;
              _builder.newLineIfNotEmpty();
              _builder.append("       \t");
              EClass statementClass_3 = null;
              _builder.newLineIfNotEmpty();
              {
                for(final EClass root_4 : this.roots) {
                  {
                    EClass _answers_4 = ((MultiChoiceText)exercise).getConfig().getAnswers();
                    boolean _tripleNotEquals_8 = (_answers_4 != null);
                    if (_tripleNotEquals_8) {
                      {
                        boolean _equals_8 = ((MultiChoiceText)exercise).getConfig().getAnswers().getName().equals(root_4.getName());
                        if (_equals_8) {
                          String _xblockexpression_61 = null;
                          {
                            answersClass_3 = root_4;
                            _xblockexpression_61 = "";
                          }
                          _builder.append(_xblockexpression_61);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                  {
                    EClass _statement_4 = ((MultiChoiceText)exercise).getConfig().getStatement();
                    boolean _tripleNotEquals_9 = (_statement_4 != null);
                    if (_tripleNotEquals_9) {
                      {
                        boolean _equals_9 = ((MultiChoiceText)exercise).getConfig().getStatement().getName().equals(root_4.getName());
                        if (_equals_9) {
                          String _xblockexpression_62 = null;
                          {
                            statementClass_3 = root_4;
                            _xblockexpression_62 = "";
                          }
                          _builder.append(_xblockexpression_62);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              {
                if ((answersClass_3 == null)) {
                  String _xblockexpression_63 = null;
                  {
                    int _size_11 = this.roots.size();
                    int _minus = (_size_11 - 1);
                    answersClass_3 = this.roots.get(_minus);
                    _xblockexpression_63 = "";
                  }
                  _builder.append(_xblockexpression_63);
                  _builder.newLineIfNotEmpty();
                }
              }
              {
                if ((statementClass_3 == null)) {
                  {
                    int _size_11 = this.roots.size();
                    boolean _greaterThan_11 = (_size_11 > 1);
                    if (_greaterThan_11) {
                      String _xblockexpression_64 = null;
                      {
                        statementClass_3 = this.roots.get(1);
                        _xblockexpression_64 = "";
                      }
                      _builder.append(_xblockexpression_64);
                      _builder.newLineIfNotEmpty();
                    } else {
                      String _xblockexpression_65 = null;
                      {
                        statementClass_3 = this.roots.get(0);
                        _xblockexpression_65 = "";
                      }
                      _builder.append(_xblockexpression_65);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              {
                EList<Test> _tests_9 = ((MultiChoiceText)exercise).getTests();
                for(final Test test_9 : _tests_9) {
                  String _xifexpression = null;
                  List<String> _get_7 = this.diagrams.get(exercise).get(test_9).get(statementClass_3);
                  boolean _tripleNotEquals_10 = (_get_7 != null);
                  if (_tripleNotEquals_10) {
                    String _xifexpression_1 = null;
                    int _size_12 = this.diagrams.get(exercise).get(test_9).get(statementClass_3).size();
                    boolean _greaterThan_12 = (_size_12 > 0);
                    if (_greaterThan_12) {
                      _xifexpression_1 = this.diagrams.get(exercise).get(test_9).get(statementClass_3).get(0);
                    } else {
                      _xifexpression_1 = null;
                    }
                    _xifexpression = _xifexpression_1;
                  } else {
                    _xifexpression = null;
                  }
                  String _statement_5 = statement = _xifexpression;
                  _builder.append(_statement_5);
                  _builder.newLineIfNotEmpty();
                  String _xifexpression_2 = null;
                  List<String> _get_8 = this.diagrams.get(exercise).get(test_9).get(answersClass_3);
                  boolean _tripleNotEquals_11 = (_get_8 != null);
                  if (_tripleNotEquals_11) {
                    String _xifexpression_3 = null;
                    int _size_13 = this.diagrams.get(exercise).get(test_9).get(answersClass_3).size();
                    boolean _greaterThan_13 = (_size_13 > 0);
                    if (_greaterThan_13) {
                      _xifexpression_3 = this.diagrams.get(exercise).get(test_9).get(answersClass_3).get(0);
                    }
                    _xifexpression_2 = _xifexpression_3;
                  }
                  String solution_2 = _xifexpression_2;
                  _builder.newLineIfNotEmpty();
                  List<String> answers_2 = new ArrayList<String>();
                  _builder.newLineIfNotEmpty();
                  Set<String> answersSet_2 = new LinkedHashSet<String>();
                  _builder.newLineIfNotEmpty();
                  {
                    if (((this.diagrams.get(exercise).get(test_9).get(answersClass_3) != null) && (this.diagrams.get(exercise).get(test_9).get(answersClass_3).size() > 0))) {
                      _builder.append("        ");
                      String _xblockexpression_66 = null;
                      {
                        answersSet_2.addAll(this.diagrams.get(exercise).get(test_9).get(answersClass_3));
                        _xblockexpression_66 = "";
                      }
                      _builder.append(_xblockexpression_66, "        ");
                      _builder.newLineIfNotEmpty();
                      _builder.append("        ");
                      String _xblockexpression_67 = null;
                      {
                        answers_2.addAll(answersSet_2);
                        _xblockexpression_67 = "";
                      }
                      _builder.append(_xblockexpression_67, "        ");
                      _builder.newLineIfNotEmpty();
                      _builder.append("        ");
                      String _xblockexpression_68 = null;
                      {
                        Collections.shuffle(answers_2);
                        _xblockexpression_68 = "";
                      }
                      _builder.append(_xblockexpression_68, "        ");
                      _builder.newLineIfNotEmpty();
                      _builder.append("        ");
                      String _replace_6 = test_9.getSource().replace(".model", "");
                      String _plus_23 = ((this.projectPath + "/src-gen/html/diagrams/") + _replace_6);
                      String _plus_24 = (_plus_23 + "/");
                      String diagram_3 = (_plus_24 + statement);
                      _builder.newLineIfNotEmpty();
                      {
                        int _length = diagram_3.length();
                        boolean _greaterThan_14 = (_length > 0);
                        if (_greaterThan_14) {
                          File file_4 = new File(diagram_3);
                          _builder.newLineIfNotEmpty();
                          {
                            if ((file_4.isFile() && file_4.exists())) {
                              String _xblockexpression_69 = null;
                              {
                                int _indexOf = diagram_3.indexOf("/src-gen/html/");
                                int _length_1 = "/src-gen/html/".length();
                                int _plus_25 = (_indexOf + _length_1);
                                diagram_3 = diagram_3.substring(_plus_25, diagram_3.length());
                                _xblockexpression_69 = "";
                              }
                              _builder.append(_xblockexpression_69);
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      _builder.append("  ");
      _builder.append("}");
      _builder.newLine();
      return _builder;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
