/**
 * generated by Xtext 2.13.0
 */
package wodeledu.dsls.generator;

import com.google.common.collect.Iterables;
import manager.JavaUtils;
import manager.ModelManager;
import manager.ProjectUtils;
import modeldraw.MutatorDraw;
import org.eclipse.core.resources.IProject;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * @author Pablo Gomez-Abajo - modelDraw code generator.
 * 
 * Generates the Java code for the graphical
 * representation of the models. Circuit mode.
 */
@SuppressWarnings("all")
public class ModelDrawCircuitGenerator extends AbstractGenerator {
  protected IProject project = null;
  
  private String fileName;
  
  private String className;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    ProjectUtils.resetProject();
    this.project = ProjectUtils.getProject();
    int i = 0;
    this.fileName = resource.getURI().lastSegment();
    String _replaceAll = this.fileName.replaceAll(".draw", "").replaceAll("[.]", "_");
    String _plus = (_replaceAll + ".draw");
    this.fileName = _plus;
    Iterable<MutatorDraw> _filter = Iterables.<MutatorDraw>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), MutatorDraw.class);
    for (final MutatorDraw e : _filter) {
      {
        if ((i == 0)) {
          String _replace = this.fileName.replace(".draw", "");
          String _plus_1 = (_replace + "Draw.java");
          this.fileName = _plus_1;
        } else {
          String _replace_1 = this.fileName.replace(".draw", "");
          String _plus_2 = (_replace_1 + Integer.valueOf(i));
          String _plus_3 = (_plus_2 + "Draw.java");
          this.fileName = _plus_3;
        }
        this.className = this.fileName.replaceAll("Draw.java", "");
        fsa.generateFile(((("mutator/" + this.className) + "/") + this.fileName), JavaUtils.format(this.compile(e), false));
        i++;
      }
    }
  }
  
  public CharSequence compile(final MutatorDraw draw) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    _builder.append("//");
    String _workspaceAbsolutePath = ModelManager.getWorkspaceAbsolutePath();
    String _plus = (_workspaceAbsolutePath + "/");
    String _name = this.project.getName();
    String folder = (_plus + _name);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package mutator.");
    String _name_1 = this.project.getName();
    _builder.append(_name_1);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.io.File;");
    _builder.newLine();
    _builder.append("import java.io.FileNotFoundException;");
    _builder.newLine();
    _builder.append("import java.io.PrintWriter;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.io.UnsupportedEncodingException;");
    _builder.newLine();
    _builder.append("import java.lang.InterruptedException;");
    _builder.newLine();
    _builder.append("import java.util.AbstractMap.SimpleEntry;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.Arrays;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EPackage;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.resource.Resource;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import exceptions.MetaModelNotFoundException;");
    _builder.newLine();
    _builder.append("import exceptions.ModelNotFoundException;");
    _builder.newLine();
    _builder.append("import manager.CircuitUtils;");
    _builder.newLine();
    _builder.append("import manager.CircuitUtils.LogicalCircuit;");
    _builder.newLine();
    _builder.append("import manager.CircuitUtils.LogicalNode;");
    _builder.newLine();
    _builder.append("import manager.CircuitUtils.LogicalInputPin;");
    _builder.newLine();
    _builder.append("import manager.CircuitUtils.LogicalOutputPin;");
    _builder.newLine();
    _builder.append("import manager.CircuitUtils.LogicalNOT;");
    _builder.newLine();
    _builder.append("import manager.CircuitUtils.LogicalAND;");
    _builder.newLine();
    _builder.append("import manager.CircuitUtils.LogicalOR;");
    _builder.newLine();
    _builder.append("import manager.ModelManager;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(this.className);
    _builder.append("Draw implements manager.IMutatorDraw {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static String generateCircuitMacrosSpecificacion(List<EPackage> packages, Resource model, String fileName) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String m4text = \"\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("m4text += \".PS\\n\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("m4text += \"# \" + fileName.replace(\".model\", \"\") + \".m4\\n\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("m4text += \"log_init\\n\\n\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("m4text += \"define(`del\',`L_unit*5/2\')\\n\\n\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("m4text += \"dmov = 0.4\\n\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("m4text += \"# Input labels\\n\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("m4text += \"C: grid_(0,0)\\n\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("m4text += \"DE: C+grid_(0,AND_ht*7/4)\\n\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LogicalCircuit lc = CircuitUtils.convertToLC(packages, model);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<LogicalInputPin> inputPins = lc.getInputPins();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Map<String, SimpleEntry<String, Integer>> relationsMap = new HashMap<String, SimpleEntry<String, Integer>>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int position = 0; ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (inputPins.size() > 0) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("m4text += \"A0: DE+grid_(0,BUF_ht*5/2); dot(at A0); \\\"\" + inputPins.get(0).getName() + \"\\\" rjust at A0\\n\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("relationsMap.put(inputPins.get(0).getName(), new SimpleEntry<String, Integer>(\"A0\", position)); ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int i = 1; i < inputPins.size(); i++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("m4text += \"A\" + i + \": A\" + (i - 1) + \"+grid_(0,BUF_ht*5/2); dot(at A\" + i + \"); \\\"\" + inputPins.get(i).getName() + \"\\\" rjust at A\" + i +\"\\n\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("relationsMap.put(inputPins.get(i).getName(), new SimpleEntry<String, Integer>(\"A\" + i, position)); ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("m4text += \"  move to (-0.2,0)   # Lettering within the global object\\n\\n\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<LogicalNode> nextNodes = new ArrayList<LogicalNode>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int i = 0; i < inputPins.size(); i++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LogicalNode nextNode = lc.getNodeWithInput(inputPins.get(i).getName());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (nextNode != null && !nextNodes.contains(nextNode)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("nextNodes.add(nextNode);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("inputPins.clear();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int i = 0; i < nextNodes.size(); i++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LogicalOutputPin outputPin = nextNodes.get(i).getOutputPin();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (outputPin != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("LogicalInputPin nextInputPin = outputPin.getTarget();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (nextInputPin != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (!inputPins.contains(nextInputPin)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("inputPins.add(nextInputPin);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("char alphabet = \'G\';");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int index = 0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int i = 0; i < nextNodes.size(); i++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("SimpleEntry<String, Integer> previousNode = relationsMap.get(nextNodes.get(i).getInputPins().get(0).getName());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (previousNode == null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("previousNode = relationsMap.get(nextNodes.get(i).getInputPins().get(1).getName());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String inputLabel = previousNode.getKey();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("position = previousNode.getValue() + 8;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String gateName = \"\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (nextNodes.get(i) instanceof LogicalNOT) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (!lc.getInputPins().containsAll(nextNodes.get(i).getInputPins())) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("position += 16;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("gateName = \"NOT\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (nextNodes.get(i) instanceof LogicalAND) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (!lc.getInputPins().containsAll(nextNodes.get(i).getInputPins())) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("position += 16;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("gateName = \"AND\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (nextNodes.get(i) instanceof LogicalOR) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (!lc.getInputPins().containsAll(nextNodes.get(i).getInputPins())) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("position += 16;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("gateName = \"OR\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("m4text += String.valueOf((char) (alphabet + index)) + (i + 1) + \": \" + gateName + \"_gate at (\" + inputLabel + \"+grid_(\" + position + \",BUF_ht*\" + position + \"),\" + inputLabel + \")\\n\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("relationsMap.put(nextNodes.get(i).getName(), new SimpleEntry<String, Integer>(String.valueOf((char) (alphabet + index)) + (i + 1), position)); ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("m4text += \"\\n\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int counter = 0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (int i = 0; i < nextNodes.size(); i++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("SimpleEntry<String, Integer> previousNode = relationsMap.get(nextNodes.get(i).getName());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String inputLabel = previousNode.getKey();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (nextNodes.get(i).getInputPins().size() == 1) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (nextNodes.get(i).getInputs().size() == 0) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("m4text += \"line right 3*del from A\" + counter + \" to \" + inputLabel + \".In1\\n\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("SimpleEntry<String, Integer> previousInputNode = relationsMap.get(nextNodes.get(i).getInputs().get(0).getName());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("String previousInputLabel = previousInputNode.getKey();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("m4text += \"line right 3*del from \" + previousInputLabel + \".Out to \"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("+ inputLabel + \".In1\\n\";");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (nextNodes.get(i).getInputPins().size() > 1) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (nextNodes.get(i).getInputs().size() == 0) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("m4text += \"line right 3*del from A\" + counter + \" to \" + inputLabel + \".In1\\n\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("m4text += \"line right 3*del from A\" + counter + \" to \" + inputLabel + \".In2\\n\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (nextNodes.get(i).getInputs().size() == 1) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("m4text += \"line right 3*del from A\" + counter + \" to \" + inputLabel + \".In1\\n\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("counter++;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("SimpleEntry<String, Integer> previousInputNode = relationsMap.get(nextNodes.get(i).getInputs().get(0).getName());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("String previousInputLabel = previousInputNode.getKey();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("m4text += \"line right 3*del from \" + previousInputLabel + \".Out to \"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("+ inputLabel + \".In2\\n\";");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (nextNodes.get(i).getInputs().size() == 2) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("SimpleEntry<String, Integer> previousInputNode = relationsMap.get(nextNodes.get(i).getInputs().get(0).getName());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("String previousInputLabel = previousInputNode.getKey();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("m4text += \"line right 3*del from \" + previousInputLabel + \".Out to \"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("+ inputLabel + \".In1\\n\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("previousInputNode = relationsMap.get(nextNodes.get(i).getInputs().get(1).getName());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("previousInputLabel = previousInputNode.getKey();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("m4text += \"line right 3*del from \" + previousInputLabel + \".Out to \"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("+ inputLabel + \".In2\\n\";");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("m4text += \"\\n\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LogicalNode outputNode = lc.getOutputNode();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while (outputNode != null && !nextNodes.contains(outputNode) && index < lc.getDistance()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("index++;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("nextNodes.clear(); ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (int i = 0; i < inputPins.size(); i++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("LogicalNode nextNode = lc.getNodeWithInput(inputPins.get(i).getName());");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (nextNode != null && !nextNodes.contains(nextNode)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (nextNode.getInputPins().size() == 1 && !lc.getInputPins().contains(nextNode.getInputPins().get(0))) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("nextNodes.add(nextNode);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (nextNode.getInputPins().size() > 1 && !lc.getInputPins().contains(nextNode.getInputPins().get(0)) && !lc.getInputPins().contains(nextNode.getInputPins().get(1))) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("nextNodes.add(nextNode);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("inputPins.clear();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (int i = 0; i < nextNodes.size(); i++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("LogicalOutputPin outputPin = nextNodes.get(i).getOutputPin();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (outputPin != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("LogicalInputPin nextInputPin = outputPin.getTarget();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (nextInputPin != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if (!inputPins.contains(nextInputPin)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("inputPins.add(nextInputPin);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (int i = 0; i < nextNodes.size(); i++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("SimpleEntry<String, Integer> previousNode = relationsMap.get(nextNodes.get(i).getInputs().get(0).getName());");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (previousNode == null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("previousNode = relationsMap.get(nextNodes.get(i).getInputs().get(1).getName());");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String inputLabel = previousNode.getKey();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("position = previousNode.getValue() + 16;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String gateName = \"\";");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (nextNodes.get(i) instanceof LogicalNOT) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("gateName = \"NOT\";");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (nextNodes.get(i) instanceof LogicalAND) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("gateName = \"AND\";");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (nextNodes.get(i) instanceof LogicalOR) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("gateName = \"OR\";");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("m4text += String.valueOf((char) (alphabet + index)) + (i + 1) + \": \" + gateName + \"_gate at (\" + inputLabel + \"+grid_(\" + position + \",BUF_ht*\" + position + \"),\" + inputLabel + \"+grid_(0,BUF_ht*15/13))\\n\";");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("relationsMap.put(nextNodes.get(i).getName(), new SimpleEntry<String, Integer>(String.valueOf((char) (alphabet + index)) + (i + 1), position)); ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("m4text += \"\\n\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} ");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (int i = 0; i < nextNodes.size(); i++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (nextNodes.get(i).getInputs().size() == 1) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("SimpleEntry<String, Integer> previousNode = relationsMap.get(nextNodes.get(i).getInputs().get(0).getName());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("String inputLabel = previousNode.getKey();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("m4text += \"line right 3*del from \" + inputLabel + \".Out to \" + String.valueOf((char) (alphabet + index)) + (i + 1) + \".In1\\n\";");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (nextNodes.get(i).getInputs().size() > 1) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("SimpleEntry<String, Integer> previousNode = relationsMap.get(nextNodes.get(i).getInputs().get(0).getName());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (previousNode != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("String inputLabel = previousNode.getKey();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("m4text += \"line right 3*del from \" + inputLabel + \".Out to \" + String.valueOf((char) (alphabet + index)) + (i + 1) + \".In2\\n\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("previousNode = relationsMap.get(nextNodes.get(i).getInputs().get(1).getName());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (previousNode != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("String inputLabel = previousNode.getKey();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("m4text += \"line right 3*del from \" + inputLabel + \".Out to \" + String.valueOf((char) (alphabet + index)) + (i + 1) + \".In1\\n\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("m4text += \"\\n\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (outputNode != null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("SimpleEntry<String, Integer> previousNode = relationsMap.get(outputNode.getName());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (previousNode != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String inputLabel = previousNode.getKey();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("m4text += \"LOUT: line right del from \" + inputLabel + \".Out; dot at (LOUT,Here); move right 0.2; \\\"\" + outputNode.getOutputPin().getName() + \"\\\" rjust\\n\\n\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("m4text += \".PE\\n\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return m4text;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("} ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static void generateGraphs(File file, String folder, List<EPackage> packages, File exercise) throws ModelNotFoundException, FileNotFoundException, UnsupportedEncodingException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (file.isFile()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String pathfile = file.getPath();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (pathfile.endsWith(\".model\") == true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("Resource model = ModelManager.loadModel(packages, pathfile);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String m4text = generateCircuitMacrosSpecificacion(packages, model, file.getName());");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String path = exercise.getName() + \"/\";");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("List<String> folders = Arrays.asList(folder.split(\"/\"));");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (folders.size() > 0) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("for (String folderName : folders) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("path += folderName + \"/\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String m4file = \"");
    _builder.append(folder, "\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("path + file.getName().replace(\".model\", \".m4\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String batfile = \"");
    _builder.append(folder, "\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("path + file.getName().replace(\".model\", \".bat\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String svgfile = \"");
    _builder.append(folder, "\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("path + file.getName().replace(\".model\", \".svg\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String pngfile = \"");
    _builder.append(folder, "\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("path + file.getName().replace(\".model\", \".png\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("File diagramsfolder = new File(\"");
    _builder.append(folder, "\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("if (diagramsfolder.exists() != true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("diagramsfolder.mkdir();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("File exercisefolder = new File(\"");
    _builder.append(folder, "\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + exercise.getName() + \"/\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("if (exercisefolder.exists() != true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("exercisefolder.mkdir();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("path = exercise.getName() + \"/\";");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("folders = Arrays.asList(folder.split(\"/\"));");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (folders.size() > 0) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("for (String folderName : folders) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("path += folderName + \"/\";");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("exercisefolder = new File(\"");
    _builder.append(folder, "\t\t\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + path);");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if (exercisefolder.exists() != true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("exercisefolder.mkdir();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("PrintWriter m4writer = null;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("m4writer = new PrintWriter(m4file, \"UTF-8\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("String[] m4lines = m4text.split(\"\\n\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("for (int i = 0; i < m4lines.length - 1; i++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("m4writer.println(m4lines[i]);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("m4writer.print(m4lines[m4lines.length - 1]);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("m4writer.close();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} catch (UnsupportedEncodingException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("//Reload input");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("model.unload();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("model.load(null);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("} catch (Exception ex) {}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("PrintWriter batwriter = null;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("batwriter = new PrintWriter(batfile, \"UTF-8\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("batwriter.println(\"d:\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("batwriter.println(\"cd dpic\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("batwriter.println(\"m4 liblog.m4 \" + m4file + \" | dpic -v > \" + svgfile);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("batwriter.println(\"cd batik\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("batwriter.println(\"java -Djava.awt.headless=true -jar batik-rasterizer.jar -m image/png -d \" + pngfile + \" \" +  svgfile + \" 2>&1\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("batwriter.println(\"exit\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("batwriter.close();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} catch (UnsupportedEncodingException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("//Reload input");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("model.unload();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("model.load(null);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("} catch (Exception ex) {}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("return;");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String[] command = {\"cmd\", \"/c\", batfile};");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("Process proc = Runtime.getRuntime().exec(command);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("proc.waitFor(); ");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} catch (IOException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} catch (InterruptedException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("//SVGUtils.convert2PNG(svgfile);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("//Reload input");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("model.unload();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("model.load(null);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} catch (Exception e) {}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (file.getName().equals(\"registry\") != true && !file.getName().endsWith(\"vs\")) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("File[] filesBlock = file.listFiles();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("for (File fileBlock : filesBlock) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("generateGraphs(fileBlock, folder + \"/\" + file.getName(), packages, exercise);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void generate() throws MetaModelNotFoundException, ModelNotFoundException, FileNotFoundException {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String metamodel = \"");
    String _replace = ModelManager.getMetaModel().replace("\\", "/");
    _builder.append(_replace, "\t\t");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("List<EPackage> packages = ModelManager.loadMetaModel(metamodel);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// GENERATES svg FILES FROM SOURCE MODELS");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("File folder = new File(\"");
    _builder.append(folder, "\t\t");
    _builder.append("/data/model\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("for (File file : folder.listFiles()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (file.isFile()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("String pathfile = file.getPath();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (pathfile.endsWith(\".model\") == true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("Resource model = ModelManager.loadModel(packages, pathfile);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("String m4text = generateCircuitMacrosSpecificacion(packages, model, file.getName());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("String m4file = \"");
    _builder.append(folder, "\t\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + file.getName().replace(\".model\", \"\") + \"/\" +");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("file.getName().replace(\".model\", \".m4\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("String batfile = \"");
    _builder.append(folder, "\t\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + file.getName().replace(\".model\", \"\") + \"/\" +");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("file.getName().replace(\".model\", \".bat\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("String svgfile = \"");
    _builder.append(folder, "\t\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + file.getName().replace(\".model\", \"\") + \"/\" +");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("file.getName().replace(\".model\", \".svg\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("String pngfile = \"");
    _builder.append(folder, "\t\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + file.getName().replace(\".model\", \"\") + \"/\" +");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("file.getName().replace(\".model\", \".png\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("File diagramsfolder = new File(\"");
    _builder.append(folder, "\t\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (diagramsfolder.exists() != true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("diagramsfolder.mkdir();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("File m4folder = new File(\"");
    _builder.append(folder, "\t\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("file.getName().replace(\".model\", \"\") + \"/\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (m4folder.exists() != true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("m4folder.mkdir();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("PrintWriter m4writer = null;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("m4writer = new PrintWriter(m4file, \"UTF-8\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("String[] m4lines = m4text.split(\"\\n\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("for (int i = 0; i < m4lines.length - 1; i++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("m4writer.println(m4lines[i]);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("m4writer.print(m4lines[m4lines.length - 1]);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("m4writer.close();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("} catch (UnsupportedEncodingException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("//Reload input");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("model.unload();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("model.load(null);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("} catch (Exception ex) {}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("continue;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("PrintWriter batwriter = null;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("batwriter = new PrintWriter(batfile, \"UTF-8\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("batwriter.println(\"d:\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("batwriter.println(\"cd dpic\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("batwriter.println(\"m4 liblog.m4 \" + m4file + \" | dpic -v > \" + svgfile);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("batwriter.println(\"cd batik\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("batwriter.println(\"java -Djava.awt.headless=true -jar batik-rasterizer.jar -m image/png -d \" + pngfile + \" \" +  svgfile + \" 2>&1\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("batwriter.println(\"exit\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("batwriter.close();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("} catch (UnsupportedEncodingException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("//Reload input");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("model.unload();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("model.load(null);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("} catch (Exception ex) {}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("continue;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("String[] command = {\"cmd\", \"/c\", batfile};");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("Process proc = Runtime.getRuntime().exec(command);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("proc.waitFor(); ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("} catch (IOException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("} catch (InterruptedException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("//SVGUtils.convert2PNG(svgfile);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("//Reload input");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("model.unload();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("model.load(null);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("} catch (Exception e) {}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// GENERATES svg FILES FROM MUTANTS");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("folder = new File(\"");
    _builder.append(folder, "\t\t");
    _builder.append("/data/out\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("for (File exercise : folder.listFiles()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (exercise.isDirectory()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("for (File file : exercise.listFiles()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (file.isFile()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("String pathfile = file.getPath();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if (pathfile.endsWith(\".model\") == true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("Resource model = ModelManager.loadModel(packages, pathfile);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("String m4text = generateCircuitMacrosSpecificacion(packages, model, file.getName());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("String m4file = \"");
    _builder.append(folder, "\t\t\t\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + exercise.getName() + \"/\" +");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("file.getName().replace(\".model\", \".m4\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("String batfile = \"");
    _builder.append(folder, "\t\t\t\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + exercise.getName() + \"/\" +");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("file.getName().replace(\".model\", \".bat\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("String svgfile = \"");
    _builder.append(folder, "\t\t\t\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + exercise.getName() + \"/\" +");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("file.getName().replace(\".model\", \".svg\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("String pngfile = \"");
    _builder.append(folder, "\t\t\t\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + exercise.getName() + \"/\" +");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("file.getName().replace(\".model\", \".png\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("File diagramsfolder = new File(\"");
    _builder.append(folder, "\t\t\t\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("if (diagramsfolder.exists() != true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("diagramsfolder.mkdir();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("File m4folder = new File(\"");
    _builder.append(folder, "\t\t\t\t\t\t\t");
    _builder.append("/src-gen/html/diagrams/\" + exercise.getName() + \"/\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("if (m4folder.exists() != true) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("m4folder.mkdir();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("PrintWriter m4writer = null;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("m4writer = new PrintWriter(m4file, \"UTF-8\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("String[] m4lines = m4text.split(\"\\n\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("for (int i = 0; i < m4lines.length - 1; i++) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("m4writer.println(m4lines[i]);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("m4writer.print(m4lines[m4lines.length - 1]);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("m4writer.close();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("} catch (UnsupportedEncodingException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("//Reload input");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("model.unload();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("model.load(null);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("} catch (Exception ex) {}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("continue;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("PrintWriter batwriter = null;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("batwriter = new PrintWriter(batfile, \"UTF-8\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("batwriter.println(\"d:\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("batwriter.println(\"cd dpic\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("batwriter.println(\"m4 liblog.m4 \" + m4file + \" | dpic -v > \" + svgfile);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("batwriter.println(\"cd batik\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("batwriter.println(\"java -Djava.awt.headless=true -jar batik-rasterizer.jar -m image/png -d \" + pngfile + \" \" +  svgfile + \" 2>&1\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("batwriter.println(\"exit\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("batwriter.close();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("} catch (UnsupportedEncodingException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("//Reload input");
    _builder.newLine();
    _builder.append("   \t\t\t\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("model.unload();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("model.load(null);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("} catch (Exception ex) {}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("continue;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("String command = \"cmd.exe /c start \" + batfile;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("Process proc = Runtime.getRuntime().exec(command);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("proc.waitFor(); ");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("} catch (IOException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("} catch (InterruptedException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("// TODO Auto-generated catch block");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("//SVGUtils.convert2PNG(svgfile);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("//Reload input");
    _builder.newLine();
    _builder.append("    \t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("model.unload();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("model.load(null);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("} catch (Exception e) {}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if (file.getName().equals(\"registry\") != true && !file.getName().endsWith(\"vs\")) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("File[] filesBlock = file.listFiles();");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("for (File fileBlock : filesBlock) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("generateGraphs(fileBlock, file.getName(), packages, exercise);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("} catch (UnsupportedEncodingException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t\t");
    _builder.append("continue;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
}
