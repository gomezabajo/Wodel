/**
 * generated by Xtext 2.13.0
 */
package wodeledu.dsls.generator;

import com.google.common.collect.Iterables;
import edutest.AlternativeResponse;
import edutest.MatchPairs;
import edutest.MissingWords;
import edutest.MultiChoiceDiagram;
import edutest.MultiChoiceEmendation;
import edutest.MultiChoiceText;
import edutest.MutatorTests;
import edutest.Program;
import edutest.Test;
import java.io.File;
import java.net.URL;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.UUID;
import mutatorenvironment.MutatorEnvironment;
import org.eclipse.core.runtime.FileLocator;
import org.eclipse.core.runtime.Platform;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.osgi.framework.Bundle;
import wodel.utils.exceptions.ModelNotFoundException;
import wodel.utils.manager.ModelManager;

/**
 * @author Pablo Gomez-Abajo - eduTest code generator.
 * 
 * Generates the javascript and html code for the
 * test exercises application
 */
@SuppressWarnings("all")
public class EduTestHotPotatoesGenerator extends EduTestSuperGenerator {
  private String fileName;

  private String pageName;

  private List<EObject> blocks;

  private List<EObject> mutators;

  private List<EPackage> metamodel;

  private List<EClass> roots;

  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    try {
      try {
        int i = 0;
        String _replaceAll = resource.getURI().lastSegment().replaceAll(".test", ".model");
        String xmiFileName = ((((this.projectPath + "/") + this.outputFolder) + "/") + _replaceAll);
        final Bundle bundle = Platform.getBundle("wodel.models");
        final URL fileURL = bundle.getEntry("/model/MutatorEnvironment.ecore");
        final String mutatorecore = FileLocator.resolve(fileURL).getFile();
        final List<EPackage> mutatorpackages = ModelManager.loadMetaModel(mutatorecore);
        final Resource mutatormodel = ModelManager.loadModel(mutatorpackages, xmiFileName);
        this.blocks = ModelManager.getObjectsOfType("Block", mutatormodel);
        this.mutators = ModelManager.getObjectsOfType("Mutator", mutatormodel);
        Iterable<Program> _filter = Iterables.<Program>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Program.class);
        for (final Program p : _filter) {
          {
            if ((i == 0)) {
              String _replaceAll_1 = resource.getURI().lastSegment().replaceAll(".test", "");
              String _plus = ("xml/" + _replaceAll_1);
              String _plus_1 = (_plus + ".xml");
              this.fileName = _plus_1;
              String _replaceAll_2 = resource.getURI().lastSegment().replaceAll(".test", "");
              String _plus_2 = (_replaceAll_2 + ".xml");
              this.pageName = _plus_2;
            } else {
              String _replaceAll_3 = resource.getURI().lastSegment().replaceAll(".test", "");
              String _plus_3 = ("xml/" + _replaceAll_3);
              String _plus_4 = (_plus_3 + Integer.valueOf(i));
              String _plus_5 = (_plus_4 + ".xml");
              this.fileName = _plus_5;
              String _replaceAll_4 = resource.getURI().lastSegment().replaceAll(".test", "");
              String _plus_6 = (_replaceAll_4 + Integer.valueOf(i));
              String _plus_7 = (_plus_6 + ".xml");
              this.pageName = _plus_7;
            }
            EObject main = null;
            int _size = this.blocks.size();
            boolean _greaterThan = (_size > 0);
            if (_greaterThan) {
              main = this.blocks.get(0);
            }
            int _size_1 = this.mutators.size();
            boolean _greaterThan_1 = (_size_1 > 0);
            if (_greaterThan_1) {
              main = this.mutators.get(0);
            }
            EObject mutEnv = main;
            while (((!(mutEnv instanceof MutatorEnvironment)) && (mutEnv.eContainer() != null))) {
              mutEnv = mutEnv.eContainer();
            }
            if ((!(mutEnv instanceof MutatorEnvironment))) {
              return;
            }
            List<EPackage> packages = ModelManager.loadMetaModel(((MutatorEnvironment) mutEnv).getDefinition().getMetamodel());
            String domain = packages.get(0).getNsURI().replace("http://", "");
            domain = domain.substring(0, domain.lastIndexOf("/")).replace("/", "");
            int k = 0;
            EList<MutatorTests> _exercises = p.getExercises();
            for (final MutatorTests exercise : _exercises) {
              {
                ArrayList<EPackage> _arrayList = new ArrayList<EPackage>();
                this.metamodel = _arrayList;
                this.metamodel.addAll(ModelManager.loadMetaModel(p.getMetamodel()));
                ArrayList<EClass> _arrayList_1 = new ArrayList<EClass>();
                this.roots = _arrayList_1;
                this.roots.addAll(ModelManager.getRootEClasses(this.metamodel));
                String _plus_8 = (Integer.valueOf(k) + ".xml");
                fsa.generateFile(this.fileName.replace(".xml", _plus_8), this.compile(p, resource, exercise));
                k++;
              }
            }
          }
        }
      } catch (final Throwable _t) {
        if (_t instanceof ModelNotFoundException) {
        } else {
          throw Exceptions.sneakyThrow(_t);
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  public CharSequence compile(final Program program, final Resource resource, final MutatorTests exercise) {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("\t\t");
      String _xblockexpression = null;
      {
        this.buildOptions(program, resource, this.blocks, this.roots, program.getClass());
        _xblockexpression = "";
      }
      _builder.append(_xblockexpression, "\t\t");
      _builder.newLineIfNotEmpty();
      _builder.append("<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("<hotpot-jquiz-file>");
      _builder.newLine();
      _builder.append("<rdf:RDF xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\" xmlns:dc=\"http://purl.org/dc/elements/1.1/\">");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("<rdf:Description rdf:about=\"\">");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<dc:creator>pablo</dc:creator>");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("</rdf:Description>");
      _builder.newLine();
      _builder.append("</rdf:RDF><version>7</version>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("<data>");
      _builder.newLine();
      _builder.append("<title></title>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("<timer><seconds>60</seconds><include-timer>0</include-timer></timer>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("<reading>");
      _builder.newLine();
      _builder.append("<include-reading>0</include-reading>");
      _builder.newLine();
      _builder.append("<reading-title></reading-title>");
      _builder.newLine();
      _builder.append("<reading-text></reading-text>");
      _builder.newLine();
      _builder.append("</reading>");
      _builder.newLine();
      _builder.append("<questions>");
      _builder.newLine();
      _builder.append("<question-record>");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("<!--");
      EObject main = null;
      _builder.append("-->");
      _builder.newLineIfNotEmpty();
      {
        int _size = this.blocks.size();
        boolean _greaterThan = (_size > 0);
        if (_greaterThan) {
          _builder.append("\t\t");
          String _xblockexpression_1 = null;
          {
            main = this.blocks.get(0);
            _xblockexpression_1 = "";
          }
          _builder.append(_xblockexpression_1, "\t\t");
          _builder.newLineIfNotEmpty();
        } else {
          {
            int _size_1 = this.mutators.size();
            boolean _greaterThan_1 = (_size_1 > 0);
            if (_greaterThan_1) {
              _builder.append("\t\t");
              String _xblockexpression_2 = null;
              {
                main = this.mutators.get(0);
                _xblockexpression_2 = "";
              }
              _builder.append(_xblockexpression_2, "\t\t");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      _builder.append("\t\t");
      _builder.append("<!--");
      EObject _eContainer = main.eContainer();
      List<EPackage> packages = ModelManager.loadMetaModel(((MutatorEnvironment) _eContainer).getDefinition().getMetamodel());
      _builder.append("-->");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("<!--");
      String domain = packages.get(0).getNsURI().replace("http://", "");
      _builder.append("-->");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.append("<!--");
      _builder.append(domain = domain.substring(0, domain.lastIndexOf("/")).replace("/", ""), "\t\t");
      _builder.append("-->");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t");
      _builder.newLine();
      {
        if ((exercise instanceof AlternativeResponse)) {
          _builder.append("       \t");
          _builder.append("<!-- ");
          EClass answersClass = null;
          _builder.append("-->");
          _builder.newLineIfNotEmpty();
          _builder.append("       \t");
          _builder.append("<!-- ");
          EClass statementClass = null;
          _builder.append("-->");
          _builder.newLineIfNotEmpty();
          {
            for(final EClass root : this.roots) {
              {
                EClass _answers = ((AlternativeResponse)exercise).getConfig().getAnswers();
                boolean _tripleNotEquals = (_answers != null);
                if (_tripleNotEquals) {
                  {
                    boolean _equals = ((AlternativeResponse)exercise).getConfig().getAnswers().getName().equals(root.getName());
                    if (_equals) {
                      String _xblockexpression_3 = null;
                      {
                        answersClass = root;
                        _xblockexpression_3 = "";
                      }
                      _builder.append(_xblockexpression_3);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              {
                EClass _statement = ((AlternativeResponse)exercise).getConfig().getStatement();
                boolean _tripleNotEquals_1 = (_statement != null);
                if (_tripleNotEquals_1) {
                  {
                    boolean _equals_1 = ((AlternativeResponse)exercise).getConfig().getStatement().getName().equals(root.getName());
                    if (_equals_1) {
                      String _xblockexpression_4 = null;
                      {
                        statementClass = root;
                        _xblockexpression_4 = "";
                      }
                      _builder.append(_xblockexpression_4);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
            }
          }
          {
            if ((answersClass == null)) {
              String _xblockexpression_5 = null;
              {
                int _size_2 = this.roots.size();
                int _minus = (_size_2 - 1);
                answersClass = this.roots.get(_minus);
                _xblockexpression_5 = "";
              }
              _builder.append(_xblockexpression_5);
              _builder.newLineIfNotEmpty();
            }
          }
          {
            if ((statementClass == null)) {
              {
                int _size_2 = this.roots.size();
                boolean _greaterThan_2 = (_size_2 > 1);
                if (_greaterThan_2) {
                  String _xblockexpression_6 = null;
                  {
                    statementClass = this.roots.get(1);
                    _xblockexpression_6 = "";
                  }
                  _builder.append(_xblockexpression_6);
                  _builder.newLineIfNotEmpty();
                } else {
                  String _xblockexpression_7 = null;
                  {
                    statementClass = this.roots.get(0);
                    _xblockexpression_7 = "";
                  }
                  _builder.append(_xblockexpression_7);
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
          {
            EList<Test> _tests = ((AlternativeResponse)exercise).getTests();
            for(final Test test : _tests) {
              String _xifexpression = null;
              List<String> _get = this.diagrams.get(exercise).get(test).get(answersClass);
              boolean _tripleNotEquals_2 = (_get != null);
              if (_tripleNotEquals_2) {
                String _xifexpression_1 = null;
                int _size_3 = this.diagrams.get(exercise).get(test).get(answersClass).size();
                boolean _greaterThan_3 = (_size_3 > 0);
                if (_greaterThan_3) {
                  _xifexpression_1 = this.diagrams.get(exercise).get(test).get(answersClass).get(0);
                }
                _xifexpression = _xifexpression_1;
              }
              String solution = _xifexpression;
              _builder.newLineIfNotEmpty();
              List<String> answers = new ArrayList<String>();
              _builder.newLineIfNotEmpty();
              Set<String> answersSet = new LinkedHashSet<String>();
              _builder.newLineIfNotEmpty();
              {
                if (((this.diagrams.get(exercise).get(test).get(answersClass) != null) && (this.diagrams.get(exercise).get(test).get(answersClass).size() > 0))) {
                  _builder.append("        ");
                  String _xblockexpression_8 = null;
                  {
                    answersSet.addAll(this.diagrams.get(exercise).get(test).get(answersClass));
                    _xblockexpression_8 = "";
                  }
                  _builder.append(_xblockexpression_8, "        ");
                  _builder.newLineIfNotEmpty();
                  _builder.append("        ");
                  String _xblockexpression_9 = null;
                  {
                    answers.addAll(answersSet);
                    _xblockexpression_9 = "";
                  }
                  _builder.append(_xblockexpression_9, "        ");
                  _builder.newLineIfNotEmpty();
                  _builder.append("        ");
                  String _xblockexpression_10 = null;
                  {
                    Collections.shuffle(answers);
                    _xblockexpression_10 = "";
                  }
                  _builder.append(_xblockexpression_10, "        ");
                  _builder.newLineIfNotEmpty();
                  {
                    int _size_4 = answers.size();
                    boolean _greaterThan_4 = (_size_4 > 0);
                    if (_greaterThan_4) {
                      _builder.append("<!-- ");
                      String diagram = answers.get(0);
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      _builder.append("<!--");
                      String _replace = test.getSource().replace(".model", "");
                      String _plus = ((this.projectPath + "/src-gen/html/diagrams/") + _replace);
                      String _plus_1 = (_plus + "/");
                      String _plus_2 = (_plus_1 + diagram);
                      File file = new File(_plus_2);
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      {
                        if ((file.isFile() && file.exists())) {
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      {
        if ((exercise instanceof MultiChoiceDiagram)) {
          _builder.append("        ");
          int min = Integer.MAX_VALUE;
          _builder.newLineIfNotEmpty();
          {
            EList<Test> _tests_1 = ((MultiChoiceDiagram)exercise).getTests();
            for(final Test test_1 : _tests_1) {
              {
                Set<EClass> _keySet = this.diagrams.get(exercise).get(test_1).keySet();
                for(final EClass eclass : _keySet) {
                  int counter = this.diagrams.get(exercise).get(test_1).get(eclass).size();
                  _builder.newLineIfNotEmpty();
                  {
                    if ((min > counter)) {
                      String _xblockexpression_11 = null;
                      {
                        min = counter;
                        _xblockexpression_11 = "";
                      }
                      _builder.append(_xblockexpression_11);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
            }
          }
          _builder.append("       \t");
          _builder.append("<!-- ");
          EClass answersClass_1 = null;
          _builder.append("-->");
          _builder.newLineIfNotEmpty();
          _builder.append("       \t");
          _builder.append("<!-- ");
          EClass statementClass_1 = null;
          _builder.append("-->");
          _builder.newLineIfNotEmpty();
          {
            for(final EClass root_1 : this.roots) {
              {
                EClass _answers_1 = ((MultiChoiceDiagram)exercise).getConfig().getAnswers();
                boolean _tripleNotEquals_3 = (_answers_1 != null);
                if (_tripleNotEquals_3) {
                  {
                    boolean _equals_2 = ((MultiChoiceDiagram)exercise).getConfig().getAnswers().getName().equals(root_1.getName());
                    if (_equals_2) {
                      String _xblockexpression_12 = null;
                      {
                        answersClass_1 = root_1;
                        _xblockexpression_12 = "";
                      }
                      _builder.append(_xblockexpression_12);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              {
                EClass _statement_1 = ((MultiChoiceDiagram)exercise).getConfig().getStatement();
                boolean _tripleNotEquals_4 = (_statement_1 != null);
                if (_tripleNotEquals_4) {
                  {
                    boolean _equals_3 = ((MultiChoiceDiagram)exercise).getConfig().getStatement().getName().equals(root_1.getName());
                    if (_equals_3) {
                      String _xblockexpression_13 = null;
                      {
                        statementClass_1 = root_1;
                        _xblockexpression_13 = "";
                      }
                      _builder.append(_xblockexpression_13);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
            }
          }
          {
            if ((answersClass_1 == null)) {
              String _xblockexpression_14 = null;
              {
                int _size_5 = this.roots.size();
                int _minus = (_size_5 - 1);
                answersClass_1 = this.roots.get(_minus);
                _xblockexpression_14 = "";
              }
              _builder.append(_xblockexpression_14);
              _builder.newLineIfNotEmpty();
            }
          }
          {
            if ((statementClass_1 == null)) {
              {
                int _size_5 = this.roots.size();
                boolean _greaterThan_5 = (_size_5 > 1);
                if (_greaterThan_5) {
                  String _xblockexpression_15 = null;
                  {
                    statementClass_1 = this.roots.get(1);
                    _xblockexpression_15 = "";
                  }
                  _builder.append(_xblockexpression_15);
                  _builder.newLineIfNotEmpty();
                } else {
                  String _xblockexpression_16 = null;
                  {
                    statementClass_1 = this.roots.get(0);
                    _xblockexpression_16 = "";
                  }
                  _builder.append(_xblockexpression_16);
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
          {
            EList<Test> _tests_2 = ((MultiChoiceDiagram)exercise).getTests();
            for(final Test test_2 : _tests_2) {
              _builder.append("        ");
              String _xifexpression_2 = null;
              List<String> _get_1 = this.diagrams.get(exercise).get(test_2).get(statementClass_1);
              boolean _tripleNotEquals_5 = (_get_1 != null);
              if (_tripleNotEquals_5) {
                String _xifexpression_3 = null;
                int _size_6 = this.diagrams.get(exercise).get(test_2).get(statementClass_1).size();
                boolean _greaterThan_6 = (_size_6 > 0);
                if (_greaterThan_6) {
                  _xifexpression_3 = this.diagrams.get(exercise).get(test_2).get(statementClass_1).get(0);
                } else {
                  _xifexpression_3 = null;
                }
                _xifexpression_2 = _xifexpression_3;
              } else {
                _xifexpression_2 = null;
              }
              String statement = _xifexpression_2;
              _builder.newLineIfNotEmpty();
              _builder.append("        ");
              String _xifexpression_4 = null;
              List<String> _get_2 = this.diagrams.get(exercise).get(test_2).get(answersClass_1);
              boolean _tripleNotEquals_6 = (_get_2 != null);
              if (_tripleNotEquals_6) {
                String _xifexpression_5 = null;
                int _size_7 = this.diagrams.get(exercise).get(test_2).get(answersClass_1).size();
                boolean _greaterThan_7 = (_size_7 > 0);
                if (_greaterThan_7) {
                  _xifexpression_5 = this.diagrams.get(exercise).get(test_2).get(answersClass_1).get(0);
                }
                _xifexpression_4 = _xifexpression_5;
              }
              String solution_1 = _xifexpression_4;
              _builder.newLineIfNotEmpty();
              _builder.append("        ");
              List<String> answers_1 = new ArrayList<String>();
              _builder.newLineIfNotEmpty();
              _builder.append("        ");
              Set<String> answersSet_1 = new LinkedHashSet<String>();
              _builder.newLineIfNotEmpty();
              {
                if (((this.diagrams.get(exercise).get(test_2).get(answersClass_1) != null) && (this.diagrams.get(exercise).get(test_2).get(answersClass_1).size() > 0))) {
                  _builder.append("        ");
                  String _xblockexpression_17 = null;
                  {
                    answersSet_1.addAll(this.diagrams.get(exercise).get(test_2).get(answersClass_1));
                    _xblockexpression_17 = "";
                  }
                  _builder.append(_xblockexpression_17, "        ");
                  _builder.newLineIfNotEmpty();
                  _builder.append("        ");
                  String _xblockexpression_18 = null;
                  {
                    answers_1.addAll(answersSet_1);
                    _xblockexpression_18 = "";
                  }
                  _builder.append(_xblockexpression_18, "        ");
                  _builder.newLineIfNotEmpty();
                  _builder.append("        ");
                  String _xblockexpression_19 = null;
                  {
                    Collections.shuffle(answers_1);
                    _xblockexpression_19 = "";
                  }
                  _builder.append(_xblockexpression_19, "        ");
                  _builder.newLineIfNotEmpty();
                  _builder.append("        ");
                  _builder.append("   ");
                  _builder.append("<!--");
                  String _replace_1 = test_2.getSource().replace(".model", "");
                  String _plus_3 = ((this.projectPath + "/src-gen/html/diagrams/") + _replace_1);
                  String _plus_4 = (_plus_3 + "/");
                  String _plus_5 = (_plus_4 + statement);
                  File file_1 = new File(_plus_5);
                  _builder.append("-->");
                  _builder.newLineIfNotEmpty();
                  {
                    if ((file_1.isFile() && file_1.exists())) {
                      _builder.append("<!--");
                      UUID uuid = UUID.randomUUID();
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      _builder.append("<!--");
                      int nNodes = 0;
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      _builder.append("<question>Select which of the following object diagrams is a valid instance of the class diagram shown below:");
                      _builder.newLine();
                      _builder.append("&amp;#x003C;img src=\"");
                      String _replace_2 = test_2.getSource().replace(".model", "");
                      String _plus_6 = ((this.projectPath + "/src-gen/html/diagrams/") + _replace_2);
                      String _plus_7 = (_plus_6 + "/");
                      String _plus_8 = (_plus_7 + statement);
                      _builder.append(_plus_8);
                      _builder.append("\" alt=&quot;statement.png&quot; title=&quot;statement&quot; width=&quot;222&quot; height=&quot;364&quot; style=&quot;float: right;&quot;/&amp;#x003E;</question><clue></clue><category></category><weighting>100</weighting><fixed>0</fixed><question-type>1</question-type>");
                      _builder.newLineIfNotEmpty();
                      _builder.append("<answers>");
                      _builder.newLine();
                      _builder.append("         ");
                      _builder.append("<!--");
                      int counter_1 = 0;
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      _builder.append("         ");
                      _builder.append("<!--");
                      int solutions = 1;
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      _builder.append("         ");
                      _builder.append("<!--");
                      double fraction = (100.0 / solutions);
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      _builder.append("         ");
                      String _xblockexpression_20 = null;
                      {
                        counter_1 = 0;
                        _xblockexpression_20 = "";
                      }
                      _builder.append(_xblockexpression_20, "         ");
                      _builder.newLineIfNotEmpty();
                      {
                        for(final String diagram_1 : answers_1) {
                          _builder.append("           ");
                          _builder.append("<!--");
                          String _replace_3 = test_2.getSource().replace(".model", "");
                          String _plus_9 = ((this.projectPath + "/src-gen/html/diagrams/") + _replace_3);
                          String _plus_10 = (_plus_9 + "/");
                          String _plus_11 = (_plus_10 + diagram_1);
                          File _file = new File(_plus_11);
                          File _file_1 = file_1 = _file;
                          _builder.append(_file_1, "           ");
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          {
                            if ((file_1.isFile() && file_1.exists())) {
                              _builder.append("<!-- ");
                              _builder.append(uuid = UUID.randomUUID());
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              {
                                if (((diagram_1.startsWith(answersClass_1.getName()) || diagram_1.contains(("/" + answersClass_1.getName()))) || diagram_1.contains(("\\" + answersClass_1.getName())))) {
                                  _builder.append("<!--");
                                  boolean s = false;
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  {
                                    List<String> _get_3 = this.solutionsMap.get(exercise);
                                    for(final String sol : _get_3) {
                                      {
                                        if ((((diagram_1.startsWith((sol + "/")) || diagram_1.startsWith((sol + "\\"))) || diagram_1.contains((((sol + "/") + answersClass_1.getName()) + "_"))) || diagram_1.contains((((sol + "\\") + answersClass_1.getName()) + "_")))) {
                                          String _xblockexpression_21 = null;
                                          {
                                            s = true;
                                            _xblockexpression_21 = "";
                                          }
                                          _builder.append(_xblockexpression_21);
                                          _builder.newLineIfNotEmpty();
                                        }
                                      }
                                    }
                                  }
                                  {
                                    if ((s == true)) {
                                      {
                                        if ((counter_1 < (min - 1))) {
                                          String _xblockexpression_22 = null;
                                          {
                                            counter_1++;
                                            _xblockexpression_22 = "";
                                          }
                                          _builder.append(_xblockexpression_22);
                                          _builder.newLineIfNotEmpty();
                                          String _xblockexpression_23 = null;
                                          {
                                            solutions++;
                                            _xblockexpression_23 = "";
                                          }
                                          _builder.append(_xblockexpression_23);
                                          _builder.newLineIfNotEmpty();
                                        }
                                      }
                                    }
                                  }
                                  {
                                    if ((s || diagram_1.equals(solution_1))) {
                                      _builder.append("<answer>");
                                      _builder.newLine();
                                      _builder.append("<text>&amp;#x003C;img src=&quot;");
                                      String _replace_4 = test_2.getSource().replace(".model", "");
                                      String _plus_12 = ((this.projectPath + "/src-gen/html/diagrams/") + _replace_4);
                                      String _plus_13 = (_plus_12 + "/");
                                      String _plus_14 = (_plus_13 + diagram_1);
                                      _builder.append(_plus_14);
                                      _builder.append("&quot; alt=&quot;op1.png&quot; title=&quot;op1&quot; width=&quot;355&quot; height=&quot;220&quot; style=&quot;float: left;&quot;/&amp;#x003E;</text><feedback></feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options>");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("</answer>");
                                      _builder.newLine();
                                    } else {
                                      _builder.append("<answer>");
                                      _builder.newLine();
                                      _builder.append("<text>&amp;#x003C;img src=&quot;");
                                      String _replace_5 = test_2.getSource().replace(".model", "");
                                      String _plus_15 = ((this.projectPath + "/src-gen/html/diagrams/") + _replace_5);
                                      String _plus_16 = (_plus_15 + "/");
                                      String _plus_17 = (_plus_16 + diagram_1);
                                      _builder.append(_plus_17);
                                      _builder.append("&quot; width=&quot;355&quot; height=&quot;220&quot; style=&quot;float: left;&quot;/&amp;#x003E;</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct>");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("</answer>");
                                      _builder.newLine();
                                      {
                                        if ((counter_1 < (min - 1))) {
                                          _builder.append(" ");
                                          String _xblockexpression_24 = null;
                                          {
                                            counter_1++;
                                            _xblockexpression_24 = "";
                                          }
                                          _builder.append(_xblockexpression_24, " ");
                                          _builder.newLineIfNotEmpty();
                                          _builder.append(" ");
                                          _builder.append("<!--");
                                          _builder.append(s = false, " ");
                                          _builder.append("-->");
                                          _builder.newLineIfNotEmpty();
                                          {
                                            List<String> _get_4 = this.solutionsMap.get(exercise);
                                            for(final String sol_1 : _get_4) {
                                              {
                                                if ((((diagram_1.startsWith((sol_1 + "/")) || diagram_1.startsWith((sol_1 + "\\"))) || diagram_1.contains((((sol_1 + "/") + answersClass_1.getName()) + "_"))) || diagram_1.contains((((sol_1 + "\\") + answersClass_1.getName()) + "_")))) {
                                                  _builder.append(" ");
                                                  String _xblockexpression_25 = null;
                                                  {
                                                    s = true;
                                                    _xblockexpression_25 = "";
                                                  }
                                                  _builder.append(_xblockexpression_25, " ");
                                                  _builder.newLineIfNotEmpty();
                                                }
                                              }
                                            }
                                          }
                                          {
                                            if ((s || diagram_1.equals(solution_1))) {
                                              _builder.append("<answer>");
                                              _builder.newLine();
                                              _builder.append("<text>&amp;#x003C;img src=&quot;");
                                              String _replace_6 = test_2.getSource().replace(".model", "");
                                              String _plus_18 = ((this.projectPath + "/src-gen/html/diagrams/") + _replace_6);
                                              String _plus_19 = (_plus_18 + "/");
                                              String _plus_20 = (_plus_19 + diagram_1);
                                              _builder.append(_plus_20);
                                              _builder.append("&quot; alt=&quot;op1.png&quot; title=&quot;op1&quot; width=&quot;355&quot; height=&quot;220&quot; style=&quot;float: left;&quot;/&amp;#x003E;</text><feedback></feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options>");
                                              _builder.newLineIfNotEmpty();
                                              _builder.append("</answer>");
                                              _builder.newLine();
                                            } else {
                                              _builder.append("<answer>");
                                              _builder.newLine();
                                              _builder.append("<text>&amp;#x003C;img src=&quot;");
                                              String _replace_7 = test_2.getSource().replace(".model", "");
                                              String _plus_21 = ((this.projectPath + "/src-gen/html/diagrams/") + _replace_7);
                                              String _plus_22 = (_plus_21 + "/");
                                              String _plus_23 = (_plus_22 + diagram_1);
                                              _builder.append(_plus_23);
                                              _builder.append("&quot; width=&quot;355&quot; height=&quot;220&quot; style=&quot;float: left;&quot;/&amp;#x003E;</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct>");
                                              _builder.newLineIfNotEmpty();
                                              _builder.append("</answer>");
                                              _builder.newLine();
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          _builder.append("<!---->");
                          _builder.newLine();
                        }
                      }
                    }
                  }
                }
              }
              _builder.append("<!--->");
              _builder.newLine();
              _builder.append("<feedback></feedback><correct>0</correct><percent-correct>0</percent-correct><include-in-mc-options>1</include-in-mc-options>");
              _builder.newLine();
              _builder.append("</answers>");
              _builder.newLine();
              _builder.append("</question-record></questions>");
              _builder.newLine();
            }
          }
        }
      }
      _builder.append("\t\t");
      Map<Test, List<AbstractMap.SimpleEntry<String, Boolean>>> mapTextOptions = new HashMap<Test, List<AbstractMap.SimpleEntry<String, Boolean>>>();
      _builder.newLineIfNotEmpty();
      {
        if ((exercise instanceof MultiChoiceEmendation)) {
          _builder.append("        ");
          int min_1 = Integer.MAX_VALUE;
          _builder.newLineIfNotEmpty();
          _builder.append("        ");
          int rndIndex = (-1);
          _builder.newLineIfNotEmpty();
          {
            EList<Test> _tests_3 = ((MultiChoiceEmendation)exercise).getTests();
            for(final Test test_3 : _tests_3) {
              _builder.append("\t\t");
              Test t = test_3;
              _builder.newLineIfNotEmpty();
              {
                if (((this.options.get(exercise) != null) && (this.options.get(exercise).get(test_3) != null))) {
                  int counter_2 = 0;
                  _builder.newLineIfNotEmpty();
                  String _xblockexpression_26 = null;
                  {
                    rndIndex = ModelManager.getRandomIndex(this.options.get(exercise).get(test_3));
                    _xblockexpression_26 = "";
                  }
                  _builder.append(_xblockexpression_26);
                  _builder.newLineIfNotEmpty();
                  List<AbstractMap.SimpleEntry<String, Boolean>> textOptions = new ArrayList<AbstractMap.SimpleEntry<String, Boolean>>();
                  _builder.newLineIfNotEmpty();
                  {
                    int _size_8 = this.options.get(exercise).get(test_3).size();
                    boolean _greaterThan_8 = (_size_8 > 0);
                    if (_greaterThan_8) {
                      {
                        List<EduTestSuperGenerator.TestOption> _get_5 = this.options.get(exercise).get(test_3).get(rndIndex);
                        for(final EduTestSuperGenerator.TestOption opt : _get_5) {
                          {
                            Set<String> _keySet_1 = opt.text.keySet();
                            for(final String key : _keySet_1) {
                              {
                                List<String> _get_6 = opt.text.get(key);
                                for(final String text : _get_6) {
                                  boolean found = false;
                                  _builder.newLineIfNotEmpty();
                                  {
                                    for(final AbstractMap.SimpleEntry<String, Boolean> entry : textOptions) {
                                      {
                                        boolean _equals_4 = entry.getKey().equals(text);
                                        if (_equals_4) {
                                          String _xblockexpression_27 = null;
                                          {
                                            found = true;
                                            _xblockexpression_27 = "";
                                          }
                                          _builder.append(_xblockexpression_27);
                                          _builder.newLineIfNotEmpty();
                                        }
                                      }
                                    }
                                  }
                                  {
                                    if ((found == false)) {
                                      String _xblockexpression_28 = null;
                                      {
                                        counter_2++;
                                        _xblockexpression_28 = "";
                                      }
                                      _builder.append(_xblockexpression_28);
                                      _builder.newLineIfNotEmpty();
                                      String _xblockexpression_29 = null;
                                      {
                                        AbstractMap.SimpleEntry<String, Boolean> _simpleEntry = new AbstractMap.SimpleEntry<String, Boolean>(text, Boolean.valueOf(false));
                                        textOptions.add(_simpleEntry);
                                        _xblockexpression_29 = "";
                                      }
                                      _builder.append(_xblockexpression_29);
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      String _xblockexpression_30 = null;
                      {
                        mapTextOptions.put(test_3, textOptions);
                        _xblockexpression_30 = "";
                      }
                      _builder.append(_xblockexpression_30);
                      _builder.newLineIfNotEmpty();
                      {
                        if ((min_1 > counter_2)) {
                          String _xblockexpression_31 = null;
                          {
                            min_1 = counter_2;
                            _xblockexpression_31 = "";
                          }
                          _builder.append(_xblockexpression_31);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              _builder.append("       \t");
              _builder.append("<!-- ");
              EClass answersClass_2 = null;
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              _builder.append("       \t");
              _builder.append("<!-- ");
              EClass statementClass_2 = null;
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              _builder.append("<questions>");
              _builder.newLine();
              _builder.append("<question-record>");
              _builder.newLine();
              {
                for(final EClass root_2 : this.roots) {
                  {
                    EClass _answers_2 = ((MultiChoiceEmendation)exercise).getConfig().getAnswers();
                    boolean _tripleNotEquals_7 = (_answers_2 != null);
                    if (_tripleNotEquals_7) {
                      {
                        boolean _equals_5 = ((MultiChoiceEmendation)exercise).getConfig().getAnswers().getName().equals(root_2.getName());
                        if (_equals_5) {
                          String _xblockexpression_32 = null;
                          {
                            answersClass_2 = root_2;
                            _xblockexpression_32 = "";
                          }
                          _builder.append(_xblockexpression_32);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                  {
                    EClass _statement_2 = ((MultiChoiceEmendation)exercise).getConfig().getStatement();
                    boolean _tripleNotEquals_8 = (_statement_2 != null);
                    if (_tripleNotEquals_8) {
                      {
                        boolean _equals_6 = ((MultiChoiceEmendation)exercise).getConfig().getStatement().getName().equals(root_2.getName());
                        if (_equals_6) {
                          _builder.append("\t\t");
                          String _xblockexpression_33 = null;
                          {
                            statementClass_2 = root_2;
                            _xblockexpression_33 = "";
                          }
                          _builder.append(_xblockexpression_33, "\t\t");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              {
                if ((answersClass_2 == null)) {
                  _builder.append("\t\t");
                  String _xblockexpression_34 = null;
                  {
                    int _size_9 = this.roots.size();
                    int _minus = (_size_9 - 1);
                    answersClass_2 = this.roots.get(_minus);
                    _xblockexpression_34 = "";
                  }
                  _builder.append(_xblockexpression_34, "\t\t");
                  _builder.newLineIfNotEmpty();
                }
              }
              {
                if ((statementClass_2 == null)) {
                  {
                    int _size_9 = this.roots.size();
                    boolean _greaterThan_9 = (_size_9 > 1);
                    if (_greaterThan_9) {
                      _builder.append("\t\t");
                      String _xblockexpression_35 = null;
                      {
                        statementClass_2 = this.roots.get(1);
                        _xblockexpression_35 = "";
                      }
                      _builder.append(_xblockexpression_35, "\t\t");
                      _builder.newLineIfNotEmpty();
                    } else {
                      _builder.append("\t\t");
                      String _xblockexpression_36 = null;
                      {
                        statementClass_2 = this.roots.get(0);
                        _xblockexpression_36 = "";
                      }
                      _builder.append(_xblockexpression_36, "\t\t");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              {
                if (((this.options.get(exercise) != null) && (this.options.get(exercise).get(t) != null))) {
                  _builder.append("\t\t");
                  _builder.append("<!--");
                  List<String> diagrams = new ArrayList<String>();
                  _builder.append("-->");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t\t");
                  _builder.append("<!--");
                  List<EduTestSuperGenerator.TestOption> answersOptions = new ArrayList<EduTestSuperGenerator.TestOption>();
                  _builder.append("-->");
                  _builder.newLineIfNotEmpty();
                  {
                    List<List<EduTestSuperGenerator.TestOption>> _get_7 = this.options.get(exercise).get(t);
                    boolean _tripleNotEquals_9 = (_get_7 != null);
                    if (_tripleNotEquals_9) {
                      {
                        int _size_10 = this.options.get(exercise).get(t).size();
                        boolean _greaterThan_10 = (_size_10 > 0);
                        if (_greaterThan_10) {
                          {
                            List<EduTestSuperGenerator.TestOption> _get_8 = this.options.get(exercise).get(t).get(rndIndex);
                            for(final EduTestSuperGenerator.TestOption opt_1 : _get_8) {
                              {
                                int _size_11 = opt_1.text.size();
                                boolean _greaterThan_11 = (_size_11 > 0);
                                if (_greaterThan_11) {
                                  {
                                    if ((opt_1.solution == true)) {
                                      _builder.append("<!--");
                                      boolean _add = diagrams.add(opt_1.path);
                                      _builder.append(_add);
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("<!--");
                                      boolean _add_1 = answersOptions.add(opt_1);
                                      _builder.append(_add_1);
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  {
                    int _size_12 = diagrams.size();
                    boolean _greaterThan_12 = (_size_12 > 0);
                    if (_greaterThan_12) {
                      _builder.append("\t\t");
                      _builder.append("<!--");
                      int rndSolution = (-1);
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      _builder.append("\t\t");
                      String _xblockexpression_37 = null;
                      {
                        rndSolution = ModelManager.getRandomIndex(diagrams);
                        _xblockexpression_37 = "";
                      }
                      _builder.append(_xblockexpression_37, "\t\t");
                      _builder.newLineIfNotEmpty();
                      _builder.append("            ");
                      _builder.append("<!--");
                      String diagram_2 = diagrams.get(rndSolution);
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      {
                        int _length = diagram_2.length();
                        boolean _greaterThan_13 = (_length > 0);
                        if (_greaterThan_13) {
                          _builder.append("\t\t\t");
                          _builder.append("<!--");
                          int _indexOf = diagram_2.indexOf("/data/out/");
                          int _length_1 = "/data/out/".length();
                          int _plus_24 = (_indexOf + _length_1);
                          String data = diagram_2.substring(_plus_24, diagram_2.lastIndexOf("/"));
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t\t\t");
                          _builder.append("<!--");
                          String model = data.substring(0, data.lastIndexOf("/"));
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t\t\t");
                          _builder.append("<!--");
                          int _indexOf_1 = data.indexOf((model + "/"));
                          int _length_2 = (model + "/").length();
                          int _plus_25 = (_indexOf_1 + _length_2);
                          String mutOperator = data.substring(_plus_25, data.length());
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t\t\t");
                          _builder.append("<!--");
                          String _name = statementClass_2.getName();
                          String _plus_26 = ((((("diagrams/" + model) + "/") + mutOperator) + "/") + _name);
                          String _plus_27 = (_plus_26 + "_");
                          int _lastIndexOf = diagram_2.lastIndexOf("/");
                          int _plus_28 = (_lastIndexOf + 1);
                          String _substring = diagram_2.substring(_plus_28, diagram_2.length());
                          String _plus_29 = (_plus_27 + _substring);
                          _builder.append(diagram_2 = _plus_29, "\t\t\t");
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("         ");
                          _builder.append("<!--");
                          File file_2 = new File(((this.projectPath + "/src-gen/html/") + diagram_2));
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          {
                            if ((file_2.isFile() && file_2.exists())) {
                              _builder.append("\t\t\t");
                              _builder.append("<question>");
                              _builder.newLine();
                              {
                                if (((statementClass_2 != null) && (answersClass_2 == null))) {
                                  _builder.append("&amp;#x003C;img src=&quot;");
                                  _builder.append(((this.projectPath + "/src-gen/html/") + diagram_2));
                                  _builder.append("&quot; alt=&quot;cd.png&quot; title=&quot;cd&quot; width=&quot;222&quot; height=&quot;364&quot; style=&quot;float: right;&quot;/&amp;#x003E;");
                                  _builder.newLineIfNotEmpty();
                                }
                              }
                              {
                                if (((statementClass_2 != null) && (answersClass_2 != null))) {
                                  _builder.append("&amp;#x003C;img src=&quot;");
                                  _builder.append(((this.projectPath + "/src-gen/html/") + diagram_2));
                                  _builder.append("&quot; alt=&quot;cd_od.png&quot; title=&quot;cd&quot; width=&quot;222&quot; height=&quot;364&quot; style=&quot;float: right;&quot;/&amp;#x003E;");
                                  _builder.newLineIfNotEmpty();
                                }
                              }
                              _builder.append("</question>");
                              _builder.newLine();
                            }
                          }
                          _builder.append("<!--");
                          UUID uuid_1 = UUID.randomUUID();
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("<!--");
                          int nNodes_1 = 0;
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("        ");
                          int solutions_1 = 0;
                          _builder.newLineIfNotEmpty();
                          {
                            List<List<EduTestSuperGenerator.TestOption>> _get_9 = this.options.get(exercise).get(t);
                            boolean _tripleNotEquals_10 = (_get_9 != null);
                            if (_tripleNotEquals_10) {
                              {
                                int _size_13 = this.options.get(exercise).get(t).size();
                                boolean _greaterThan_14 = (_size_13 > 0);
                                if (_greaterThan_14) {
                                  {
                                    for(final EduTestSuperGenerator.TestOption opt_2 : answersOptions) {
                                      _builder.append("        ");
                                      List<String> textOptions_1 = new ArrayList<String>();
                                      _builder.newLineIfNotEmpty();
                                      {
                                        int _size_14 = opt_2.text.size();
                                        boolean _greaterThan_15 = (_size_14 > 0);
                                        if (_greaterThan_15) {
                                          {
                                            if ((opt_2.solution == true)) {
                                              {
                                                Set<String> _keySet_2 = opt_2.text.keySet();
                                                for(final String key_1 : _keySet_2) {
                                                  {
                                                    List<String> _get_10 = opt_2.text.get(key_1);
                                                    for(final String text_1 : _get_10) {
                                                      {
                                                        boolean _contains = textOptions_1.contains(text_1);
                                                        boolean _not = (!_contains);
                                                        if (_not) {
                                                          _builder.append("        ");
                                                          String _xblockexpression_38 = null;
                                                          {
                                                            solutions_1++;
                                                            _xblockexpression_38 = "";
                                                          }
                                                          _builder.append(_xblockexpression_38, "        ");
                                                          _builder.newLineIfNotEmpty();
                                                          _builder.append("        ");
                                                          String _xblockexpression_39 = null;
                                                          {
                                                            textOptions_1.add(text_1);
                                                            _xblockexpression_39 = "";
                                                          }
                                                          _builder.append(_xblockexpression_39, "        ");
                                                          _builder.newLineIfNotEmpty();
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            } else {
                                              {
                                                Set<String> _keySet_3 = opt_2.text.keySet();
                                                for(final String key_2 : _keySet_3) {
                                                  {
                                                    List<String> _get_11 = opt_2.text.get(key_2);
                                                    for(final String text_2 : _get_11) {
                                                      {
                                                        boolean _contains_1 = textOptions_1.contains(text_2);
                                                        boolean _not_1 = (!_contains_1);
                                                        if (_not_1) {
                                                          _builder.append("        ");
                                                          String _xblockexpression_40 = null;
                                                          {
                                                            textOptions_1.add(text_2);
                                                            _xblockexpression_40 = "";
                                                          }
                                                          _builder.append(_xblockexpression_40, "        ");
                                                          _builder.newLineIfNotEmpty();
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              {
                                int _size_15 = this.options.get(exercise).get(t).size();
                                boolean _greaterThan_16 = (_size_15 > 0);
                                if (_greaterThan_16) {
                                  {
                                    for(final EduTestSuperGenerator.TestOption opt_3 : answersOptions) {
                                      {
                                        if ((opt_3.solution == true)) {
                                          {
                                            int _size_16 = opt_3.text.size();
                                            boolean _greaterThan_17 = (_size_16 > 0);
                                            if (_greaterThan_17) {
                                              {
                                                Set<String> _keySet_4 = opt_3.text.keySet();
                                                for(final String key_3 : _keySet_4) {
                                                  {
                                                    List<String> _get_12 = opt_3.text.get(key_3);
                                                    for(final String text_3 : _get_12) {
                                                      _builder.append("          ");
                                                      boolean found_1 = false;
                                                      _builder.newLineIfNotEmpty();
                                                      {
                                                        List<AbstractMap.SimpleEntry<String, Boolean>> _get_13 = mapTextOptions.get(t);
                                                        for(final AbstractMap.SimpleEntry<String, Boolean> entry_1 : _get_13) {
                                                          {
                                                            if ((entry_1.getKey().equals(text_3) && (!(entry_1.getValue()).booleanValue()))) {
                                                              _builder.append("          ");
                                                              String _xblockexpression_41 = null;
                                                              {
                                                                found_1 = true;
                                                                _xblockexpression_41 = "";
                                                              }
                                                              _builder.append(_xblockexpression_41, "          ");
                                                              _builder.newLineIfNotEmpty();
                                                              _builder.append("          ");
                                                              String _xblockexpression_42 = null;
                                                              {
                                                                entry_1.setValue(Boolean.valueOf(true));
                                                                _xblockexpression_42 = "";
                                                              }
                                                              _builder.append(_xblockexpression_42, "          ");
                                                              _builder.newLineIfNotEmpty();
                                                            }
                                                          }
                                                        }
                                                      }
                                                      _builder.append("<answer>");
                                                      _builder.newLine();
                                                      {
                                                        if ((found_1 == true)) {
                                                          _builder.append("<text>");
                                                          String _trim = text_3.trim();
                                                          _builder.append(_trim);
                                                          _builder.append("</text><feedback></feedback><correct>1</correct><percent-correct>100</percent-correct><include-in-mc-options>1</include-in-mc-options>");
                                                          _builder.newLineIfNotEmpty();
                                                        } else {
                                                          _builder.append("<text>");
                                                          String _trim_1 = text_3.trim();
                                                          _builder.append(_trim_1);
                                                          _builder.append("</text><feedback></feedback><correct>0</correct><percent-correct>0</percent-correct></answer>");
                                                          _builder.newLineIfNotEmpty();
                                                        }
                                                      }
                                                      _builder.append("</answer>");
                                                      _builder.newLine();
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              {
                                int _size_17 = this.options.get(exercise).get(t).size();
                                boolean _greaterThan_18 = (_size_17 > 0);
                                if (_greaterThan_18) {
                                  {
                                    List<EduTestSuperGenerator.TestOption> _get_14 = this.options.get(exercise).get(t).get(rndIndex);
                                    for(final EduTestSuperGenerator.TestOption opt_4 : _get_14) {
                                      {
                                        if ((opt_4.solution == false)) {
                                          _builder.append("          ");
                                          int counter_3 = 0;
                                          _builder.newLineIfNotEmpty();
                                          {
                                            int _size_18 = opt_4.text.size();
                                            boolean _greaterThan_19 = (_size_18 > 0);
                                            if (_greaterThan_19) {
                                              {
                                                Set<String> _keySet_5 = opt_4.text.keySet();
                                                for(final String key_4 : _keySet_5) {
                                                  {
                                                    List<String> _get_15 = opt_4.text.get(key_4);
                                                    for(final String text_4 : _get_15) {
                                                      _builder.append("          ");
                                                      boolean found_2 = false;
                                                      _builder.newLineIfNotEmpty();
                                                      {
                                                        List<AbstractMap.SimpleEntry<String, Boolean>> _get_16 = mapTextOptions.get(t);
                                                        for(final AbstractMap.SimpleEntry<String, Boolean> entry_2 : _get_16) {
                                                          {
                                                            if ((entry_2.getKey().equals(text_4) && (!(entry_2.getValue()).booleanValue()))) {
                                                              _builder.append("          ");
                                                              String _xblockexpression_43 = null;
                                                              {
                                                                found_2 = true;
                                                                _xblockexpression_43 = "";
                                                              }
                                                              _builder.append(_xblockexpression_43, "          ");
                                                              _builder.newLineIfNotEmpty();
                                                              _builder.append("          ");
                                                              String _xblockexpression_44 = null;
                                                              {
                                                                entry_2.setValue(Boolean.valueOf(true));
                                                                _xblockexpression_44 = "";
                                                              }
                                                              _builder.append(_xblockexpression_44, "          ");
                                                              _builder.newLineIfNotEmpty();
                                                            }
                                                          }
                                                        }
                                                      }
                                                      {
                                                        if ((found_2 == true)) {
                                                          {
                                                            if ((counter_3 < ((min_1 - solutions_1) + 1))) {
                                                              _builder.append("          ");
                                                              String _xblockexpression_45 = null;
                                                              {
                                                                counter_3++;
                                                                _xblockexpression_45 = "";
                                                              }
                                                              _builder.append(_xblockexpression_45, "          ");
                                                              _builder.newLineIfNotEmpty();
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  _builder.append("<!----->");
                                  _builder.newLine();
                                  _builder.newLine();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      {
        if ((exercise instanceof MatchPairs)) {
          _builder.append("        ");
          int min_2 = Integer.MAX_VALUE;
          _builder.newLineIfNotEmpty();
          _builder.append("        ");
          int index = 0;
          _builder.newLineIfNotEmpty();
          _builder.append("        ");
          int max = Integer.MIN_VALUE;
          _builder.newLineIfNotEmpty();
          {
            EList<Test> _tests_4 = ((MatchPairs)exercise).getTests();
            for(final Test test_4 : _tests_4) {
              {
                if (((this.options.get(exercise) != null) && (this.options.get(exercise).get(test_4) != null))) {
                  List<String> textOptions_2 = new ArrayList<String>();
                  _builder.newLineIfNotEmpty();
                  int k = 0;
                  _builder.newLineIfNotEmpty();
                  int counter_4 = 0;
                  _builder.newLineIfNotEmpty();
                  int rndIndex_1 = ModelManager.getRandomIndex(this.options.get(exercise).get(test_4));
                  _builder.newLineIfNotEmpty();
                  {
                    int _size_19 = this.options.get(exercise).get(test_4).size();
                    boolean _greaterThan_20 = (_size_19 > 0);
                    if (_greaterThan_20) {
                      {
                        List<EduTestSuperGenerator.TestOption> _get_17 = this.options.get(exercise).get(test_4).get(rndIndex_1);
                        for(final EduTestSuperGenerator.TestOption opt_5 : _get_17) {
                          {
                            Set<String> _keySet_6 = opt_5.text.keySet();
                            for(final String key_5 : _keySet_6) {
                              {
                                List<String> _get_18 = opt_5.text.get(key_5);
                                for(final String text_5 : _get_18) {
                                  {
                                    boolean _contains_2 = textOptions_2.contains(text_5);
                                    boolean _not_2 = (!_contains_2);
                                    if (_not_2) {
                                      String _xblockexpression_46 = null;
                                      {
                                        counter_4++;
                                        _xblockexpression_46 = "";
                                      }
                                      _builder.append(_xblockexpression_46);
                                      _builder.newLineIfNotEmpty();
                                      String _xblockexpression_47 = null;
                                      {
                                        textOptions_2.add(text_5);
                                        _xblockexpression_47 = "";
                                      }
                                      _builder.append(_xblockexpression_47);
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      {
                        if ((counter_4 > max)) {
                          String _xblockexpression_48 = null;
                          {
                            max = counter_4;
                            _xblockexpression_48 = "";
                          }
                          _builder.append(_xblockexpression_48);
                          _builder.newLineIfNotEmpty();
                          String _xblockexpression_49 = null;
                          {
                            index = k;
                            _xblockexpression_49 = "";
                          }
                          _builder.append(_xblockexpression_49);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                      String _xblockexpression_50 = null;
                      {
                        k++;
                        _xblockexpression_50 = "";
                      }
                      _builder.append(_xblockexpression_50);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
            }
          }
          _builder.append("        ");
          _builder.append("<!--");
          Map<Test, Map<EduTestSuperGenerator.TestOption, String>> mapPairOptions = new HashMap<Test, Map<EduTestSuperGenerator.TestOption, String>>();
          _builder.append("-->");
          _builder.newLineIfNotEmpty();
          {
            EList<Test> _tests_5 = ((MatchPairs)exercise).getTests();
            for(final Test test_5 : _tests_5) {
              {
                if (((this.options.get(exercise) != null) && (this.options.get(exercise).get(test_5) != null))) {
                  int k_1 = 0;
                  _builder.newLineIfNotEmpty();
                  int counter_5 = 0;
                  _builder.newLineIfNotEmpty();
                  _builder.append("<!--");
                  Map<EduTestSuperGenerator.TestOption, String> mapOptions = new HashMap<EduTestSuperGenerator.TestOption, String>();
                  _builder.append("-->");
                  _builder.newLineIfNotEmpty();
                  int rndIndex_2 = ModelManager.getRandomIndex(this.options.get(exercise).get(test_5));
                  _builder.newLineIfNotEmpty();
                  {
                    int _size_20 = this.options.get(exercise).get(test_5).size();
                    boolean _greaterThan_21 = (_size_20 > 0);
                    if (_greaterThan_21) {
                      {
                        List<EduTestSuperGenerator.TestOption> _get_19 = this.options.get(exercise).get(test_5).get(rndIndex_2);
                        for(final EduTestSuperGenerator.TestOption opt_6 : _get_19) {
                          List<String> textOptions_3 = new ArrayList<String>();
                          _builder.newLineIfNotEmpty();
                          {
                            Set<String> _keySet_7 = opt_6.text.keySet();
                            for(final String key_6 : _keySet_7) {
                              _builder.append("<!--");
                              String text_6 = opt_6.text.get(key_6).get(0);
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              {
                                boolean _contains_3 = textOptions_3.contains(text_6);
                                boolean _not_3 = (!_contains_3);
                                if (_not_3) {
                                  String _xblockexpression_51 = null;
                                  {
                                    counter_5++;
                                    _xblockexpression_51 = "";
                                  }
                                  _builder.append(_xblockexpression_51);
                                  _builder.newLineIfNotEmpty();
                                  String _xblockexpression_52 = null;
                                  {
                                    textOptions_3.add(text_6);
                                    _xblockexpression_52 = "";
                                  }
                                  _builder.append(_xblockexpression_52);
                                  _builder.newLineIfNotEmpty();
                                }
                              }
                            }
                          }
                          String pairOptions = "";
                          _builder.newLineIfNotEmpty();
                          {
                            for(final String textOption : textOptions_3) {
                              _builder.append("<!--");
                              String _pairOptions = pairOptions;
                              String _replace_8 = textOption.trim().replace("  ", " ").replace(" ", "+");
                              String _plus_30 = (_replace_8 + ".<br>");
                              String _plus_31 = pairOptions = (_pairOptions + _plus_30);
                              _builder.append(_plus_31);
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                          _builder.append(mapOptions.put(opt_6, pairOptions));
                          _builder.newLineIfNotEmpty();
                        }
                      }
                      _builder.append(mapPairOptions.put(test_5, mapOptions));
                      _builder.newLineIfNotEmpty();
                      {
                        if ((min_2 > counter_5)) {
                          String _xblockexpression_53 = null;
                          {
                            min_2 = counter_5;
                            _xblockexpression_53 = "";
                          }
                          _builder.append(_xblockexpression_53);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                      String _xblockexpression_54 = null;
                      {
                        k_1++;
                        _xblockexpression_54 = "";
                      }
                      _builder.append(_xblockexpression_54);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
            }
          }
          _builder.append("       \t");
          _builder.append("<!-- ");
          EClass answersClass_3 = null;
          _builder.append("-->");
          _builder.newLineIfNotEmpty();
          _builder.append("       \t");
          _builder.append("<!-- ");
          EClass statementClass_3 = null;
          _builder.append("-->");
          _builder.newLineIfNotEmpty();
          {
            for(final EClass root_3 : this.roots) {
              {
                EClass _answers_3 = ((MatchPairs)exercise).getConfig().getAnswers();
                boolean _tripleNotEquals_11 = (_answers_3 != null);
                if (_tripleNotEquals_11) {
                  {
                    boolean _equals_7 = ((MatchPairs)exercise).getConfig().getAnswers().getName().equals(root_3.getName());
                    if (_equals_7) {
                      String _xblockexpression_55 = null;
                      {
                        answersClass_3 = root_3;
                        _xblockexpression_55 = "";
                      }
                      _builder.append(_xblockexpression_55);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              {
                EClass _statement_3 = ((MatchPairs)exercise).getConfig().getStatement();
                boolean _tripleNotEquals_12 = (_statement_3 != null);
                if (_tripleNotEquals_12) {
                  {
                    boolean _equals_8 = ((MatchPairs)exercise).getConfig().getStatement().getName().equals(root_3.getName());
                    if (_equals_8) {
                      _builder.append("\t\t");
                      String _xblockexpression_56 = null;
                      {
                        statementClass_3 = root_3;
                        _xblockexpression_56 = "";
                      }
                      _builder.append(_xblockexpression_56, "\t\t");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
            }
          }
          {
            if ((answersClass_3 == null)) {
              _builder.append("\t\t");
              String _xblockexpression_57 = null;
              {
                int _size_21 = this.roots.size();
                int _minus = (_size_21 - 1);
                answersClass_3 = this.roots.get(_minus);
                _xblockexpression_57 = "";
              }
              _builder.append(_xblockexpression_57, "\t\t");
              _builder.newLineIfNotEmpty();
            }
          }
          {
            if ((statementClass_3 == null)) {
              {
                int _size_21 = this.roots.size();
                boolean _greaterThan_22 = (_size_21 > 1);
                if (_greaterThan_22) {
                  _builder.append("\t\t");
                  String _xblockexpression_58 = null;
                  {
                    statementClass_3 = this.roots.get(1);
                    _xblockexpression_58 = "";
                  }
                  _builder.append(_xblockexpression_58, "\t\t");
                  _builder.newLineIfNotEmpty();
                } else {
                  _builder.append("\t\t");
                  String _xblockexpression_59 = null;
                  {
                    statementClass_3 = this.roots.get(0);
                    _xblockexpression_59 = "";
                  }
                  _builder.append(_xblockexpression_59, "\t\t");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
          _builder.append("        ");
          int k_2 = 0;
          _builder.newLineIfNotEmpty();
          {
            EList<Test> _tests_6 = ((MatchPairs)exercise).getTests();
            for(final Test test_6 : _tests_6) {
              _builder.append("        ");
              _builder.append("<!--");
              EduTestSuperGenerator.TestOption opt_7 = null;
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              _builder.append("        ");
              int rndIndex_3 = ModelManager.getRandomIndex(this.options.get(exercise).get(test_6));
              _builder.newLineIfNotEmpty();
              {
                int _size_22 = this.options.get(exercise).get(test_6).size();
                boolean _greaterThan_23 = (_size_22 > 0);
                if (_greaterThan_23) {
                  {
                    if (((this.options.get(exercise).get(test_6) != null) && (this.options.get(exercise).get(test_6).get(rndIndex_3).size() > index))) {
                      _builder.append("        ");
                      _builder.append("<!--");
                      _builder.append(opt_7 = this.options.get(exercise).get(test_6).get(rndIndex_3).get(index), "        ");
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  {
                    if ((opt_7 != null)) {
                      _builder.append("        ");
                      _builder.append("<!--");
                      String seed = "";
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      _builder.append("        ");
                      _builder.append("<!--");
                      _builder.append(seed = opt_7.path, "        ");
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      _builder.append("        ");
                      int _lastIndexOf_1 = seed.lastIndexOf("/");
                      int _plus_32 = (_lastIndexOf_1 + 1);
                      String _substring_1 = seed.substring(0, _plus_32);
                      String _name_1 = answersClass_3.getName();
                      String _plus_33 = (_substring_1 + _name_1);
                      String _plus_34 = (_plus_33 + "_");
                      int _lastIndexOf_2 = seed.lastIndexOf("/");
                      int _plus_35 = (_lastIndexOf_2 + 1);
                      String _substring_2 = seed.substring(_plus_35, seed.length());
                      String _plus_36 = (_plus_34 + _substring_2);
                      _builder.append(seed = _plus_36, "        ");
                      _builder.newLineIfNotEmpty();
                      _builder.append("        ");
                      _builder.append("<!--");
                      File file_3 = new File(((this.projectPath + "/src-gen/html/") + seed));
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      {
                        if ((file_3.isFile() && file_3.exists())) {
                          _builder.append("        ");
                          String _xblockexpression_60 = null;
                          {
                            k_2++;
                            _xblockexpression_60 = "";
                          }
                          _builder.append(_xblockexpression_60, "        ");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      {
        if ((exercise instanceof MissingWords)) {
          {
            EList<Test> _tests_7 = ((MissingWords)exercise).getTests();
            for(final Test test_7 : _tests_7) {
              {
                for(final EClass root_4 : this.roots) {
                  {
                    EClass _answers_4 = ((MissingWords)exercise).getConfig().getAnswers();
                    boolean _tripleNotEquals_13 = (_answers_4 != null);
                    if (_tripleNotEquals_13) {
                      {
                        boolean _equals_9 = ((MissingWords)exercise).getConfig().getAnswers().getName().equals(root_4.getName());
                        if (_equals_9) {
                        }
                      }
                    }
                  }
                  {
                    EClass _statement_4 = ((MissingWords)exercise).getConfig().getStatement();
                    boolean _tripleNotEquals_14 = (_statement_4 != null);
                    if (_tripleNotEquals_14) {
                      {
                        boolean _equals_10 = ((MissingWords)exercise).getConfig().getStatement().getName().equals(root_4.getName());
                        if (_equals_10) {
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      {
        if ((exercise instanceof MultiChoiceText)) {
          _builder.append("        ");
          int min_3 = Integer.MAX_VALUE;
          _builder.newLineIfNotEmpty();
          {
            EList<Test> _tests_8 = ((MultiChoiceText)exercise).getTests();
            for(final Test test_8 : _tests_8) {
              {
                Set<EClass> _keySet_8 = this.diagrams.get(exercise).get(test_8).keySet();
                for(final EClass eclass_1 : _keySet_8) {
                  int counter_6 = this.diagrams.get(exercise).get(test_8).get(eclass_1).size();
                  _builder.newLineIfNotEmpty();
                  {
                    if ((min_3 > counter_6)) {
                      String _xblockexpression_61 = null;
                      {
                        min_3 = counter_6;
                        _xblockexpression_61 = "";
                      }
                      _builder.append(_xblockexpression_61);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
            }
          }
          _builder.append("       \t");
          _builder.append("<!-- ");
          EClass answersClass_4 = null;
          _builder.append("-->");
          _builder.newLineIfNotEmpty();
          _builder.append("       \t");
          _builder.append("<!-- ");
          EClass statementClass_4 = null;
          _builder.append("-->");
          _builder.newLineIfNotEmpty();
          {
            for(final EClass root_5 : this.roots) {
              {
                EClass _answers_5 = ((MultiChoiceText)exercise).getConfig().getAnswers();
                boolean _tripleNotEquals_15 = (_answers_5 != null);
                if (_tripleNotEquals_15) {
                  {
                    boolean _equals_11 = ((MultiChoiceText)exercise).getConfig().getAnswers().getName().equals(root_5.getName());
                    if (_equals_11) {
                      String _xblockexpression_62 = null;
                      {
                        answersClass_4 = root_5;
                        _xblockexpression_62 = "";
                      }
                      _builder.append(_xblockexpression_62);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              {
                EClass _statement_5 = ((MultiChoiceText)exercise).getConfig().getStatement();
                boolean _tripleNotEquals_16 = (_statement_5 != null);
                if (_tripleNotEquals_16) {
                  {
                    boolean _equals_12 = ((MultiChoiceText)exercise).getConfig().getStatement().getName().equals(root_5.getName());
                    if (_equals_12) {
                      String _xblockexpression_63 = null;
                      {
                        statementClass_4 = root_5;
                        _xblockexpression_63 = "";
                      }
                      _builder.append(_xblockexpression_63);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
            }
          }
          {
            if ((answersClass_4 == null)) {
              String _xblockexpression_64 = null;
              {
                int _size_23 = this.roots.size();
                int _minus = (_size_23 - 1);
                answersClass_4 = this.roots.get(_minus);
                _xblockexpression_64 = "";
              }
              _builder.append(_xblockexpression_64);
              _builder.newLineIfNotEmpty();
            }
          }
          {
            if ((statementClass_4 == null)) {
              {
                int _size_23 = this.roots.size();
                boolean _greaterThan_24 = (_size_23 > 1);
                if (_greaterThan_24) {
                  String _xblockexpression_65 = null;
                  {
                    statementClass_4 = this.roots.get(1);
                    _xblockexpression_65 = "";
                  }
                  _builder.append(_xblockexpression_65);
                  _builder.newLineIfNotEmpty();
                } else {
                  String _xblockexpression_66 = null;
                  {
                    statementClass_4 = this.roots.get(0);
                    _xblockexpression_66 = "";
                  }
                  _builder.append(_xblockexpression_66);
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
          {
            EList<Test> _tests_9 = ((MultiChoiceText)exercise).getTests();
            for(final Test test_9 : _tests_9) {
              String _xifexpression_6 = null;
              List<String> _get_20 = this.diagrams.get(exercise).get(test_9).get(statementClass_4);
              boolean _tripleNotEquals_17 = (_get_20 != null);
              if (_tripleNotEquals_17) {
                String _xifexpression_7 = null;
                int _size_24 = this.diagrams.get(exercise).get(test_9).get(statementClass_4).size();
                boolean _greaterThan_25 = (_size_24 > 0);
                if (_greaterThan_25) {
                  _xifexpression_7 = this.diagrams.get(exercise).get(test_9).get(statementClass_4).get(0);
                } else {
                  _xifexpression_7 = null;
                }
                _xifexpression_6 = _xifexpression_7;
              } else {
                _xifexpression_6 = null;
              }
              String statement_1 = _xifexpression_6;
              _builder.newLineIfNotEmpty();
              String _xifexpression_8 = null;
              List<String> _get_21 = this.diagrams.get(exercise).get(test_9).get(answersClass_4);
              boolean _tripleNotEquals_18 = (_get_21 != null);
              if (_tripleNotEquals_18) {
                String _xifexpression_9 = null;
                int _size_25 = this.diagrams.get(exercise).get(test_9).get(answersClass_4).size();
                boolean _greaterThan_26 = (_size_25 > 0);
                if (_greaterThan_26) {
                  _xifexpression_9 = this.diagrams.get(exercise).get(test_9).get(answersClass_4).get(0);
                }
                _xifexpression_8 = _xifexpression_9;
              }
              String solution_2 = _xifexpression_8;
              _builder.newLineIfNotEmpty();
              List<String> answers_2 = new ArrayList<String>();
              _builder.newLineIfNotEmpty();
              Set<String> answersSet_2 = new LinkedHashSet<String>();
              _builder.newLineIfNotEmpty();
              {
                if (((this.diagrams.get(exercise).get(test_9).get(answersClass_4) != null) && (this.diagrams.get(exercise).get(test_9).get(answersClass_4).size() > 0))) {
                  String _xblockexpression_67 = null;
                  {
                    answersSet_2.addAll(this.diagrams.get(exercise).get(test_9).get(answersClass_4));
                    _xblockexpression_67 = "";
                  }
                  _builder.append(_xblockexpression_67);
                  _builder.newLineIfNotEmpty();
                  String _xblockexpression_68 = null;
                  {
                    answers_2.addAll(answersSet_2);
                    _xblockexpression_68 = "";
                  }
                  _builder.append(_xblockexpression_68);
                  _builder.newLineIfNotEmpty();
                  String _xblockexpression_69 = null;
                  {
                    Collections.shuffle(answers_2);
                    _xblockexpression_69 = "";
                  }
                  _builder.append(_xblockexpression_69);
                  _builder.newLineIfNotEmpty();
                  _builder.append("<!--");
                  String _replace_9 = test_9.getSource().replace(".model", "");
                  String _plus_37 = ((this.projectPath + "/src-gen/html/diagrams/") + _replace_9);
                  String _plus_38 = (_plus_37 + "/");
                  String diagram_3 = (_plus_38 + statement_1);
                  _builder.append("-->");
                  _builder.newLineIfNotEmpty();
                  {
                    int _length_3 = diagram_3.length();
                    boolean _greaterThan_27 = (_length_3 > 0);
                    if (_greaterThan_27) {
                      _builder.append("<!--");
                      File file_4 = new File(diagram_3);
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      {
                        if ((file_4.isFile() && file_4.exists())) {
                          String _xblockexpression_70 = null;
                          {
                            int _indexOf_2 = diagram_3.indexOf("/src-gen/html/");
                            int _length_4 = "/src-gen/html/".length();
                            int _plus_39 = (_indexOf_2 + _length_4);
                            diagram_3 = diagram_3.substring(_plus_39, diagram_3.length());
                            _xblockexpression_70 = "";
                          }
                          _builder.append(_xblockexpression_70);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      _builder.append("</question-record></questions>");
      _builder.newLine();
      _builder.append("</data>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("<hotpot-config-file>");
      _builder.newLine();
      _builder.append("<jquiz>");
      _builder.newLine();
      _builder.append("<exercise-subtitle>Quiz</exercise-subtitle>");
      _builder.newLine();
      _builder.append("<instructions></instructions>");
      _builder.newLine();
      _builder.append("<guess-correct>Correct!</guess-correct>");
      _builder.newLine();
      _builder.append("<guess-incorrect>Sorry! Try again.</guess-incorrect>");
      _builder.newLine();
      _builder.append("<partly-incorrect>Your answer is partly wrong: </partly-incorrect>");
      _builder.newLine();
      _builder.append("<enter-a-guess>Please enter a guess.</enter-a-guess>");
      _builder.newLine();
      _builder.append("<next-correct-letter>Next correct letter in the answer: </next-correct-letter>");
      _builder.newLine();
      _builder.append("<correct-answers>Correct answers: </correct-answers>");
      _builder.newLine();
      _builder.append("<show-answer-caption>Show answer</show-answer-caption>");
      _builder.newLine();
      _builder.append("<include-hint>1</include-hint>");
      _builder.newLine();
      _builder.append("<include-show-answer>1</include-show-answer>");
      _builder.newLine();
      _builder.append("<next-ex-url>nextpage.htm</next-ex-url>");
      _builder.newLine();
      _builder.append("<send-email>0</send-email>");
      _builder.newLine();
      _builder.append("<continuous-scoring>1</continuous-scoring>");
      _builder.newLine();
      _builder.append("<show-correct-first-time>1</show-correct-first-time>");
      _builder.newLine();
      _builder.append("<shuffle-questions>0</shuffle-questions>");
      _builder.newLine();
      _builder.append("<shuffle-answers>0</shuffle-answers>");
      _builder.newLine();
      _builder.append("<show-limited-questions>0</show-limited-questions>");
      _builder.newLine();
      _builder.append("<questions-to-show>2</questions-to-show>");
      _builder.newLine();
      _builder.append("<short-answer-tries-on-hybrid-q>2</short-answer-tries-on-hybrid-q>");
      _builder.newLine();
      _builder.append("<separate-javascript-file>0</separate-javascript-file>");
      _builder.newLine();
      _builder.append("<case-sensitive>0</case-sensitive>");
      _builder.newLine();
      _builder.append("<include-keypad>0</include-keypad>");
      _builder.newLine();
      _builder.append("</jquiz>");
      _builder.newLine();
      _builder.newLine();
      _builder.append("<global>");
      _builder.newLine();
      _builder.append("<your-score-is>Your score is </your-score-is>");
      _builder.newLine();
      _builder.append("<correct-indicator>&amp;#x2714;</correct-indicator>");
      _builder.newLine();
      _builder.append("<incorrect-indicator>&amp;#x2718;</incorrect-indicator>");
      _builder.newLine();
      _builder.append("<correct-first-time>Questions answered correctly first time: </correct-first-time>");
      _builder.newLine();
      _builder.append("<completed-so-far>Questions completed so far: </completed-so-far>");
      _builder.newLine();
      _builder.append("<exercise-completed>You have completed the exercise.</exercise-completed>");
      _builder.newLine();
      _builder.append("<keypad-characters></keypad-characters>");
      _builder.newLine();
      _builder.append("<times-up>Your time is over!</times-up>");
      _builder.newLine();
      _builder.append("<next-ex-caption>=&amp;#x003E;</next-ex-caption>");
      _builder.newLine();
      _builder.append("<back-caption>&amp;#x003C;=</back-caption>");
      _builder.newLine();
      _builder.append("<contents-caption>Index</contents-caption>");
      _builder.newLine();
      _builder.append("<include-next-ex>1</include-next-ex>");
      _builder.newLine();
      _builder.append("<include-contents>1</include-contents>");
      _builder.newLine();
      _builder.append("<include-back>0</include-back>");
      _builder.newLine();
      _builder.append("<contents-url>contents.htm</contents-url>");
      _builder.newLine();
      _builder.append("<graphic-url></graphic-url>");
      _builder.newLine();
      _builder.append("<font-face>Geneva,Arial,sans-serif</font-face>");
      _builder.newLine();
      _builder.append("<font-size>medium</font-size>");
      _builder.newLine();
      _builder.append("<page-bg-color>#C0C0C0</page-bg-color>");
      _builder.newLine();
      _builder.append("<title-color>#000000</title-color>");
      _builder.newLine();
      _builder.append("<ex-bg-color>#FFFFFF</ex-bg-color>");
      _builder.newLine();
      _builder.append("<text-color>#000000</text-color>");
      _builder.newLine();
      _builder.append("<link-color>#0000FF</link-color>");
      _builder.newLine();
      _builder.append("<vlink-color>#0000CC</vlink-color>");
      _builder.newLine();
      _builder.append("<nav-bar-color>#000000</nav-bar-color>");
      _builder.newLine();
      _builder.append("<formmail-url>http://yourserver.com/cgi-bin/FormMail.pl</formmail-url>");
      _builder.newLine();
      _builder.append("<email>you@yourserver.com</email>");
      _builder.newLine();
      _builder.append("<name-please>Please enter your name:</name-please>");
      _builder.newLine();
      _builder.append("<user-string-1>one</user-string-1>");
      _builder.newLine();
      _builder.append("<user-string-2>two</user-string-2>");
      _builder.newLine();
      _builder.append("<user-string-3>three</user-string-3>");
      _builder.newLine();
      _builder.append("<header-code></header-code>");
      _builder.newLine();
      _builder.append("<correct-first-time>Questions answered correctly first time: </correct-first-time>");
      _builder.newLine();
      _builder.append("<check-caption>Check</check-caption>");
      _builder.newLine();
      _builder.append("<ok-caption>OK</ok-caption>");
      _builder.newLine();
      _builder.append("<next-q-caption>=&amp;#x003E;</next-q-caption>");
      _builder.newLine();
      _builder.append("<last-q-caption>&amp;#x003C;=</last-q-caption>");
      _builder.newLine();
      _builder.append("<hint-caption>Hint</hint-caption>");
      _builder.newLine();
      _builder.append("<show-all-questions-caption>Show all questions</show-all-questions-caption>");
      _builder.newLine();
      _builder.append("<show-one-by-one-caption>Show questions one by one</show-one-by-one-caption>");
      _builder.newLine();
      _builder.append("<show-also-correct>1</show-also-correct>");
      _builder.newLine();
      _builder.append("<process-for-rtl>0</process-for-rtl>");
      _builder.newLine();
      _builder.append("<include-scorm-12>0</include-scorm-12>");
      _builder.newLine();
      _builder.append("</global>");
      _builder.newLine();
      _builder.append("</hotpot-config-file>");
      _builder.newLine();
      _builder.append("</hotpot-jquiz-file>");
      _builder.newLine();
      _builder.newLine();
      return _builder;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
