// automatically generated by Xtext
grammar wodeledu.dsls.EduTest with org.eclipse.xtext.common.Terminals

//import "http://edutest/1.0" 
import "platform:/resource/wodeledu.models/model/EduTest.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/wodel.models/model/MutatorEnvironment.ecore" as mutatorenvironment

Program returns Program:
	{Program}
	'metamodel' metamodel=EString
	(config = ProgramConfiguration)?
	(exercises+=MutatorTests)+
;

MutatorTests returns MutatorTests:
	AlternativeResponse | MultiChoiceDiagram | MultiChoiceEmendation | MatchPairs | MissingWords | MultiChoiceText | AlternativeText | DragAndDropText
;

MarkedBlock returns MarkedBlock:
	{MarkedBlock}
	block=[mutatorenvironment::Block|ID] (solution?='=' 'solution')?
;

AlternativeResponse returns AlternativeResponse:
	'AlternativeResponse' (markedBlocks+=MarkedBlock (',' markedBlocks+=MarkedBlock)*)? '{'
		config = TestConfiguration
		(tests += Test)*
	'}'
;

MultiChoiceDiagram returns MultiChoiceDiagram:
	'MultiChoiceDiagram' (markedBlocks+=MarkedBlock (',' markedBlocks+=MarkedBlock)*)? '{'
		config = TestConfiguration
		(tests += Test)*
	'}'
;

MultiChoiceEmendation returns MultiChoiceEmendation:
	'MultiChoiceEmendation' (markedBlocks+=MarkedBlock (',' markedBlocks+=MarkedBlock)*)? '{'
		config = MultiChoiceEmConfig
		(tests += Test)*
	'}'
;

MatchPairs returns MatchPairs:
	'MatchPairs' (markedBlocks+=MarkedBlock (',' markedBlocks+=MarkedBlock)*)? '{'
		config = TextConfiguration
		(tests += Test)*
	'}'
;

MissingWords returns MissingWords:
	'MissingWords' (markedBlocks+=MarkedBlock (',' markedBlocks+=MarkedBlock)*)? '{'
		config = TestConfiguration
		(tests += Test)*
	'}'
;

MultiChoiceText returns MultiChoiceText:
	'MultiChoiceText' (markedBlocks+=MarkedBlock (',' markedBlocks+=MarkedBlock)*)? '{'
		config = TextConfiguration
		(tests += Test)*
	'}'
;

AlternativeText returns AlternativeText:
	'AlternativeTextResponse' (markedBlocks+=MarkedBlock (',' markedBlocks+=MarkedBlock)*)? '{'
		config = TextConfiguration
		(tests += Test)*
	'}'
;

DragAndDropText returns DragAndDropText:
	'DragAndDropText' (markedBlocks+=MarkedBlock (',' markedBlocks+=MarkedBlock)*)? '{'
		config = TestConfiguration
		(tests += Test)*
	'}'
;

ProgramConfiguration returns ProgramConfiguration:
	'navigation' '=' navigation=Navigation
;

TestConfiguration returns TestConfiguration:
	{TestConfiguration}
	'retry' '=' retry?=('yes' | 'no') (',' 'mode' '=' mode=Mode)? (',' 'statement' '=' statement = [ecore::EClass|ID] )? (',' 'answers' '=' answers = [ecore::EClass|ID] )?
;

MultiChoiceEmConfig returns MultiChoiceEmConfig:
	{MultiChoiceEmConfig}
	'retry' '=' retry?=('yes' | 'no') ',' 'weighted' '=' weighted?=('yes' | 'no') ',' 'penalty' '=' penalty=EDouble ',' 'order' '=' order=Order ',' 'mode' '=' mode=Mode (',' 'statement' '=' statement = [ecore::EClass|ID] )? (',' 'answers' '=' answers = [ecore::EClass|ID] )?
;

TextConfiguration returns TextConfiguration:
	{TextConfiguration}
	'retry' '=' retry?=('yes' | 'no') (',' 'mode' '=' mode=Mode)? (',' 'text' '=' identifier=EString)?
;

Test returns Test:
	'description' 'for' source=EString '=' question=EString  (expression?='%text' ('(' identifier=EString')')? )?
;

EString returns ecore::EString:
	STRING | ID;
	
EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	
enum Order returns Order:
	fixed = 'fixed' | random = 'random' | ascending = 'options-ascending' | descending = 'options-descending'
;

enum Mode returns Mode:
	radiobutton = 'radiobutton' | checkbox = 'checkbox'
;

enum Navigation returns Navigation:
	free = 'free' | locked = 'locked'
;
