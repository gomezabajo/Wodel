/*
 * generated by Xtext 2.13.0
 */
package wodeledu.dsls.generator.edutest

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import wodel.utils.manager.ModelManager
import edutest.Program
import java.net.URL
import org.eclipse.core.runtime.FileLocator
import org.eclipse.emf.ecore.EPackage
import org.eclipse.emf.ecore.EObject
import wodel.utils.exceptions.ModelNotFoundException
import org.osgi.framework.Bundle
import org.eclipse.core.runtime.Platform
import java.util.List
import wodeledu.dsls.generator.edutest.EduTestSuperGenerator.TestOption
import wodeledu.dsls.generator.edutest.EduTestSuperGenerator.Registry
import mutatorenvironment.MutatorEnvironment
import java.util.UUID
import java.util.AbstractMap.SimpleEntry
import java.util.HashMap
import edutest.Test
import java.util.Map
import java.util.ArrayList
import java.text.DecimalFormat
import java.util.Locale
import java.text.NumberFormat
import edutest.MatchPairs
import java.util.TreeMap
import edutest.MissingWords
import org.eclipse.emf.ecore.EClass
import edutest.MultiChoiceText
import edutest.AlternativeText
import edutest.DragAndDropText
import edutest.AlternativeResponse
import edutest.MultiChoiceDiagram
import edutest.MultiChoiceEmendation
import java.util.Collections
import java.util.Set
import edutest.Mode
import java.io.File
import edutest.MutatorTests
import java.util.LinkedHashSet
import wodel.utils.manager.ProjectUtils

/**
 * @author Pablo Gomez-Abajo - eduTest code generator.
 * 
 * Generates the javascript and html code for the
 * test exercises application
 *  
 */
class EduTestMoodleGenerator extends EduTestSuperGenerator {

	private String fileName
	private String pageName
	private List<EObject> blocks
	private List<EObject> mutators
	private List<EPackage> metamodel
	private List<EClass> roots

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		try {
			var i = 0;
			//loads the mutator model
			var xmiFileName = projectPath + "/" + outputFolder + "/" + resource.URI.lastSegment.replaceAll(".test", ".model")
			val Bundle bundle = Platform.getBundle("wodel.models")
	   		val URL fileURL = bundle.getEntry("/model/MutatorEnvironment.ecore")
	   		val String mutatorecore = FileLocator.resolve(fileURL).getFile()
			//val String mutatorecore = ModelManager.getWorkspaceAbsolutePath + "/" + project.name + "/resources/MutatorEnvironment.ecore";
			val List<EPackage> mutatorpackages = ModelManager.loadMetaModel(mutatorecore)
			//val EPackage epackage = mutatorpackages.get(0);
			//EPackage.Registry.INSTANCE.put(epackage.getNsURI(), epackage);
			val Resource mutatormodel = ModelManager.loadModel(mutatorpackages, xmiFileName)
			blocks = ModelManager.getObjectsOfType("Block", mutatormodel)
			mutators = ModelManager.getObjectsOfType("Mutator", mutatormodel)

			for (p : resource.allContents.toIterable.filter(Program)) {
				if (i == 0) {
					fileName = 'xml/' + resource.URI.lastSegment.replaceAll(".test", "") + '.xml'
					pageName = resource.URI.lastSegment.replaceAll(".test", "") + '.xml'
				} else {
					fileName = 'xml/' + resource.URI.lastSegment.replaceAll(".test", "") + i + '.xml'
					pageName = resource.URI.lastSegment.replaceAll(".test", "") + i + '.xml'
				}
				metamodel = new ArrayList<EPackage>()
				metamodel.addAll(ModelManager.loadMetaModel(p.metamodel))
				roots = new ArrayList<EClass>()
				roots.addAll(ModelManager.getRootEClasses(metamodel))
				fsa.generateFile(fileName, p.compile(resource))
				i++
			}
		}
		catch (ModelNotFoundException e) {
		}
	}

	def compile(Program program, Resource resource) '''
		«{buildOptions(program, resource, blocks, roots, program.class); ""}»
		<?xml version="1.0" encoding="UTF-8"?>
		<!--«var EObject main = null»-->
		«IF blocks.size() > 0»
		«{main = blocks.get(0); ""}»
		«ELSE»
		«IF mutators.size() > 0»
		«{main = mutators.get(0); ""}»
		«ENDIF»
		«ENDIF»
		<!--«var List<EPackage> packages = ModelManager.loadMetaModel((main.eContainer as MutatorEnvironment).definition.metamodel)»-->
		<!--«var String domain = packages.get(0).getNsURI().replace("http://", "")»-->
		<!--«domain = domain.substring(0, domain.lastIndexOf("/")).replace("/", "")»-->
		<quiz>
		  <question type="category">
		    <category>
		      <text>$course$/top/«domain»</text>
		    </category>
		    <info format="moodle_auto_format">
		      <text>Default category in the context of deterministic finite automata.</text>
		      <!--<text>Categoria por defecto para preguntas compartidas en el contexto Aut&#243;matas.</text>-->
		    </info>
		    <idnumber></idnumber>
		  </question>
		
		
    	«var int i = 0»
		«FOR MutatorTests exercise : program.exercises»
    	«IF exercise instanceof AlternativeResponse»
       	<!-- «var EClass answersClass = null»-->
       	<!-- «var EClass statementClass = null»-->
		«FOR EClass root : roots»
        «IF exercise.config.answers !== null»
		«IF exercise.config.answers.name.equals(root.name)»
		«{answersClass = root; ""}»
		«ENDIF»
		«ENDIF»
		«IF exercise.config.statement !== null»
		«IF exercise.config.statement.name.equals(root.name)»
		«{statementClass = root; ""}»
		«ENDIF»
		«ENDIF»
		«ENDFOR»
		«IF answersClass === null»
		«{answersClass = roots.get(roots.size() - 1); ""}»
		«ENDIF»
		«IF statementClass === null»
		«IF roots.size() > 1»
		«{statementClass = roots.get(1); ""}»
		«ELSE»
		«{statementClass = roots.get(0); ""}»
		«ENDIF»
		«ENDIF»
		«FOR Test test : exercise.tests»
        «var String solution = diagrams.get(exercise).get(test).get(answersClass) !== null ? diagrams.get(exercise).get(test).get(answersClass).size() > 0 ? diagrams.get(exercise).get(test).get(answersClass).get(0)»
        «var List<String> answers = new ArrayList<String>()»
        «var Set<String> answersSet = new LinkedHashSet<String>()»
        «IF diagrams.get(exercise).get(test).get(answersClass) !== null && diagrams.get(exercise).get(test).get(answersClass).size() > 0»
        «{answersSet.addAll(diagrams.get(exercise).get(test).get(answersClass)); ""}»
        «{answers.addAll(answersSet); ""}»
        «{Collections.shuffle(answers); ""}»
	    «IF answers.size() > 0»
        <!-- «var String diagram = answers.get(0)»-->
        <!--«var File file = new File(projectPath +  "/src-gen/html/diagrams/" + test.source.replace('.model', '') + "/" + diagram)»-->
        «IF file.isFile && file.exists()»
          <question type="truefalse">
		    <name>
		      <text><![CDATA[<p>«test.question.replace("\"", "'")»<br></p>]]></text>
		    </name>
		    <questiontext format="html">
		      <!-- «var UUID uuid = UUID.randomUUID()»-->
		      <text><![CDATA[<p>«test.question.replace("\"", "'")»<br></p><p><img src="@@PLUGINFILE@@/exercise_«uuid».png" alt="«test.question.replace("\"", "'")»" width="20%" height="20%" class="img-responsive atto_image_button_text-bottom"><br></p>]]></text>
		<file name="exercise_«uuid».png" path="/" encoding="base64">«getStringBase64("diagrams/" + test.source.replace('.model', '') + "/" + diagram)»</file>
		    </questiontext>
		    <generalfeedback format="html">
		      <text></text>
		    </generalfeedback>
		    <defaultgrade>1.0000000</defaultgrade>
		    <penalty>1.0000000</penalty>
		    <hidden>0</hidden>
		    <idnumber></idnumber>
		      «IF diagram.equals(solution.replace(".model", ".png"))»
		    <answer fraction="100" format="moodle_auto_format">
		      <text>true</text>
		      <feedback format="html">
		        <text></text>
		      </feedback>
		    </answer>
		    <answer fraction="0" format="moodle_auto_format">
		      <text>false</text>
		      <feedback format="html">
		        <text></text>
		      </feedback>
		    </answer>
		      «ELSE»
		    <answer fraction="0" format="moodle_auto_format">
		      <text>true</text>
		      <feedback format="html">
		        <text></text>
		      </feedback>
		    </answer>
		    <answer fraction="100" format="moodle_auto_format">
		      <text>false</text>
		      <feedback format="html">
		        <text></text>
		      </feedback>
		    </answer>
		      «ENDIF»
		  </question>
		«ENDIF»
		«ENDIF»
        «ENDIF»
    	«ENDFOR»
		«ENDIF»
    	«IF exercise instanceof MultiChoiceDiagram»
        «var int min = Integer.MAX_VALUE»
		«FOR test : exercise.tests»
           «FOR EClass eclass : diagrams.get(exercise).get(test).keySet()»
           «var int counter = diagrams.get(exercise).get(test).get(eclass).size()»
           «IF min > counter»
           «{min = counter; ""}»
           «ENDIF»
           «ENDFOR»
         «ENDFOR»
       	<!-- «var EClass answersClass = null»-->
       	<!-- «var EClass statementClass = null»-->
		«FOR EClass root : roots»
        «IF exercise.config.answers !== null»
		«IF exercise.config.answers.name.equals(root.name)»
		«{answersClass = root; ""}»
		«ENDIF»
		«ENDIF»
		«IF exercise.config.statement !== null»
		«IF exercise.config.statement.name.equals(root.name)»
		«{statementClass = root; ""}»
		«ENDIF»
		«ENDIF»
		«ENDFOR»
		«IF answersClass === null»
		«{answersClass = roots.get(roots.size() - 1); ""}»
		«ENDIF»
		«IF statementClass === null»
		«IF roots.size() > 1»
		«{statementClass = roots.get(1); ""}»
		«ELSE»
		«{statementClass = roots.get(0); ""}»
		«ENDIF»
		«ENDIF»
		«FOR test : exercise.tests»
        «var String statement = diagrams.get(exercise).get(test).get(statementClass) !== null ? diagrams.get(exercise).get(test).get(statementClass).size() > 0 ? diagrams.get(exercise).get(test).get(statementClass).get(0) : null : null»
        «var String solution = diagrams.get(exercise).get(test).get(answersClass) !== null ? diagrams.get(exercise).get(test).get(answersClass).size() > 0 ? diagrams.get(exercise).get(test).get(answersClass).get(0)»
        «var List<String> answers = new ArrayList<String>()»
        «var Set<String> answersSet = new LinkedHashSet<String>()»
        «IF diagrams.get(exercise).get(test).get(answersClass) !== null && diagrams.get(exercise).get(test).get(answersClass).size() > 0»
        «{answersSet.addAll(diagrams.get(exercise).get(test).get(answersClass)); ""}»
        «{answers.addAll(answersSet); ""}»
        «{Collections.shuffle(answers); ""}»
           <!--«var File file = new File(projectPath + "/src-gen/html/diagrams/" + test.source.replace('.model', '') + "/" + statement)»-->
           «IF file.isFile && file.exists()»
         <question type="multichoice">
           <name>
             <text>Question «i++»</text>
           </name>
           <!-- «var UUID uuid = UUID.randomUUID()»-->
           <questiontext format="html">
           «IF exercise.config.statement !== null && roots.size() > 1 && statementClass.name.equals(roots.get(1).name)»
           <text><![CDATA[<p>«test.question.replace("\"", "'")»<br></p><p><img src="@@PLUGINFILE@@/exercise_«uuid».png" alt="«test.question.replace("\"", "'")»" width="30%" height="30%" class="img-responsive atto_image_button_text-bottom"><br></p>]]></text>
           <file name="exercise_«uuid».png" path="/" encoding="base64">«getStringBase64("diagrams/" + test.source.replace('.model', '') + "/" + statement)»</file>
           «ELSE»
           <text><![CDATA[<p>«test.question.replace("\"", "'")»</p>]]></text>
           «ENDIF»
           </questiontext>
           <generalfeedback format="html">
           <text></text>
           </generalfeedback>
           <defaultgrade>1.0000000</defaultgrade>
           <penalty>1.0000000</penalty>
           <hidden>0</hidden>
           <idnumber></idnumber>
           «IF exercise.config.mode === Mode.RADIOBUTTON»
           <single>true</single>
           «ELSEIF exercise.config.mode === Mode.CHECKBOX»
           <single>false</single>
           «ENDIF»
           <shuffleanswers>true</shuffleanswers>
           <answernumbering>abc</answernumbering>
           <correctfeedback format="html">
           <!--<text>Respuesta correcta</text>-->
           <text>Right answer.</text>
           </correctfeedback>
           <partiallycorrectfeedback format="html">
           <!--<text>Respuesta parcialmente correcta.</text>-->
           <text>Partially right answer.</text>
           </partiallycorrectfeedback>
           <incorrectfeedback format="html">
           <!--<text>Respuesta incorrecta.</text>-->
           <text>Wrong answer.</text>
           </incorrectfeedback>
           <shownumcorrect/>
           <!--«var int counter = 0»-->
           <!--«var int solutions = 1»-->
           <!--«var double fraction = 100.0 / solutions»-->
           «{counter = 0; ""}»
           «FOR String diagram : answers»
           <!--«file = new File(projectPath + "/src-gen/html/diagrams/" + test.source.replace('.model', '') + "/" + diagram)»-->
           «IF file.isFile && file.exists()»
		   <!-- «uuid = UUID.randomUUID()»-->
		   «IF diagram.startsWith(answersClass.name) || diagram.contains("/" + answersClass.name) || diagram.contains("\\" + answersClass.name)»
           <!--«var boolean s = false»-->
           «FOR String sol : solutionsMap.get(exercise)»
           «IF diagram.startsWith(sol + "/") 
           || diagram.startsWith(sol + "\\")
           || diagram.contains(sol + "/" + answersClass.name + "_")
           || diagram.contains(sol + "\\" + answersClass.name + "_")»
           «{s = true; ""}»
           «ENDIF»
           «ENDFOR»
           «IF s == true»
           «IF counter < min - 1»
           «{counter++; ""}»
           «{solutions++; ""}»
           «ENDIF»
           «ENDIF»
           «IF s || diagram.equals(solution)»
          «IF 100 % solutions == 0»
          <answer fraction="«100/solutions»" format="html">
          «ELSE»
          <!--«var DecimalFormat formatter = (NumberFormat.getNumberInstance(new Locale("en", "UK")) as DecimalFormat)»-->
          «{formatter.applyPattern("###.#####"); ""}»
          <answer fraction="«formatter.format(fraction)»" format="html">
          «ENDIF»
           <!--«var String size = "60"»-->
           <text><![CDATA[<p><img src="@@PLUGINFILE@@/exercise_«uuid».png" alt="" width="«size»%" height="«size»%" role="presentation" class="img-responsive atto_image_button_text-bottom"><br></p>]]></text>
           <file name="exercise_«uuid».png" path="/" encoding="base64">«getStringBase64("diagrams/" + test.source.replace('.model', '') + "/" + diagram)»</file>
           <feedback format="html">
           <text></text>
           </feedback>
           </answer>
           «ELSE»
           «IF counter < min - 1»
           «{counter++; ""}»
           <!--«s = false»-->
           «FOR String sol : solutionsMap.get(exercise)»
           «IF diagram.startsWith(sol + "/") 
           || diagram.startsWith(sol + "\\")
           || diagram.contains(sol + "/" + answersClass.name + "_")
           || diagram.contains(sol + "\\" + answersClass.name + "_")»
           «{s = true; ""}»
           «ENDIF»
           «ENDFOR»
          «IF s || diagram.equals(solution)»
          «IF 100 % solutions == 0»
          <answer fraction="«100/solutions»" format="html">
          «ELSE»
          <!--«var DecimalFormat formatter = (NumberFormat.getNumberInstance(new Locale("en", "UK")) as DecimalFormat)»-->
          «{formatter.applyPattern("###.#####"); ""}»
          <answer fraction="«formatter.format(fraction)»" format="html">
          «ENDIF»
           «ELSE»
           <answer fraction="0" format="html">
           «ENDIF»
           <!--«var String size = "60"»-->
           <text><![CDATA[<p><img src="@@PLUGINFILE@@/exercise_«uuid».png" alt="" width="«size»%" height="«size»%" role="presentation" class="img-responsive atto_image_button_text-bottom"><br></p>]]></text>
           <file name="exercise_«uuid».png" path="/" encoding="base64">«getStringBase64("diagrams/" + test.source.replace('.model', '') + "/" + diagram)»</file>
           <feedback format="html">
           <text></text>
           </feedback>
           </answer>
           «ENDIF»
           «ENDIF»
           «ENDIF»
           «ENDIF»
           «ENDFOR»
         </question>
         «ENDIF»
         «ENDIF»
    	«ENDFOR»
		«ENDIF»
		«var Map<Test, List<SimpleEntry<String, Boolean>>> mapTextOptions = new HashMap<Test, List<SimpleEntry<String, Boolean>>>()»
		«IF exercise instanceof MultiChoiceEmendation»
        «var int min = Integer.MAX_VALUE»
		«FOR test : exercise.tests»
		«IF options.get(exercise) !== null && options.get(exercise).get(test) !== null»
          «var counter = 0»
          «var List<SimpleEntry<String, Boolean>> textOptions = new ArrayList<SimpleEntry<String, Boolean>>()»
          «FOR opt : options.get(exercise).get(test)»
          «FOR String key : opt.text.keySet()»
          «FOR String text : opt.text.get(key)»
          «var boolean found = false»
          «FOR SimpleEntry<String, Boolean> entry : textOptions»
          «IF entry.getKey().equals(text)»
          «{found = true; ""}»
          «ENDIF»
          «ENDFOR»
          «IF found == false»
          «{counter ++; ""}»
          «{textOptions.add(new SimpleEntry<String, Boolean>(text, false)); ""}»
          «ENDIF»
          «ENDFOR»
          «ENDFOR»
          «ENDFOR»
          «{mapTextOptions.put(test, textOptions); ""}»
          «IF min > counter»
          «{min = counter; ""}»
          «ENDIF»
        «ENDIF»
        «ENDFOR»
       	<!-- «var EClass answersClass = null»-->
       	<!-- «var EClass statementClass = null»-->
		«FOR EClass root : roots»
        «IF exercise.config.answers !== null»
		«IF exercise.config.answers.name.equals(root.name)»
		«{answersClass = root; ""}»
		«ENDIF»
		«ENDIF»
		«IF exercise.config.statement !== null»
		«IF exercise.config.statement.name.equals(root.name)»
		«{statementClass = root; ""}»
		«ENDIF»
		«ENDIF»
		«ENDFOR»
		«IF answersClass === null»
		«{answersClass = roots.get(roots.size() - 1); ""}»
		«ENDIF»
		«IF statementClass === null»
		«IF roots.size() > 1»
		«{statementClass = roots.get(1); ""}»
		«ELSE»
		«{statementClass = roots.get(0); ""}»
		«ENDIF»
		«ENDIF»
		«FOR test : exercise.tests»
		«IF options.get(exercise) !== null && options.get(exercise).get(test) !== null»
            <!--«var String diagram = ''»-->
			«IF (options.get(exercise).get(test) !== null)»
			«FOR opt : options.get(exercise).get(test)»
			«IF opt.text.size > 0»
			«IF opt.solution == true»
				<!--«diagram = opt.path»-->
			«ENDIF»
			«ENDIF»
			«ENDFOR»
			«ENDIF»
			«IF !diagram.equals('')»
			«{diagram = diagram.substring(0, diagram.lastIndexOf("/") + 1) + answersClass.name + "_" + diagram.substring(diagram.lastIndexOf("/") + 1, diagram.length)}»
           <!--«var File file = new File(projectPath +  "/src-gen/html/" + diagram)»-->
           «IF file.isFile && file.exists()»
        <question type="multichoice">
          <name>
             <text>Question «i++»</text>
          </name>
          <questiontext format="html">
            <!-- «var UUID uuid = UUID.randomUUID()»-->
			<text><![CDATA[<p>«test.question.replace("\"", "'")»<br><br><img src="@@PLUGINFILE@@/exercise_«uuid».png" alt="multiple choice" width="20%" height="20%" class="img-responsive atto_image_button_text-bottom"><br></p>]]></text>
            <file name="exercise_«uuid».png" path="/" encoding="base64">«getStringBase64(diagram)»</file>
          </questiontext>
          <generalfeedback format="html">
          <text></text>
          </generalfeedback>
          <defaultgrade>1.0000000</defaultgrade>
          <penalty>0.3333333</penalty>
          <hidden>0</hidden>
          <idnumber></idnumber>
          <single>false</single>
          <shuffleanswers>true</shuffleanswers>
          <answernumbering>abc«/*var char car = 'a'»«FOR opt : options.get(exercise).get(test)»«car++»«ENDFOR*/»</answernumbering>
          <correctfeedback format="html">
          <!--<text>Respuesta correcta</text>-->
          <text>Right answer.</text>
          </correctfeedback>
          <partiallycorrectfeedback format="html">
          <!--<text>Respuesta parcialmente correcta.</text>-->
          <text>Partially right answer.</text>
          </partiallycorrectfeedback>
          <incorrectfeedback format="html">
          <!--<text>Respuesta incorrecta.</text>-->
          <text>Wrong answer.</text>
          </incorrectfeedback>
          <shownumcorrect/>
          «var int solutions = 0»
          «IF (options.get(exercise).get(test) !== null)»
          «FOR opt : options.get(exercise).get(test)»
          «var List<String> textOptions = new ArrayList<String>()»
          «IF opt.text.size > 0»
          «IF opt.solution == true»
          «FOR String key : opt.text.keySet()»
          «FOR String text : opt.text.get(key)»
          «IF !textOptions.contains(text)»
                «{solutions ++; ""}»
                «{textOptions.add(text); ""}»
          «ENDIF»
          «ENDFOR»
          «ENDFOR»
          «ENDIF»
          «ENDIF»
          «ENDFOR»
          «FOR opt : options.get(exercise).get(test)»
          «IF opt.solution == true»
          «IF opt.text.size > 0»
          «FOR String key : opt.text.keySet()»
          «FOR String text : opt.text.get(key)»
          «var boolean found = false»
          «FOR SimpleEntry<String, Boolean> entry : mapTextOptions.get(test)»
          «IF entry.getKey().equals(text) && !entry.getValue()»
          «{found = true; ""}»
          «{entry.setValue(true); ""}»
          «ENDIF»
          «ENDFOR»
          «IF found == true»
          <!--«var double fraction = 100.0 / solutions»-->
          «IF 100 % solutions == 0»
          <answer fraction="«100/solutions»" format="html">
          <text><![CDATA[<p>«text.trim()»<br></p>]]></text>
          <feedback format="html">
          <text></text>
          </feedback>
          </answer>
          «ELSE»
          <!--«var DecimalFormat formatter = (NumberFormat.getNumberInstance(new Locale("en", "UK")) as DecimalFormat)»-->
          «{formatter.applyPattern("###.#####"); ""}»
          <answer fraction="«formatter.format(fraction)»" format="html">
          <text><![CDATA[<p>«text.trim()»<br></p>]]></text>
          <feedback format="html">
          <text></text>
          </feedback>
          </answer>
          «ENDIF»
          «ENDIF»
          «ENDFOR»
          «ENDFOR»
          «ENDIF»
          «ENDIF»
          «ENDFOR»
          «FOR opt : options.get(exercise).get(test)»
          «IF opt.solution == false»
          «var int counter = 0»
          «IF opt.text.size > 0»
          «FOR String key : opt.text.keySet()»
          «FOR String text : opt.text.get(key)»
          «var boolean found = false»
          «FOR SimpleEntry<String, Boolean> entry : mapTextOptions.get(test)»
          «IF entry.getKey().equals(text) && !entry.getValue()»
          «{found = true; ""}»
          «{entry.setValue(true); ""}»
          «ENDIF»
          «ENDFOR»
          «IF found == true»
          «IF counter < min - solutions»
          <answer fraction="0" format="html">
          <text><![CDATA[<p>«text.trim()»<br></p>]]></text>
          <feedback format="html">
          <text></text>
          </feedback>
          </answer>
          «{counter++; ""}»
          «ENDIF»
          «ENDIF»
          «ENDFOR»
          «ENDFOR»
          «ENDIF»
          «ENDIF»
          «ENDFOR»
          «FOR SimpleEntry<String, Boolean> entry : mapTextOptions.get(test)»
          «IF entry.getValue() == true»
          «ENDIF»
          «ENDFOR»
          «ENDIF»
        </question>
          «ENDIF»
          «ENDIF»
		  «ENDIF»
		«ENDFOR»
		«ENDIF»
		«IF exercise instanceof MatchPairs»
        «var int min = Integer.MAX_VALUE»
        «var int index = 0»
        «var int max = Integer.MIN_VALUE»
		«FOR test : exercise.tests»
		«IF options.get(exercise) !== null && options.get(exercise).get(test) !== null»
          «var List<String> textOptions = new ArrayList<String>()»
          «var int k = 0»
          «var int counter = 0»
          «FOR TestOption opt : options.get(exercise).get(test)»
          «FOR String key : opt.text.keySet()»
          «FOR String text : opt.text.get(key)»
          «IF !textOptions.contains(text)»
          «{counter++; ""}»
          «{textOptions.add(text); ""}»
          «ENDIF»
          «ENDFOR»
          «ENDFOR»
          «ENDFOR»
          «IF counter > max»
          «{max = counter; ""}»
          «{index = k; ""}»
          «ENDIF»
          «{k++; ""}»
        «ENDIF»
        «ENDFOR»
        <!--«var Map<Test, Map<TestOption, String>> mapPairOptions = new HashMap<Test, Map<TestOption, String>>()»-->
		«FOR test : exercise.tests»
		«IF options.get(exercise) !== null && options.get(exercise).get(test) !== null»
          «var int k = 0»
          «var int counter = 0»
          <!--«var Map<TestOption, String> mapOptions = new HashMap<TestOption, String>()»-->
          «FOR TestOption opt : options.get(exercise).get(test)»
          «var List<String> textOptions = new ArrayList<String>()»
          «FOR String key : opt.text.keySet()»
          <!--«var String text = opt.text.get(key).get(0)»-->
          «IF !textOptions.contains(text)»
          «{counter++; ""}»
          «{textOptions.add(text); ""}»
          «ENDIF»
          «ENDFOR»
          «var String pairOptions = ""»
          «FOR String textOption : textOptions»
          <!--«pairOptions += textOption.trim() + ".<br>"»-->
          «ENDFOR»
          «{mapOptions.put(opt, pairOptions)}»
          «ENDFOR»
          «{mapPairOptions.put(test, mapOptions)}»
          «IF min > counter»
          «{min = counter; ""}»
          «ENDIF»
          «{k++; ""}»
        «ENDIF»
        «ENDFOR»
       	<!-- «var EClass answersClass = null»-->
       	<!-- «var EClass statementClass = null»-->
		«FOR EClass root : roots»
        «IF exercise.config.answers !== null»
		«IF exercise.config.answers.name.equals(root.name)»
		«{answersClass = root; ""}»
		«ENDIF»
		«ENDIF»
		«IF exercise.config.statement !== null»
		«IF exercise.config.statement.name.equals(root.name)»
		«{statementClass = root; ""}»
		«ENDIF»
		«ENDIF»
		«ENDFOR»
		«IF answersClass === null»
		«{answersClass = roots.get(roots.size() - 1); ""}»
		«ENDIF»
		«IF statementClass === null»
		«IF roots.size() > 1»
		«{statementClass = roots.get(1); ""}»
		«ELSE»
		«{statementClass = roots.get(0); ""}»
		«ENDIF»
		«ENDIF»
        «var int k = 0»
        «FOR Test test : exercise.tests»
        <!--«var TestOption opt = null»-->
        «IF (options.get(exercise).get(test) !== null && options.get(exercise).get(test).size() > index)»
        <!--«opt = options.get(exercise).get(test).get(index)»-->
        «ENDIF»
        «IF opt !== null»
        <!--«var String seed = ''»-->
        <!--«seed = opt.path»-->
        «{seed = seed.substring(0, seed.lastIndexOf("/") + 1) + answersClass.name + "_" + seed.substring(seed.lastIndexOf("/") + 1, seed.length)}»
        <!--«var File file = new File(projectPath +  "/src-gen/html/" + seed)»-->
        «IF file.isFile && file.exists()»
        <question type="matching">
          <name>
             <text>Question «i++»</text>
          </name>
          <questiontext format="html">
          <!--«var String question = test.question.replace("\"", "'")»-->
          <!-- «var UUID uuid = UUID.randomUUID()»-->
          <text><![CDATA[<p>«question.trim()»<br><img src="@@PLUGINFILE@@/exercise_«uuid».png" alt="" width="20%" height="20%" role="presentation" class="img-responsive atto_image_button_text-bottom"><br></p>]]></text>
          <!--<text><![CDATA[<p>Empareja cada uno de los enunciados de la izquierda con la opci&#243;n correcta de la derecha<br><img src="@@PLUGINFILE@@/exercise_«uuid».png" alt="" width="20%" height="20%" role="presentation" class="img-responsive atto_image_button_text-bottom"><br></p>]]></text>-->
          <file name="exercise_«uuid».png" path="/" encoding="base64">«getStringBase64(seed)»</file>
          </questiontext>
          <generalfeedback format="html">
          <text></text>
          </generalfeedback>
          <defaultgrade>1.0000000</defaultgrade>
          <penalty>0.3333333</penalty>
          <hidden>0</hidden>
          <idnumber></idnumber>
          <shuffleanswers>true</shuffleanswers>
          <correctfeedback format="html">
          <!--<text>Respuesta correcta</text>-->
          <text>Right answer.</text>
          </correctfeedback>
          <partiallycorrectfeedback format="html">
          <!--<text>Respuesta parcialmente correcta.</text>-->
          <text>Partially right answer.</text>
          </partiallycorrectfeedback>
          <incorrectfeedback format="html">
          <!--<text>Respuesta incorrecta.</text>-->
          <text>Wrong answer.</text>
          </incorrectfeedback>
          <shownumcorrect/>
          <!--«var TreeMap<Integer, SimpleEntry<String, String>> entries = new TreeMap<Integer, SimpleEntry<String, String>>()»-->
          <!--«var int keyCounter = 0»-->
          «FOR TestOption op : options.get(exercise).get(test)»
            «var String key = getText((exercise as MatchPairs).config.identifier, op.entry.getKey().getURI().toFileString(), resource)»
            «IF key.length() <= 127»
            «var boolean found = false»
            «FOR int entryKey : entries.keySet()»
            «var SimpleEntry<String, String> entry = entries.get(entryKey)»
            «IF entry.getKey().equals(key)»
            «{found = true; ""}»
            «ENDIF»
            «ENDFOR»
            «IF found == false»
            «var SimpleEntry<String, String> entry = new SimpleEntry<String, String>(key, mapPairOptions.get(test).get(op).trim())»
            «{entries.put(keyCounter++, entry); ""}»
            «ENDIF»
            «ENDIF»
          «ENDFOR»
          «var int counter = 0»
          «FOR int key : entries.keySet()»
          «IF counter < min»
          «var SimpleEntry<String, String> entry = entries.get(key)»
          <subquestion format="html">
			<text><![CDATA[<p>«entry.getKey()»<br></p>]]></text>
          <answer>
          <text><![CDATA[<p>«entry.getValue()»<br></p>]]></text>
          </answer>
          </subquestion>
          «{counter++; ""}»
          «ENDIF»
          «ENDFOR»
          «ENDIF»
        </question>
        «{k++; ""}»
          «ENDIF»
          «ENDFOR»
        «ENDIF»
        «IF exercise instanceof MissingWords»
        «FOR test : exercise.tests»
        <!-- «var int k = 0»-->
        <!-- «var int solution = 0»-->
        <!-- «var String textWithGaps = ""»-->
        <!-- «var TestOption op = null»-->
        «FOR TestOption opt : options.get(exercise).get(test)»
        «IF opt.path.contains(exercise.markedBlocks.get(0).block.name)»
        <!--«op = opt»-->
        «ENDIF»
        «ENDFOR»
       	<!-- «var EClass answersClass = null»-->
       	<!-- «var EClass statementClass = null»-->
		«FOR EClass root : roots»
        «IF exercise.config.answers !== null»
		«IF exercise.config.answers.name.equals(root.name)»
		«{answersClass = root; ""}»
		«ENDIF»
		«ENDIF»
		«IF exercise.config.statement !== null»
		«IF exercise.config.statement.name.equals(root.name)»
		«{statementClass = root; ""}»
		«ENDIF»
		«ENDIF»
		«ENDFOR»
		«IF answersClass === null»
		«{answersClass = roots.get(roots.size() - 1); ""}»
		«ENDIF»
		«IF statementClass === null»
		«IF roots.size() > 1»
		«{statementClass = roots.get(1); ""}»
		«ELSE»
		«{statementClass = roots.get(0); ""}»
		«ENDIF»
		«ENDIF»
        «IF op !== null»
        <!-- «var String diagram = op.path»-->
        <!-- «var UUID uuid = UUID.randomUUID()»-->
        «FOR String key : op.options.keySet()»
		<!-- «var int tmp = k»-->
        <!--«var String opWithGaps = ""»-->
        «FOR String text : op.text.get(key)»
        <!--«k++»-->
        <!--«opWithGaps += text + "%" + k + " "»-->
        «ENDFOR»
        <!-- «k = tmp»-->
        <!-- «var List<ComparableSimpleEntry<String, SimpleEntry<EClass, SimpleEntry<String, SimpleEntry<Integer, Boolean>>>>> entries = op.options.get(key)»-->
        «FOR ComparableSimpleEntry<String, SimpleEntry<EClass, SimpleEntry<String, SimpleEntry<Integer, Boolean>>>> entry : entries»
        <!--«solution++»-->
        «IF entry.getValue().getValue().getValue().getValue() == true»
        <!-- «k++»-->
        <!-- «opWithGaps = opWithGaps.replace("%" + k, "[[" + solution + "]]")»-->
        «ENDIF»
        «ENDFOR»
        <!-- «k++»-->
        <!-- «opWithGaps = opWithGaps.replace(" %" + k, "")»-->
		<!-- «textWithGaps += opWithGaps.trim() + ".<br>"»-->
        «ENDFOR»
		«{diagram = diagram.substring(0, diagram.lastIndexOf("/") + 1) + answersClass.name + "_" + diagram.substring(diagram.lastIndexOf("/") + 1, diagram.length)}»
        <!--«var File file = new File(projectPath + "/src-gen/html/" + diagram)»-->
        «IF file.isFile && file.exists()»
        <question type="gapselect">
          <name>
             <text><![CDATA[<p>«test.question.replace("\"", "'")»<br></p>]]></text>
          </name>
          <questiontext format="html">
          <text><![CDATA[<p>«test.question.replace("\"", "'")»<br><img src="@@PLUGINFILE@@/exercise_«uuid».png" alt="" width="20%" height="20%" role="presentation" class="img-responsive atto_image_button_text-bottom"><br><br></p><p>«textWithGaps.trim()»<br></p>]]></text>
          <file name="exercise_«uuid».png" path="/" encoding="base64">«getStringBase64(diagram)»</file>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <shuffleanswers>0</shuffleanswers>
    <correctfeedback format="html">
      <!--<text>Respuesta correcta</text>-->
      <text>Right answer.</text>
    </correctfeedback>
    <partiallycorrectfeedback format="html">
      <!--<text>Respuesta parcialmente correcta.</text>-->
      <text>Partially right answer.</text>
    </partiallycorrectfeedback>
    <incorrectfeedback format="html">
      <!--<text>Respuesta incorrecta.</text>-->
      <text>Wrong answer.</text>
    </incorrectfeedback>
    <shownumcorrect/>
        «FOR String key : op.options.keySet()»
        <!-- «var List<ComparableSimpleEntry<String, SimpleEntry<EClass, SimpleEntry<String, SimpleEntry<Integer, Boolean>>>>> entries = op.options.get(key)»-->
        «FOR ComparableSimpleEntry<String, SimpleEntry<EClass, SimpleEntry<String, SimpleEntry<Integer, Boolean>>>> entry : entries»
        <selectoption>
        <text>«entry.getKey().trim()»</text>
        <group>«entry.getValue().getValue().getValue().getKey()»</group>
        </selectoption>
        «ENDFOR»
        «ENDFOR»
        </question>
        «ENDIF»
        «ENDIF»
	    «ENDFOR»
        «ENDIF»
    	«IF exercise instanceof MultiChoiceText»
        «var int min = Integer.MAX_VALUE»
		«FOR test : exercise.tests»
           «FOR EClass eclass : diagrams.get(exercise).get(test).keySet()»
           «var int counter = diagrams.get(exercise).get(test).get(eclass).size()»
           «IF min > counter»
           «{min = counter; ""}»
           «ENDIF»
           «ENDFOR»
         «ENDFOR»
       	<!-- «var EClass answersClass = null»-->
       	<!-- «var EClass statementClass = null»-->
		«FOR EClass root : roots»
        «IF exercise.config.answers !== null»
		«IF exercise.config.answers.name.equals(root.name)»
		«{answersClass = root; ""}»
		«ENDIF»
		«ENDIF»
		«IF exercise.config.statement !== null»
		«IF exercise.config.statement.name.equals(root.name)»
		«{statementClass = root; ""}»
		«ENDIF»
		«ENDIF»
		«ENDFOR»
		«IF answersClass === null»
		«{answersClass = roots.get(roots.size() - 1); ""}»
		«ENDIF»
		«IF statementClass === null»
		«IF roots.size() > 1»
		«{statementClass = roots.get(1); ""}»
		«ELSE»
		«{statementClass = roots.get(0); ""}»
		«ENDIF»
		«ENDIF»
		«FOR test : exercise.tests»
        «var String statement = diagrams.get(exercise).get(test).get(statementClass) !== null ? diagrams.get(exercise).get(test).get(statementClass).size() > 0 ? diagrams.get(exercise).get(test).get(statementClass).get(0) : null : null»
        «var String solution = diagrams.get(exercise).get(test).get(answersClass) !== null ? diagrams.get(exercise).get(test).get(answersClass).size() > 0 ? diagrams.get(exercise).get(test).get(answersClass).get(0)»
        «var List<String> answers = new ArrayList<String>()»
        «var Set<String> answersSet = new LinkedHashSet<String>()»
        «IF diagrams.get(exercise).get(test).get(answersClass) !== null && diagrams.get(exercise).get(test).get(answersClass).size() > 0»
        «{answersSet.addAll(diagrams.get(exercise).get(test).get(answersClass)); ""}»
        «{answers.addAll(answersSet); ""}»
        «{Collections.shuffle(answers); ""}»
        <!--«var File file = new File(projectPath + "/src-gen/html/diagrams/" + test.source.replace('.model', '') + "/" + statement)»-->
        «IF file.isFile && file.exists()»
         <question type="multichoice">
           <name>
             <text>Question «i++»</text>
           </name>
           <questiontext format="html">
		   <!-- «var UUID uuid = UUID.randomUUID()»-->
           <text><![CDATA[<p>«test.question.replace("\"", "'")»<br><img src="@@PLUGINFILE@@/exercise_«uuid».png" alt="" width="30%" height="30%" role="presentation" class="img-responsive atto_image_button_text-bottom"><br></p>]]></text>
           <file name="exercise_«uuid».png" path="/" encoding="base64">«getStringBase64("diagrams/" + test.source.replace('.model', '') + "/" + statement)»</file>
           </questiontext>
           <generalfeedback format="html">
           <text></text>
           </generalfeedback>
           <defaultgrade>1.0000000</defaultgrade>
           <penalty>1.0000000</penalty>
           <hidden>0</hidden>
           <idnumber></idnumber>
           «IF exercise.config.mode === Mode.RADIOBUTTON»
           <single>true</single>
           «ELSEIF exercise.config.mode === Mode.CHECKBOX»
           <single>false</single>
           «ENDIF»
           <shuffleanswers>true</shuffleanswers>
           <answernumbering>abc</answernumbering>
           <correctfeedback format="html">
           <!--<text>Respuesta correcta</text>-->
           <text>Right answer.</text>
           </correctfeedback>
           <partiallycorrectfeedback format="html">
           <!--<text>Respuesta parcialmente correcta.</text>-->
           <text>Partially right answer.</text>
           </partiallycorrectfeedback>
           <incorrectfeedback format="html">
           <!--<text>Respuesta incorrecta.</text>-->
           <text>Wrong answer.</text>
           </incorrectfeedback>
           <shownumcorrect/>
           <!--«var int counter = 0»-->
           <!--«var int solutions = 1»-->
           <!--«var double fraction = 100.0 / solutions»-->
           «{counter = 0; ""}»
           «FOR String diagram : answers»
           <!--«var boolean s = false»-->
           «FOR String sol : solutionsMap.get(exercise)»
           «IF diagram.startsWith(sol + "/") 
           || diagram.startsWith(sol + "\\")
           || diagram.contains(sol + "/" + answersClass.name + "_")
           || diagram.contains(sol + "\\" + answersClass.name + "_")»
           «{s = true; ""}»
           «ENDIF»
           «ENDFOR»
           «IF s == true»
           «IF counter < min - 1»
           «{counter++; ""}»
           «{solutions++; ""}»
           «ENDIF»
           «ENDIF»
		   <!-- «uuid = UUID.randomUUID()»-->
           «IF s || diagram.equals(solution)»
           «var String text = getText((exercise as MultiChoiceText).config.identifier, ModelManager.getMetaModelPath() + "/" + test.source, resource)»
          «IF 100 % solutions == 0»
          <answer fraction="«100/solutions»" format="html">
          «ELSE»
          <!--«var DecimalFormat formatter = (NumberFormat.getNumberInstance(new Locale("en", "UK")) as DecimalFormat)»-->
          «{formatter.applyPattern("###.#####"); ""}»
          <answer fraction="«formatter.format(fraction)»" format="html">
          «ENDIF»
           <text><![CDATA[<p>«text»<br></p>]]></text>
           <!--<text><![CDATA[<p>«text»<img src="@@PLUGINFILE@@/exercise_«uuid».png" alt="" width="15%" height="15%" role="presentation" class="img-responsive atto_image_button_text-bottom"><br></p>]]></text>
           <file name="exercise_«uuid».png" path="/" encoding="base64">«getStringBase64("diagrams/" + test.source.replace('.model', '') + "/" + diagram)»</file>-->
           <feedback format="html">
           <text></text>
           </feedback>
           </answer>
           «ELSE»
           «IF counter < min - 1»
           «{counter++; ""}»
           «var String text = getText((exercise as MultiChoiceText).config.identifier, ModelManager.getOutputPath() + "/" + test.source.replace('.model', '') + "/" + diagram.replace(answersClass.name + "_", "").replace(answersClass.name + "_", "").replace(".png", ".model"), resource)»
           <answer fraction="0" format="html">
           <text><![CDATA[<p>«text»<br></p>]]></text>
           <!--<text><![CDATA[<p>«text»<img src="@@PLUGINFILE@@/exercise_«uuid».png" alt="" width="15%" height="15%" role="presentation" class="img-responsive atto_image_button_text-bottom"><br></p>]]></text>
           <file name="exercise_«uuid».png" path="/" encoding="base64">«getStringBase64("diagrams/" + test.source.replace('.model', '') + "/" + diagram)»</file>-->
           <feedback format="html">
           <text></text>
           </feedback>
           </answer>
           «ENDIF»
           «ENDIF»
        «ENDFOR»
        «ENDIF»
         </question>
        «ENDIF»
    	«ENDFOR»
		«ENDIF»
    	«IF exercise instanceof AlternativeText»
       	<!-- «var EClass answersClass = null»-->
       	<!-- «var EClass statementClass = null»-->
		«FOR EClass root : roots»
        «IF exercise.config.answers !== null»
		«IF exercise.config.answers.name.equals(root.name)»
		«{answersClass = root; ""}»
		«ENDIF»
		«ENDIF»
		«IF exercise.config.statement !== null»
		«IF exercise.config.statement.name.equals(root.name)»
		«{statementClass = root; ""}»
		«ENDIF»
		«ENDIF»
		«ENDFOR»
		«IF answersClass === null»
		«{answersClass = roots.get(roots.size() - 1); ""}»
		«ENDIF»
		«IF statementClass === null»
		«IF roots.size() > 1»
		«{statementClass = roots.get(1); ""}»
		«ELSE»
		«{statementClass = roots.get(0); ""}»
		«ENDIF»
		«ENDIF»
		«FOR test : exercise.tests»
        «var String solution = diagrams.get(exercise).get(test).get(answersClass) !== null ? diagrams.get(exercise).get(test).get(answersClass).size() > 0 ? diagrams.get(exercise).get(test).get(answersClass).get(0)»
        «var List<String> answers = new ArrayList<String>()»
        «var Set<String> answersSet = new LinkedHashSet<String>()»
        «IF diagrams.get(exercise).get(test).get(answersClass) !== null && diagrams.get(exercise).get(test).get(answersClass).size() > 0»
        «{answersSet.addAll(diagrams.get(exercise).get(test).get(answersClass)); ""}»
        «{answers.addAll(answersSet); ""}»
        «{Collections.shuffle(answers); ""}»
        <!-- «var String diagram = answers.get(0)»-->
        <!--«var File file = new File(projectPath + "/src-gen/html/diagrams/" + test.source.replace('.model', '') + "/" + diagram)»-->
        «IF file.isFile && file.exists()»
          <question type="truefalse">
		    <name>
		      <text><![CDATA[<p>«test.question.replace("\"", "'")»<br></p>]]></text>
		    </name>
		    <questiontext format="html">
		      <!-- «var UUID uuid = UUID.randomUUID()»-->
		      <!-- «var String text = ""»-->
		      «/*IF diagram.equals(test.source.replace('.model', '.png'))*/»
		      <!--«text = getText((exercise as AlternativeText).config.identifier, ModelManager.getMetaModelPath() + "/" + test.source, resource)»-->
		      «/*ELSE*/»
		      <!--«/*text = getText((exercise as AlternativeText).config.identifier, ModelManager.getOutputPath() + "/" + test.source.replace('.model', '') + "/" + diagram.replace(".png", ".model"), resource)*/»-->
		      «/*ENDIF*/»
		      <text><![CDATA[<p>«test.question.replace("\"", "'")»<br></p><p><img src="@@PLUGINFILE@@/exercise_«uuid».png" alt="«test.question.replace("\"", "'")»" width="20%" height="20%" class="img-responsive atto_image_button_text-bottom"><br></p><p>«text»<br></p>]]></text>
			  <file name="exercise_«uuid».png" path="/" encoding="base64">«getStringBase64("diagrams/" + test.source.replace('.model', '') + "/" + diagram)»</file>
		    </questiontext>
		    <generalfeedback format="html">
		      <text></text>
		    </generalfeedback>
		    <defaultgrade>1.0000000</defaultgrade>
		    <penalty>1.0000000</penalty>
		    <hidden>0</hidden>
		    <idnumber></idnumber>
		      «IF diagram.equals(solution.replace(".model", ".png"))»
		    <answer fraction="100" format="moodle_auto_format">
		      <text>true</text>
		      <feedback format="html">
		        <text></text>
		      </feedback>
		    </answer>
		    <answer fraction="0" format="moodle_auto_format">
		      <text>false</text>
		      <feedback format="html">
		        <text></text>
		      </feedback>
		    </answer>
		      «ELSE»
		    <answer fraction="0" format="moodle_auto_format">
		      <text>true</text>
		      <feedback format="html">
		        <text></text>
		      </feedback>
		    </answer>
		    <answer fraction="100" format="moodle_auto_format">
		      <text>false</text>
		      <feedback format="html">
		        <text></text>
		      </feedback>
		    </answer>
		      «ENDIF»
		  </question>
		«ENDIF»
		«ENDIF»
    	«ENDFOR»
		«ENDIF»
        «IF exercise instanceof DragAndDropText»
        <!-- «var Map<Test, Map<String, Map<String, Map<String, Integer>>>> groups = new HashMap<Test, Map<String, Map<String, Map<String, Integer>>>>()»-->
        <!-- «var Map<String, Integer> indexes = new TreeMap<String, Integer>()»-->
       	<!-- «var EClass answersClass = null»-->
       	<!-- «var EClass statementClass = null»-->
		«FOR EClass root : roots»
        «IF exercise.config.answers !== null»
		«IF exercise.config.answers.name.equals(root.name)»
		«{answersClass = root; ""}»
		«ENDIF»
		«ENDIF»
		«IF exercise.config.statement !== null»
		«IF exercise.config.statement.name.equals(root.name)»
		«{statementClass = root; ""}»
		«ENDIF»
		«ENDIF»
		«ENDFOR»
		«IF answersClass === null»
		«{answersClass = roots.get(roots.size() - 1); ""}»
		«ENDIF»
		«IF statementClass === null»
		«IF roots.size() > 1»
		«{statementClass = roots.get(1); ""}»
		«ELSE»
		«{statementClass = roots.get(0); ""}»
		«ENDIF»
		«ENDIF»
        «FOR Test test : exercise.tests»
        <!-- «var int k = 0»-->
        <!-- «var String textWithGaps = ""»-->
        <!-- «var Map<String, Map<String, Map<String, Integer>>> group = new TreeMap<String, Map<String, Map<String, Integer>>>()» -->
        <!-- «var TestOption op = null»-->
        «FOR TestOption opt : options.get(exercise).get(test)»
        «IF opt.path.contains(exercise.markedBlocks.get(0).block.name)»
        <!--«op = opt»-->
        «ENDIF»
        «ENDFOR»
        «IF op !== null»
        <!-- «var String diagram = op.path»-->
        <!-- «var UUID uuid = UUID.randomUUID()»-->
        <!-- «var Map<String, Integer> solutions = new HashMap<String, Integer>()»-->
		<!-- «var int tmp = k»-->
        <!--«var String opWithGaps = ""»-->
        «FOR String key : op.options.keySet()»
        «FOR String text : op.text.get(key)»
        <!--«k++»-->
        <!--«opWithGaps += text + "%" + k + " "»-->
        «ENDFOR»
        <!--«opWithGaps = opWithGaps.trim() + ".<br>"»-->
        «ENDFOR»
        «FOR String key : op.sortedOptions.keySet()»
        <!-- «var List<ComparableSimpleEntry<String, SimpleEntry<EClass, SimpleEntry<String, SimpleEntry<Integer, Boolean>>>>> entries = op.sortedOptions.get(key)»-->
        «FOR ComparableSimpleEntry<String, SimpleEntry<EClass, SimpleEntry<String, SimpleEntry<Integer, Boolean>>>> entry : entries»
        <!-- «var Map<String, Map<String, Integer>> value = null» -->
        «FOR String typeName : group.keySet()»
        «IF typeName.equals(entry.getValue().getKey().getName())»
        <!-- «value = group.get(typeName)» -->
        «ENDIF»
        «ENDFOR»
        «IF value === null»
        <!-- «value = new TreeMap<String, Map<String, Integer>>()» -->
        <!-- «group.put(entry.getValue().getKey().getName(), value)» -->
        «ENDIF»
        «IF !indexes.containsKey(entry.getKey())»
        <!-- «indexes.put(entry.getKey(), 0)»-->
        «ENDIF»
        <!-- «var Map<String, Integer> localIndexes = null»-->
        «IF !value.containsKey(entry.getValue().getValue().getKey())»
		<!-- «localIndexes = new TreeMap<String, Integer>()»-->
		«ELSE»
		<!-- «localIndexes = value.get(entry.getValue().getValue().getKey())»-->
		«ENDIF»
        <!-- «localIndexes.put(entry.getKey(), 0)»-->
        <!--«value.put(entry.getValue().getValue().getKey(), localIndexes)»-->
        «ENDFOR»
        «ENDFOR»
        <!-- «var int localIndex = 0» -->
        <!-- «var int index = 0» -->
        «FOR String typeName : group.keySet()»
        «FOR String attName : group.get(typeName).keySet()»
        <!-- «localIndex++»-->
        «FOR String name : group.get(typeName).get(attName).keySet()»
        <!-- «index++»-->
        <!--«group.get(typeName).get(attName).put(name, localIndex)»-->
        <!--«indexes.put(name, index)»-->
        «ENDFOR»
        «ENDFOR»
        «ENDFOR»
        «FOR String key : op.sortedOptions.keySet()»
        <!-- «var List<ComparableSimpleEntry<String, SimpleEntry<EClass, SimpleEntry<String, SimpleEntry<Integer, Boolean>>>>> sortedEntries = op.sortedOptions.get(key)»-->
        «FOR ComparableSimpleEntry<String, SimpleEntry<EClass, SimpleEntry<String, SimpleEntry<Integer, Boolean>>>> entry : sortedEntries»
        «IF indexes.containsKey(entry.getKey()) && entry.getValue().getValue().getValue().getValue() == true»
        <!-- «solutions.put(entry.getKey(), indexes.get(entry.getKey()))»-->
        «ENDIF»
        «ENDFOR»
        «ENDFOR»
        <!--«groups.put(test, group)»-->
        <!-- «k = tmp»-->
        «FOR String key : op.options.keySet()»
        <!-- «var List<ComparableSimpleEntry<String, SimpleEntry<EClass, SimpleEntry<String, SimpleEntry<Integer, Boolean>>>>> entries = op.options.get(key)»-->
        «FOR ComparableSimpleEntry<String, SimpleEntry<EClass, SimpleEntry<String, SimpleEntry<Integer, Boolean>>>> entry : entries»
        «IF entry.getValue().getValue().getValue().getValue() == true»
        <!-- «k++»-->
        <!-- «opWithGaps = opWithGaps.replace("%" + k, "[[" + solutions.get(entry.getKey()) + "]]")»-->
        «ENDIF»
        «ENDFOR»
        «ENDFOR»
        <!-- «k++»-->
        <!-- «opWithGaps = opWithGaps.replace(" %" + k, "")»-->
		<!-- «textWithGaps += opWithGaps.trim()»-->
        «{diagram = diagram.substring(0, diagram.lastIndexOf("/") + 1) + answersClass.name + "_" + diagram.substring(diagram.lastIndexOf("/") + 1, diagram.length); ""}»
        <!--«var File file = new File(projectPath + "/src-gen/html/" + diagram)»-->
        «IF file.isFile && file.exists()»
        <question type="ddwtos">
          <name>
             <text><![CDATA[<p>«test.question.replace("\"", "'")»<br></p>]]></text>
          </name>
          <questiontext format="html">
          <text><![CDATA[<p>«test.question.replace("\"", "'")»<br><img src="@@PLUGINFILE@@/exercise_«uuid».png" alt="" width="20%" height="20%" role="presentation" class="img-responsive atto_image_button_text-bottom"><br><br></p><p>«textWithGaps.trim()»<br></p>]]></text>
          <file name="exercise_«uuid».png" path="/" encoding="base64">«getStringBase64(diagram)»</file>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <shuffleanswers>0</shuffleanswers>
    <correctfeedback format="html">
      <!--<text>Respuesta correcta</text>-->
      <text>Right answer.</text>
    </correctfeedback>
    <partiallycorrectfeedback format="html">
      <!--<text>Respuesta parcialmente correcta.</text>-->
      <text>Partially right answer.</text>
    </partiallycorrectfeedback>
    <incorrectfeedback format="html">
      <!--<text>Respuesta incorrecta.</text>-->
      <text>Wrong answer.</text>
    </incorrectfeedback>
    <shownumcorrect/>
        «FOR String typeName : groups.get(test).keySet()»
        <!-- «var Map<String, Map<String, Integer>> entries = groups.get(test).get(typeName)»-->
        «FOR String attName : entries.keySet()»
        <!-- «var Map<String, Integer> entry = groups.get(test).get(typeName).get(attName)»-->
        «FOR String key : entry.keySet()»
        <dragbox>
        <text>«key.trim()»</text>
        <group>«groups.get(test).get(typeName).get(attName).get(key)»</group>
        <infinite/>
        </dragbox>
        «ENDFOR»
        «ENDFOR»
        «ENDFOR»
        </question>
        «ENDIF»
        «ENDIF»
	    «ENDFOR»
        «ENDIF»
		«ENDFOR»
		</quiz>
	'''
}
