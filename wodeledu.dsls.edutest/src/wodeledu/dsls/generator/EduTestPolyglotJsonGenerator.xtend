/*
 * generated by Xtext 2.13.0
 */
package wodeledu.dsls.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import wodel.utils.manager.ModelManager
import edutest.Program
import java.net.URL
import org.eclipse.core.runtime.FileLocator
import org.eclipse.emf.ecore.EPackage
import org.eclipse.emf.ecore.EObject
import wodel.utils.exceptions.ModelNotFoundException
import org.osgi.framework.Bundle
import org.eclipse.core.runtime.Platform
import java.util.List
import wodeledu.dsls.generator.EduTestSuperGenerator.TestOption
import wodeledu.dsls.generator.EduTestSuperGenerator.Registry
import mutatorenvironment.MutatorEnvironment
import java.util.UUID
import java.util.HashMap
import edutest.Test
import java.util.Map
import java.util.ArrayList
import edutest.MatchPairs
import edutest.MissingWords
import org.eclipse.emf.ecore.EClass
import edutest.MultiChoiceText
import edutest.AlternativeResponse
import edutest.MultiChoiceDiagram
import java.util.Collections
import java.util.Set
import java.io.File
import edutest.MutatorTests
import java.util.LinkedHashSet

import java.io.FileOutputStream

import java.io.FileInputStream
import java.io.InputStream
import java.util.Scanner
import com.fasterxml.jackson.databind.module.SimpleModule
import com.fasterxml.jackson.databind.ObjectMapper
import com.fasterxml.jackson.databind.ObjectWriter
import com.fasterxml.jackson.databind.JsonNode
import com.fasterxml.jackson.databind.SerializationFeature
import java.io.OutputStream
import com.fasterxml.jackson.databind.SequenceWriter

/**
 * @author Pablo Gomez-Abajo - eduTest code generator.
 * 
 * Generates the javascript and html code for the
 * test exercises application
 *  
 */
class EduTestPolyglotJsonGenerator extends EduTestSuperGenerator {

	private String fileName
	private String pageName
	private List<EObject> blocks
	private List<EObject> mutators
	private List<EPackage> metamodel
	private List<EClass> roots

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		try {
			var i = 0;
			//loads the mutator model
			var xmiFileName = projectPath + "/" + outputFolder + "/" + resource.URI.lastSegment.replaceAll(".test", ".model")
			val Bundle bundle = Platform.getBundle("wodel.models")
	   		val URL fileURL = bundle.getEntry("/model/MutatorEnvironment.ecore")
	   		val String mutatorecore = FileLocator.resolve(fileURL).getFile()
			//val String mutatorecore = ModelManager.getWorkspaceAbsolutePath + "/" + project.name + "/resources/MutatorEnvironment.ecore";
			val List<EPackage> mutatorpackages = ModelManager.loadMetaModel(mutatorecore)
			//val EPackage epackage = mutatorpackages.get(0);
			//EPackage.Registry.INSTANCE.put(epackage.getNsURI(), epackage);
			val Resource mutatormodel = ModelManager.loadModel(mutatorpackages, xmiFileName)
			blocks = ModelManager.getObjectsOfType("Block", mutatormodel)
			mutators = ModelManager.getObjectsOfType("Mutator", mutatormodel)

			for (p : resource.allContents.toIterable.filter(Program)) {
				if (i == 0) {
					fileName = 'xml/' + resource.URI.lastSegment.replaceAll(".test", "") + '.json'
					pageName = resource.URI.lastSegment.replaceAll(".test", "") + '.json'
				} else {
					fileName = 'xml/' + resource.URI.lastSegment.replaceAll(".test", "") + i + '.json'
					pageName = resource.URI.lastSegment.replaceAll(".test", "") + i + '.json'
				}
				metamodel = new ArrayList<EPackage>()
				metamodel.addAll(ModelManager.loadMetaModel(p.metamodel))
				roots = new ArrayList<EClass>()
				roots.addAll(ModelManager.getRootEClasses(metamodel))

				var SimpleModule module = new SimpleModule("PoLyGloT")
				var ObjectMapper mapper = new ObjectMapper()
					.registerModule(module)
					.configure(SerializationFeature.INDENT_OUTPUT, true)
					
				var JsonNode contents = mapper.valueToTree(p.compile(resource))
				var ObjectWriter writer = mapper.writerWithDefaultPrettyPrinter()
				
				var OutputStream os = new FileOutputStream("./dump.bak")
				var SequenceWriter sq = writer.writeValues(os)
				sq.write(contents)
				os.close()

				var InputStream is = new FileInputStream("./dump.bak");
				var Scanner scan = new Scanner(is)
				
				var List<String> lines = new ArrayList<String>()
				while (scan.hasNextLine()) {
					lines.add(scan.nextLine())
				}
				
				var String compiled = ""
				for (String l : lines) {
					compiled += l
				}
				compiled = compiled.replace("\\n", "\n").replace("\\r", "\r").replace("\\t", "\t").replace("\"\"", "\"").replace("\\\\", "/").replace("\\\"", "\"").replace("\\", "/")
				compiled = compiled.substring(1, compiled.length- 1)
				fsa.generateFile(fileName, compiled)
				i++
			}
		}
		catch (ModelNotFoundException e) {
		}
	}

	def compile(Program program, Resource resource) '''
		«{buildOptions(program, resource, blocks, roots, program.class); ""}»
    	«var String statement = ""»
"data": {
		«var EObject main = null»
		«IF blocks.size() > 0»
		«{main = blocks.get(0); ""}»
		«ELSE»
		«IF mutators.size() > 0»
		«{main = mutators.get(0); ""}»
		«ENDIF»
		«ENDIF»
		«var List<EPackage> packages = ModelManager.loadMetaModel((main.eContainer as MutatorEnvironment).definition.metamodel)»
		«var String domain = packages.get(0).getNsURI().replace("http://", "")»
		«{domain = domain.substring(0, domain.lastIndexOf("/")).replace("/", ""); ""}»
		
    	«var int i = 0»
		«FOR MutatorTests exercise : program.exercises»
    	«IF exercise instanceof AlternativeResponse»
       	«var EClass answersClass = null»
       	«var EClass statementClass = null»
		«FOR EClass root : roots»
        «IF exercise.config.answers !== null && exercise.config.answers.size() > 0»
		«IF exercise.config.answers.get(0).name.equals(root.name)»
		«{answersClass = root; ""}»
		«ENDIF»
		«ELSEIF exercise.config.answers !== null && exercise.config.answers.size() === 0»
		«{answersClass = root; ""}»
		«ENDIF»
		«IF exercise.config.statement !== null && exercise.config.statement.size() > 0»
		«IF exercise.config.statement.get(0).name.equals(root.name)»
		«{statementClass = root; ""}»
		«ENDIF»
		«ELSEIF exercise.config.statement !== null && exercise.config.statement.size() === 0»
		«{statementClass = root; ""}»
		«ENDIF»
		«ENDFOR»
		«IF answersClass === null»
		«{answersClass = roots.get(roots.size() - 1); ""}»
		«ENDIF»
		«IF statementClass === null»
		«IF roots.size() > 1»
		«{statementClass = roots.get(1); ""}»
		«ELSE»
		«{statementClass = roots.get(0); ""}»
		«ENDIF»
		«ENDIF»
		«var String solution = ""» 
		«FOR Test test : exercise.tests»
        «{solution = diagrams.get(exercise).get(test).get(answersClass) !== null ? diagrams.get(exercise).get(test).get(answersClass).size() > 0 ? diagrams.get(exercise).get(test).get(answersClass).get(0); ""}»
        «var List<String> answers = new ArrayList<String>()»
        «var Set<String> answersSet = new LinkedHashSet<String>()»
        «IF diagrams.get(exercise).get(test).get(answersClass) !== null && diagrams.get(exercise).get(test).get(answersClass).size() > 0»
        «{answersSet.addAll(diagrams.get(exercise).get(test).get(answersClass)); ""}»
        «{answers.addAll(answersSet); ""}»
        «{Collections.shuffle(answers); ""}»
	    «IF answers.size() > 0»
        «var String diagram = answers.get(0)»
        «var File file = new File(projectPath +  "/src-gen/html/diagrams/" + test.source.replace('.model', '') + "/" + diagram)»
        «IF file.isFile && file.exists()»
		«ENDIF»
		«ENDIF»
        «ENDIF»
    	«ENDFOR»
		«ENDIF»
    	«IF exercise instanceof MultiChoiceDiagram»
    	«var List<String> answers = new ArrayList<String>()»
        «var int min = Integer.MAX_VALUE»
		«FOR test : exercise.tests»
           «FOR EClass eclass : diagrams.get(exercise).get(test).keySet()»
           «var int counter = diagrams.get(exercise).get(test).get(eclass).size()»
           «IF min > counter»
           «{min = counter; ""}»
           «ENDIF»
           «ENDFOR»
         «ENDFOR»
       	«var EClass answersClass = null»
       	«var EClass statementClass = null»
		«FOR EClass root : roots»
        «IF exercise.config.answers !== null && exercise.config.answers.size() > 0»
		«IF exercise.config.answers.get(0).name.equals(root.name)»
		«{answersClass = root; ""}»
		«ENDIF»
		«ELSEIF exercise.config.answers !== null && exercise.config.answers.size() === 0»
		«{answersClass = root; ""}»
		«ENDIF»
		«IF exercise.config.statement !== null && exercise.config.statement.size() > 0»
		«IF exercise.config.statement.get(0).name.equals(root.name)»
		«{statementClass = root; ""}»
		«ENDIF»
		«ELSEIF exercise.config.statement !== null && exercise.config.statement.size() === 0»
		«{statementClass = root; ""}»
		«ENDIF»
		«ENDFOR»
		«IF answersClass === null»
		«{answersClass = roots.get(roots.size() - 1); ""}»
		«ENDIF»
		«IF statementClass === null»
		«IF roots.size() > 1»
		«{statementClass = roots.get(1); ""}»
		«ELSE»
		«{statementClass = roots.get(0); ""}»
		«ENDIF»
		«ENDIF»
		«var String solution = ""» 
		«FOR test : exercise.tests»
        «{statement = diagrams.get(exercise).get(test).get(statementClass) !== null ? diagrams.get(exercise).get(test).get(statementClass).size() > 0 ? diagrams.get(exercise).get(test).get(statementClass).get(0) : null : null; ""}»
        «{solution = diagrams.get(exercise).get(test).get(answersClass) !== null ? diagrams.get(exercise).get(test).get(answersClass).size() > 0 ? diagrams.get(exercise).get(test).get(answersClass).get(0); ""}»
        «{answers = new ArrayList<String>(); ""}»
        «var Set<String> answersSet = new LinkedHashSet<String>()»
        «IF diagrams.get(exercise).get(test).get(answersClass) !== null && diagrams.get(exercise).get(test).get(answersClass).size() > 0»
        «{answersSet.addAll(diagrams.get(exercise).get(test).get(answersClass)); ""}»
        «{answers.addAll(answersSet); ""}»
        «{Collections.shuffle(answers); ""}»
           «var File file = new File(projectPath + "/src-gen/html/diagrams/" + test.source.replace('.model', '') + "/" + statement)»
           «IF file.isFile && file.exists()»
  «var UUID uuid = UUID.randomUUID()»
  «var int nNodes = 0»
  «IF answers.size > 0»
  "choices": [
           «var int counter = 0»
           «var int solutions = 1»
           «var double fraction = 100.0 / solutions»
           «{counter = 0; ""}»
           «FOR String diagram : answers»
           «{file = new File(projectPath + "/src-gen/html/diagrams/" + test.source.replace('.model', '') + "/" + diagram); ""}»
           «IF file.isFile && file.exists()»
		   «{uuid = UUID.randomUUID(); ""}»
		   «IF diagram.startsWith(answersClass.name) || diagram.contains("/" + answersClass.name) || diagram.contains("\\" + answersClass.name)»
           «var boolean s = false»
           «FOR String sol : solutionsMap.get(exercise)»
           «IF diagram.startsWith(sol + "/") 
           || diagram.startsWith(sol + "\\")
           || diagram.contains(sol + "/" + answersClass.name + "_")
           || diagram.contains(sol + "\\" + answersClass.name + "_")»
           «{s = true; ""}»
           «ENDIF»
           «ENDFOR»
           «IF s == true»
           «IF counter < min - 1»
           «{counter++; ""}»
           «{solutions++; ""}»
           «ENDIF»
           «ENDIF»
           «IF s || diagram.equals(solution)»
           "«projectPath + "/src-gen/html/diagrams/" + test.source.replace('.model', '') + "/" + diagram»", 
           «ELSE»
           "«projectPath + "/src-gen/html/diagrams/" + test.source.replace('.model', '') + "/" + diagram»", 
           «IF counter < min - 1»
           «{counter++; ""}»
           «{s = false; ""}»
           «FOR String sol : solutionsMap.get(exercise)»
           «IF diagram.startsWith(sol + "/") 
           || diagram.startsWith(sol + "\\")
           || diagram.contains(sol + "/" + answersClass.name + "_")
           || diagram.contains(sol + "\\" + answersClass.name + "_")»
           «{s = true; ""}»
           «ENDIF»
           «ENDFOR»
            «ENDIF»
           «ENDIF»
           «ENDIF»
           «ENDIF»
           «ENDFOR»
 ],
  «ENDIF» 
  		«ENDIF»
		«ENDIF»
		«ENDFOR»
		«FOR test : exercise.tests»
  «var UUID uuid = UUID.randomUUID()»
  «var int nNodes = 0»
           «var File file = new File(projectPath + "/src-gen/html/diagrams/" + test.source.replace('.model', '') + "/" + statement)»
           «IF file.isFile && file.exists()»
        «IF answers.size > 0»
 "isChoiceCorrect" : [
           «FOR String diagram : answers»
           «{file = new File(projectPath + "/src-gen/html/diagrams/" + test.source.replace('.model', '') + "/" + diagram); ""}»
           «IF file.isFile && file.exists()»
		   «IF diagram.startsWith(answersClass.name) || diagram.contains("/" + answersClass.name) || diagram.contains("\\" + answersClass.name)»
           «var boolean s = false»
           «FOR String sol : solutionsMap.get(exercise)»
           «IF diagram.startsWith(sol + "/") 
           || diagram.startsWith(sol + "\\")
           || diagram.contains(sol + "/" + answersClass.name + "_")
           || diagram.contains(sol + "\\" + answersClass.name + "_")»
           «{s = true; ""}»
           «ENDIF»
           «ENDFOR»
           «var int counter = 0»
           «var int solutions = 1»
           «var double fraction = 100.0 / solutions»
           «IF s == true»
           «IF counter < min - 1»
           «{counter++; ""}»
           «{solutions++; ""}»
           «ENDIF»
           «ENDIF»
			«{solution = diagrams.get(exercise).get(test).get(answersClass) !== null ? diagrams.get(exercise).get(test).get(answersClass).size() > 0 ? diagrams.get(exercise).get(test).get(answersClass).get(0);""}»
           «IF s || diagram.equals(solution)»
           "true", 
           «ELSE»
           "false",
           «ENDIF» 
           «IF counter < min - 1»
           «{counter++; ""}»
           «{s = false; ""}»
           «FOR String sol : solutionsMap.get(exercise)»
           «IF diagram.startsWith(sol + "/") 
           || diagram.startsWith(sol + "\\")
           || diagram.contains(sol + "/" + answersClass.name + "_")
           || diagram.contains(sol + "\\" + answersClass.name + "_")»
           «{s = true; ""}»
           «ENDIF»
           «ENDFOR»
           «ENDIF»
           «ENDIF»
           «ENDIF»
           «ENDFOR»
         ], 
«ENDIF»
           «ENDIF»
  "question": [
  	"Select which of the following object diagrams is a valid instance of the class diagram shown below:",
  	"«projectPath + "/src-gen/html/diagrams/" + test.source.replace('.model', '') + "/" + statement»",
  ],
        «ENDFOR»
      	«ENDIF»
		«IF exercise instanceof MatchPairs»
        «var int min = Integer.MAX_VALUE»
        «var int index = 0»
        «var int max = Integer.MIN_VALUE»
		«FOR test : exercise.tests»
		«IF options.get(exercise) !== null && options.get(exercise).get(test) !== null»
          «var List<String> textOptions = new ArrayList<String>()»
          «var int k = 0»
          «var int counter = 0»
          «var int rndIndex = ModelManager.getRandomIndex(options.get(exercise).get(test))»
          «IF options.get(exercise).get(test).size() > 0»
          «FOR TestOption opt : options.get(exercise).get(test).get(rndIndex)»
          «FOR String key : opt.text.keySet()»
          «FOR String text : opt.text.get(key)»
          «IF !textOptions.contains(text)»
          «{counter++; ""}»
          «{textOptions.add(text); ""}»
          «ENDIF»
          «ENDFOR»
          «ENDFOR»
          «ENDFOR»
          «IF counter > max»
          «{max = counter; ""}»
          «{index = k; ""}»
          «ENDIF»
          «{k++; ""}»
        «ENDIF»
        «ENDIF»
        «ENDFOR»
        «var Map<Test, Map<TestOption, String>> mapPairOptions = new HashMap<Test, Map<TestOption, String>>()»
		«FOR test : exercise.tests»
		«IF options.get(exercise) !== null && options.get(exercise).get(test) !== null»
          «var int k = 0»
          «var int counter = 0»
          «var Map<TestOption, String> mapOptions = new HashMap<TestOption, String>()»
          «var int rndIndex = ModelManager.getRandomIndex(options.get(exercise).get(test))»
          «IF options.get(exercise).get(test).size() > 0»
          «FOR TestOption opt : options.get(exercise).get(test).get(rndIndex)»
          «var List<String> textOptions = new ArrayList<String>()»
          «FOR String key : opt.text.keySet()»
          «var String text = opt.text.get(key).get(0)»
          «IF !textOptions.contains(text)»
          «{counter++; ""}»
          «{textOptions.add(text); ""}»
          «ENDIF»
          «ENDFOR»
          «var String pairOptions = ""»
          «FOR String textOption : textOptions»
          «{pairOptions += textOption.trim().replace("  "," ").replace(" ", "+") + ".<br>"; ""}»
          «ENDFOR»
          «{mapOptions.put(opt, pairOptions)}»
          «ENDFOR»
          «{mapPairOptions.put(test, mapOptions)}»
          «IF min > counter»
          «{min = counter; ""}»
          «ENDIF»
          «{k++; ""}»
        «ENDIF»
        «ENDIF»
        «ENDFOR»
       	«var EClass answersClass = null»
       	«var EClass statementClass = null»
		«FOR EClass root : roots»
        «IF exercise.config.answers !== null && exercise.config.answers.size() > 0»
		«IF exercise.config.answers.get(0).name.equals(root.name)»
		«{answersClass = root; ""}»
		«ENDIF»
		«ELSEIF exercise.config.answers !== null && exercise.config.answers.size() === 0»
		«{answersClass = root; ""}»
		«ENDIF»
		«IF exercise.config.statement !== null && exercise.config.statement.size() > 0»
		«IF exercise.config.statement.get(0).name.equals(root.name)»
		«{statementClass = root; ""}»
		«ENDIF»
		«ELSEIF exercise.config.statement !== null && exercise.config.statement.size() === 0»
		«{statementClass = root; ""}»
		«ENDIF»
		«ENDFOR»
		«IF answersClass === null»
		«{answersClass = roots.get(roots.size() - 1); ""}»
		«ENDIF»
		«IF statementClass === null»
		«IF roots.size() > 1»
		«{statementClass = roots.get(1); ""}»
		«ELSE»
		«{statementClass = roots.get(0); ""}»
		«ENDIF»
		«ENDIF»
        «var int k = 0»
        «FOR Test test : exercise.tests»
        «var TestOption opt = null»
        «var int rndIndex = ModelManager.getRandomIndex(options.get(exercise).get(test))»
        «IF options.get(exercise).get(test).size() > 0»
        «IF (options.get(exercise).get(test) !== null && options.get(exercise).get(test).get(rndIndex).size() > index)»
        «{opt = options.get(exercise).get(test).get(rndIndex).get(index); ""}»
        «ENDIF»
        «IF opt !== null»
        «var String seed = ''»
        «{seed = opt.path; ""}»
        «{seed = seed.substring(0, seed.lastIndexOf("/") + 1) + answersClass.name + "_" + seed.substring(seed.lastIndexOf("/") + 1, seed.length)}»
        «var File file = new File(projectPath +  "/src-gen/html/" + seed)»
        «IF file.isFile && file.exists()»
        «{k++; ""}»
          «ENDIF»
          «ENDIF»
          «ENDIF»
          «ENDFOR»
        «ENDIF»
        «IF exercise instanceof MissingWords»
        «FOR test : exercise.tests»
		«FOR EClass root : roots»
        «IF exercise.config.answers !== null && exercise.config.answers.size() > 0»
		«IF exercise.config.answers.get(0).name.equals(root.name)»
		«ENDIF»
		«ENDIF»
		«IF exercise.config.statement !== null && exercise.config.statement.size() > 0»
		«IF exercise.config.statement.get(0).name.equals(root.name)»
		«ENDIF»
		«ENDIF»
		«ENDFOR»
	    «ENDFOR»
        «ENDIF»
    	«IF exercise instanceof MultiChoiceText»
        «var int min = Integer.MAX_VALUE»
		«FOR test : exercise.tests»
           «FOR EClass eclass : diagrams.get(exercise).get(test).keySet()»
           «var int counter = diagrams.get(exercise).get(test).get(eclass).size()»
           «IF min > counter»
           «{min = counter; ""}»
           «ENDIF»
           «ENDFOR»
         «ENDFOR»
       	«var EClass answersClass = null»
       	«var EClass statementClass = null»
		«FOR EClass root : roots»
        «IF exercise.config.answers !== null && exercise.config.answers.size() > 0»
		«IF exercise.config.answers.get(0).name.equals(root.name)»
		«{answersClass = root; ""}»
		«ENDIF»
		«ELSEIF exercise.config.answers !== null && exercise.config.answers.size() === 0»
		«{answersClass = root; ""}»
		«ENDIF»
		«IF exercise.config.statement !== null && exercise.config.statement.size() > 0»
		«IF exercise.config.statement.get(0).name.equals(root.name)»
		«{statementClass = root; ""}»
		«ENDIF»
		«ELSEIF exercise.config.statement !== null && exercise.config.statement.size() === 0»
		«{statementClass = root; ""}»
		«ENDIF»
		«ENDFOR»
		«IF answersClass === null»
		«{answersClass = roots.get(roots.size() - 1); ""}»
		«ENDIF»
		«IF statementClass === null»
		«IF roots.size() > 1»
		«{statementClass = roots.get(1); ""}»
		«ELSE»
		«{statementClass = roots.get(0); ""}»
		«ENDIF»
		«ENDIF»
		«FOR test : exercise.tests»
        «statement = diagrams.get(exercise).get(test).get(statementClass) !== null ? diagrams.get(exercise).get(test).get(statementClass).size() > 0 ? diagrams.get(exercise).get(test).get(statementClass).get(0) : null : null»
        «var String solution = diagrams.get(exercise).get(test).get(answersClass) !== null ? diagrams.get(exercise).get(test).get(answersClass).size() > 0 ? diagrams.get(exercise).get(test).get(answersClass).get(0)»
        «var List<String> answers = new ArrayList<String>()»
        «var Set<String> answersSet = new LinkedHashSet<String>()»
        «IF diagrams.get(exercise).get(test).get(answersClass) !== null && diagrams.get(exercise).get(test).get(answersClass).size() > 0»
        «{answersSet.addAll(diagrams.get(exercise).get(test).get(answersClass)); ""}»
        «{answers.addAll(answersSet); ""}»
        «{Collections.shuffle(answers); ""}»
        «var String diagram = projectPath + "/src-gen/html/diagrams/" + test.source.replace('.model', '') + "/" + statement»
		«IF diagram.length > 0»
        «var File file = new File(diagram)»
        «IF file.isFile && file.exists()»
        «{diagram = diagram.substring(diagram.indexOf("/src-gen/html/") + "/src-gen/html/".length, diagram.length); ""}»
           «ENDIF»
           «ENDIF»
           «ENDIF»
        «ENDFOR»
        «ENDIF»
        «ENDFOR»
  }
	'''
}
