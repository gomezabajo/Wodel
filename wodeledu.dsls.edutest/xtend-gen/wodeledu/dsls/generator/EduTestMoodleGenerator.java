/**
 * generated by Xtext 2.13.0
 */
package wodeledu.dsls.generator;

import com.google.common.collect.Iterables;
import edutest.AlternativeResponse;
import edutest.AlternativeText;
import edutest.DragAndDropText;
import edutest.MatchPairs;
import edutest.MissingWords;
import edutest.Mode;
import edutest.MultiChoiceDiagram;
import edutest.MultiChoiceEmendation;
import edutest.MultiChoiceText;
import edutest.MutatorTests;
import edutest.Program;
import edutest.Test;
import java.io.File;
import java.net.URL;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.UUID;
import mutatorenvironment.MutatorEnvironment;
import org.eclipse.core.runtime.FileLocator;
import org.eclipse.core.runtime.Platform;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.osgi.framework.Bundle;
import wodel.utils.exceptions.ModelNotFoundException;
import wodel.utils.manager.ModelManager;

/**
 * @author Pablo Gomez-Abajo - eduTest code generator.
 * 
 * Generates the javascript and html code for the
 * test exercises application
 */
@SuppressWarnings("all")
public class EduTestMoodleGenerator extends EduTestSuperGenerator {
  private String fileName;

  private String pageName;

  private List<EObject> blocks;

  private List<EObject> mutators;

  private List<EPackage> metamodel;

  private List<EClass> roots;

  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    try {
      try {
        int i = 0;
        String _replaceAll = resource.getURI().lastSegment().replaceAll(".test", ".model");
        String xmiFileName = ((((this.projectPath + "/") + this.outputFolder) + "/") + _replaceAll);
        final Bundle bundle = Platform.getBundle("wodel.models");
        final URL fileURL = bundle.getEntry("/model/MutatorEnvironment.ecore");
        final String mutatorecore = FileLocator.resolve(fileURL).getFile();
        final List<EPackage> mutatorpackages = ModelManager.loadMetaModel(mutatorecore);
        final Resource mutatormodel = ModelManager.loadModel(mutatorpackages, xmiFileName);
        this.blocks = ModelManager.getObjectsOfType("Block", mutatormodel);
        this.mutators = ModelManager.getObjectsOfType("Mutator", mutatormodel);
        Iterable<Program> _filter = Iterables.<Program>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Program.class);
        for (final Program p : _filter) {
          {
            if ((i == 0)) {
              String _replaceAll_1 = resource.getURI().lastSegment().replaceAll(".test", "");
              String _plus = ("xml/" + _replaceAll_1);
              String _plus_1 = (_plus + ".xml");
              this.fileName = _plus_1;
              String _replaceAll_2 = resource.getURI().lastSegment().replaceAll(".test", "");
              String _plus_2 = (_replaceAll_2 + ".xml");
              this.pageName = _plus_2;
            } else {
              String _replaceAll_3 = resource.getURI().lastSegment().replaceAll(".test", "");
              String _plus_3 = ("xml/" + _replaceAll_3);
              String _plus_4 = (_plus_3 + Integer.valueOf(i));
              String _plus_5 = (_plus_4 + ".xml");
              this.fileName = _plus_5;
              String _replaceAll_4 = resource.getURI().lastSegment().replaceAll(".test", "");
              String _plus_6 = (_replaceAll_4 + Integer.valueOf(i));
              String _plus_7 = (_plus_6 + ".xml");
              this.pageName = _plus_7;
            }
            ArrayList<EPackage> _arrayList = new ArrayList<EPackage>();
            this.metamodel = _arrayList;
            this.metamodel.addAll(ModelManager.loadMetaModel(p.getMetamodel()));
            ArrayList<EClass> _arrayList_1 = new ArrayList<EClass>();
            this.roots = _arrayList_1;
            this.roots.addAll(ModelManager.getRootEClasses(this.metamodel));
            fsa.generateFile(this.fileName, this.compile(p, resource));
            i++;
          }
        }
      } catch (final Throwable _t) {
        if (_t instanceof ModelNotFoundException) {
        } else {
          throw Exceptions.sneakyThrow(_t);
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  public CharSequence compile(final Program program, final Resource resource) {
    try {
      StringConcatenation _builder = new StringConcatenation();
      String _xblockexpression = null;
      {
        this.buildOptions(program, resource, this.blocks, this.roots, program.getClass());
        _xblockexpression = "";
      }
      _builder.append(_xblockexpression);
      _builder.newLineIfNotEmpty();
      _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
      _builder.newLine();
      _builder.append("<!--");
      EObject main = null;
      _builder.append("-->");
      _builder.newLineIfNotEmpty();
      {
        int _size = this.blocks.size();
        boolean _greaterThan = (_size > 0);
        if (_greaterThan) {
          String _xblockexpression_1 = null;
          {
            main = this.blocks.get(0);
            _xblockexpression_1 = "";
          }
          _builder.append(_xblockexpression_1);
          _builder.newLineIfNotEmpty();
        } else {
          {
            int _size_1 = this.mutators.size();
            boolean _greaterThan_1 = (_size_1 > 0);
            if (_greaterThan_1) {
              String _xblockexpression_2 = null;
              {
                main = this.mutators.get(0);
                _xblockexpression_2 = "";
              }
              _builder.append(_xblockexpression_2);
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      _builder.append("<!--");
      EObject _eContainer = main.eContainer();
      List<EPackage> packages = ModelManager.loadMetaModel(((MutatorEnvironment) _eContainer).getDefinition().getMetamodel());
      _builder.append("-->");
      _builder.newLineIfNotEmpty();
      _builder.append("<!--");
      String domain = packages.get(0).getNsURI().replace("http://", "");
      _builder.append("-->");
      _builder.newLineIfNotEmpty();
      _builder.append("<!--");
      _builder.append(domain = domain.substring(0, domain.lastIndexOf("/")).replace("/", ""));
      _builder.append("-->");
      _builder.newLineIfNotEmpty();
      _builder.append("<quiz>");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("<question type=\"category\">");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<category>");
      _builder.newLine();
      _builder.append("      ");
      _builder.append("<text>$course$/top/");
      _builder.append(domain, "      ");
      _builder.append("</text>");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("</category>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<info format=\"moodle_auto_format\">");
      _builder.newLine();
      _builder.append("      ");
      _builder.append("<text>Default category in the context of deterministic finite automata.</text>");
      _builder.newLine();
      _builder.append("      ");
      _builder.append("<!--<text>Categoria por defecto para preguntas compartidas en el contexto Aut&#243;matas.</text>-->");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("</info>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<idnumber></idnumber>");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("</question>");
      _builder.newLine();
      _builder.newLine();
      _builder.newLine();
      _builder.append("    \t");
      int i = 0;
      _builder.newLineIfNotEmpty();
      {
        EList<MutatorTests> _exercises = program.getExercises();
        for(final MutatorTests exercise : _exercises) {
          {
            if ((exercise instanceof AlternativeResponse)) {
              _builder.append("       \t");
              _builder.append("<!-- ");
              EClass answersClass = null;
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              _builder.append("       \t");
              _builder.append("<!-- ");
              EClass statementClass = null;
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              {
                for(final EClass root : this.roots) {
                  {
                    EClass _answers = ((AlternativeResponse)exercise).getConfig().getAnswers();
                    boolean _tripleNotEquals = (_answers != null);
                    if (_tripleNotEquals) {
                      {
                        boolean _equals = ((AlternativeResponse)exercise).getConfig().getAnswers().getName().equals(root.getName());
                        if (_equals) {
                          String _xblockexpression_3 = null;
                          {
                            answersClass = root;
                            _xblockexpression_3 = "";
                          }
                          _builder.append(_xblockexpression_3);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                  {
                    EClass _statement = ((AlternativeResponse)exercise).getConfig().getStatement();
                    boolean _tripleNotEquals_1 = (_statement != null);
                    if (_tripleNotEquals_1) {
                      {
                        boolean _equals_1 = ((AlternativeResponse)exercise).getConfig().getStatement().getName().equals(root.getName());
                        if (_equals_1) {
                          String _xblockexpression_4 = null;
                          {
                            statementClass = root;
                            _xblockexpression_4 = "";
                          }
                          _builder.append(_xblockexpression_4);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              {
                if ((answersClass == null)) {
                  String _xblockexpression_5 = null;
                  {
                    int _size_2 = this.roots.size();
                    int _minus = (_size_2 - 1);
                    answersClass = this.roots.get(_minus);
                    _xblockexpression_5 = "";
                  }
                  _builder.append(_xblockexpression_5);
                  _builder.newLineIfNotEmpty();
                }
              }
              {
                if ((statementClass == null)) {
                  {
                    int _size_2 = this.roots.size();
                    boolean _greaterThan_2 = (_size_2 > 1);
                    if (_greaterThan_2) {
                      String _xblockexpression_6 = null;
                      {
                        statementClass = this.roots.get(1);
                        _xblockexpression_6 = "";
                      }
                      _builder.append(_xblockexpression_6);
                      _builder.newLineIfNotEmpty();
                    } else {
                      String _xblockexpression_7 = null;
                      {
                        statementClass = this.roots.get(0);
                        _xblockexpression_7 = "";
                      }
                      _builder.append(_xblockexpression_7);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              {
                EList<Test> _tests = ((AlternativeResponse)exercise).getTests();
                for(final Test test : _tests) {
                  String _xifexpression = null;
                  List<String> _get = this.diagrams.get(exercise).get(test).get(answersClass);
                  boolean _tripleNotEquals_2 = (_get != null);
                  if (_tripleNotEquals_2) {
                    String _xifexpression_1 = null;
                    int _size_3 = this.diagrams.get(exercise).get(test).get(answersClass).size();
                    boolean _greaterThan_3 = (_size_3 > 0);
                    if (_greaterThan_3) {
                      _xifexpression_1 = this.diagrams.get(exercise).get(test).get(answersClass).get(0);
                    }
                    _xifexpression = _xifexpression_1;
                  }
                  String solution = _xifexpression;
                  _builder.newLineIfNotEmpty();
                  List<String> answers = new ArrayList<String>();
                  _builder.newLineIfNotEmpty();
                  Set<String> answersSet = new LinkedHashSet<String>();
                  _builder.newLineIfNotEmpty();
                  {
                    if (((this.diagrams.get(exercise).get(test).get(answersClass) != null) && (this.diagrams.get(exercise).get(test).get(answersClass).size() > 0))) {
                      _builder.append("        ");
                      String _xblockexpression_8 = null;
                      {
                        answersSet.addAll(this.diagrams.get(exercise).get(test).get(answersClass));
                        _xblockexpression_8 = "";
                      }
                      _builder.append(_xblockexpression_8, "        ");
                      _builder.newLineIfNotEmpty();
                      _builder.append("        ");
                      String _xblockexpression_9 = null;
                      {
                        answers.addAll(answersSet);
                        _xblockexpression_9 = "";
                      }
                      _builder.append(_xblockexpression_9, "        ");
                      _builder.newLineIfNotEmpty();
                      _builder.append("        ");
                      String _xblockexpression_10 = null;
                      {
                        Collections.shuffle(answers);
                        _xblockexpression_10 = "";
                      }
                      _builder.append(_xblockexpression_10, "        ");
                      _builder.newLineIfNotEmpty();
                      {
                        int _size_4 = answers.size();
                        boolean _greaterThan_4 = (_size_4 > 0);
                        if (_greaterThan_4) {
                          _builder.append("<!-- ");
                          String diagram = answers.get(0);
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("<!--");
                          String _replace = test.getSource().replace(".model", "");
                          String _plus = ((this.projectPath + "/src-gen/html/diagrams/") + _replace);
                          String _plus_1 = (_plus + "/");
                          String _plus_2 = (_plus_1 + diagram);
                          File file = new File(_plus_2);
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          {
                            if ((file.isFile() && file.exists())) {
                              _builder.append("          ");
                              _builder.append("<question type=\"truefalse\">");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("<name>");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<text><![CDATA[<p>");
                              String _replace_1 = test.getQuestion().replace("\"", "\'");
                              _builder.append(_replace_1, "    ");
                              _builder.append("<br></p>]]></text>");
                              _builder.newLineIfNotEmpty();
                              _builder.append("  ");
                              _builder.append("</name>");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("<questiontext format=\"html\">");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<!-- ");
                              UUID uuid = UUID.randomUUID();
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              _builder.append("    ");
                              _builder.append("<text><![CDATA[<p>");
                              String _replace_2 = test.getQuestion().replace("\"", "\'");
                              _builder.append(_replace_2, "    ");
                              _builder.append("<br></p><p><img src=\"@@PLUGINFILE@@/exercise_");
                              _builder.append(uuid, "    ");
                              _builder.append(".png\" alt=\"");
                              String _replace_3 = test.getQuestion().replace("\"", "\'");
                              _builder.append(_replace_3, "    ");
                              _builder.append("\" width=\"20%\" height=\"20%\" class=\"img-responsive atto_image_button_text-bottom\"><br></p>]]></text>");
                              _builder.newLineIfNotEmpty();
                              _builder.append("\t\t");
                              _builder.append("<file name=\"exercise_");
                              _builder.append(uuid, "\t\t");
                              _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                              String _replace_4 = test.getSource().replace(".model", "");
                              String _plus_3 = ("diagrams/" + _replace_4);
                              String _plus_4 = (_plus_3 + "/");
                              String _plus_5 = (_plus_4 + diagram);
                              String _stringBase64 = this.getStringBase64(_plus_5);
                              _builder.append(_stringBase64, "\t\t");
                              _builder.append("</file>");
                              _builder.newLineIfNotEmpty();
                              _builder.append("  ");
                              _builder.append("</questiontext>");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("<generalfeedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<text></text>");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("</generalfeedback>");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("<defaultgrade>1.0000000</defaultgrade>");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("<penalty>1.0000000</penalty>");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("<hidden>0</hidden>");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("<idnumber></idnumber>");
                              _builder.newLine();
                              {
                                boolean _equals_2 = diagram.equals(solution.replace(".model", ".png"));
                                if (_equals_2) {
                                  _builder.append("<answer fraction=\"100\" format=\"moodle_auto_format\">");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<text>true</text>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<feedback format=\"html\">");
                                  _builder.newLine();
                                  _builder.append("    ");
                                  _builder.append("<text></text>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("</feedback>");
                                  _builder.newLine();
                                  _builder.append("</answer>");
                                  _builder.newLine();
                                  _builder.append("<answer fraction=\"0\" format=\"moodle_auto_format\">");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<text>false</text>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<feedback format=\"html\">");
                                  _builder.newLine();
                                  _builder.append("    ");
                                  _builder.append("<text></text>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("</feedback>");
                                  _builder.newLine();
                                  _builder.append("</answer>");
                                  _builder.newLine();
                                } else {
                                  _builder.append("<answer fraction=\"0\" format=\"moodle_auto_format\">");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<text>true</text>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<feedback format=\"html\">");
                                  _builder.newLine();
                                  _builder.append("    ");
                                  _builder.append("<text></text>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("</feedback>");
                                  _builder.newLine();
                                  _builder.append("</answer>");
                                  _builder.newLine();
                                  _builder.append("<answer fraction=\"100\" format=\"moodle_auto_format\">");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<text>false</text>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<feedback format=\"html\">");
                                  _builder.newLine();
                                  _builder.append("    ");
                                  _builder.append("<text></text>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("</feedback>");
                                  _builder.newLine();
                                  _builder.append("</answer>");
                                  _builder.newLine();
                                }
                              }
                              _builder.append("</question>");
                              _builder.newLine();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          {
            if ((exercise instanceof MultiChoiceDiagram)) {
              _builder.append("        ");
              int min = Integer.MAX_VALUE;
              _builder.newLineIfNotEmpty();
              {
                EList<Test> _tests_1 = ((MultiChoiceDiagram)exercise).getTests();
                for(final Test test_1 : _tests_1) {
                  {
                    Set<EClass> _keySet = this.diagrams.get(exercise).get(test_1).keySet();
                    for(final EClass eclass : _keySet) {
                      int counter = this.diagrams.get(exercise).get(test_1).get(eclass).size();
                      _builder.newLineIfNotEmpty();
                      {
                        if ((min > counter)) {
                          String _xblockexpression_11 = null;
                          {
                            min = counter;
                            _xblockexpression_11 = "";
                          }
                          _builder.append(_xblockexpression_11);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              _builder.append("       \t");
              _builder.append("<!-- ");
              EClass answersClass_1 = null;
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              _builder.append("       \t");
              _builder.append("<!-- ");
              EClass statementClass_1 = null;
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              {
                for(final EClass root_1 : this.roots) {
                  {
                    EClass _answers_1 = ((MultiChoiceDiagram)exercise).getConfig().getAnswers();
                    boolean _tripleNotEquals_3 = (_answers_1 != null);
                    if (_tripleNotEquals_3) {
                      {
                        boolean _equals_3 = ((MultiChoiceDiagram)exercise).getConfig().getAnswers().getName().equals(root_1.getName());
                        if (_equals_3) {
                          String _xblockexpression_12 = null;
                          {
                            answersClass_1 = root_1;
                            _xblockexpression_12 = "";
                          }
                          _builder.append(_xblockexpression_12);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                  {
                    EClass _statement_1 = ((MultiChoiceDiagram)exercise).getConfig().getStatement();
                    boolean _tripleNotEquals_4 = (_statement_1 != null);
                    if (_tripleNotEquals_4) {
                      {
                        boolean _equals_4 = ((MultiChoiceDiagram)exercise).getConfig().getStatement().getName().equals(root_1.getName());
                        if (_equals_4) {
                          String _xblockexpression_13 = null;
                          {
                            statementClass_1 = root_1;
                            _xblockexpression_13 = "";
                          }
                          _builder.append(_xblockexpression_13);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              {
                if ((answersClass_1 == null)) {
                  String _xblockexpression_14 = null;
                  {
                    int _size_5 = this.roots.size();
                    int _minus = (_size_5 - 1);
                    answersClass_1 = this.roots.get(_minus);
                    _xblockexpression_14 = "";
                  }
                  _builder.append(_xblockexpression_14);
                  _builder.newLineIfNotEmpty();
                }
              }
              {
                if ((statementClass_1 == null)) {
                  {
                    int _size_5 = this.roots.size();
                    boolean _greaterThan_5 = (_size_5 > 1);
                    if (_greaterThan_5) {
                      String _xblockexpression_15 = null;
                      {
                        statementClass_1 = this.roots.get(1);
                        _xblockexpression_15 = "";
                      }
                      _builder.append(_xblockexpression_15);
                      _builder.newLineIfNotEmpty();
                    } else {
                      String _xblockexpression_16 = null;
                      {
                        statementClass_1 = this.roots.get(0);
                        _xblockexpression_16 = "";
                      }
                      _builder.append(_xblockexpression_16);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              {
                EList<Test> _tests_2 = ((MultiChoiceDiagram)exercise).getTests();
                for(final Test test_2 : _tests_2) {
                  String _xifexpression_2 = null;
                  List<String> _get_1 = this.diagrams.get(exercise).get(test_2).get(statementClass_1);
                  boolean _tripleNotEquals_5 = (_get_1 != null);
                  if (_tripleNotEquals_5) {
                    String _xifexpression_3 = null;
                    int _size_6 = this.diagrams.get(exercise).get(test_2).get(statementClass_1).size();
                    boolean _greaterThan_6 = (_size_6 > 0);
                    if (_greaterThan_6) {
                      _xifexpression_3 = this.diagrams.get(exercise).get(test_2).get(statementClass_1).get(0);
                    } else {
                      _xifexpression_3 = null;
                    }
                    _xifexpression_2 = _xifexpression_3;
                  } else {
                    _xifexpression_2 = null;
                  }
                  String statement = _xifexpression_2;
                  _builder.newLineIfNotEmpty();
                  String _xifexpression_4 = null;
                  List<String> _get_2 = this.diagrams.get(exercise).get(test_2).get(answersClass_1);
                  boolean _tripleNotEquals_6 = (_get_2 != null);
                  if (_tripleNotEquals_6) {
                    String _xifexpression_5 = null;
                    int _size_7 = this.diagrams.get(exercise).get(test_2).get(answersClass_1).size();
                    boolean _greaterThan_7 = (_size_7 > 0);
                    if (_greaterThan_7) {
                      _xifexpression_5 = this.diagrams.get(exercise).get(test_2).get(answersClass_1).get(0);
                    }
                    _xifexpression_4 = _xifexpression_5;
                  }
                  String solution_1 = _xifexpression_4;
                  _builder.newLineIfNotEmpty();
                  List<String> answers_1 = new ArrayList<String>();
                  _builder.newLineIfNotEmpty();
                  Set<String> answersSet_1 = new LinkedHashSet<String>();
                  _builder.newLineIfNotEmpty();
                  {
                    if (((this.diagrams.get(exercise).get(test_2).get(answersClass_1) != null) && (this.diagrams.get(exercise).get(test_2).get(answersClass_1).size() > 0))) {
                      String _xblockexpression_17 = null;
                      {
                        answersSet_1.addAll(this.diagrams.get(exercise).get(test_2).get(answersClass_1));
                        _xblockexpression_17 = "";
                      }
                      _builder.append(_xblockexpression_17);
                      _builder.newLineIfNotEmpty();
                      String _xblockexpression_18 = null;
                      {
                        answers_1.addAll(answersSet_1);
                        _xblockexpression_18 = "";
                      }
                      _builder.append(_xblockexpression_18);
                      _builder.newLineIfNotEmpty();
                      String _xblockexpression_19 = null;
                      {
                        Collections.shuffle(answers_1);
                        _xblockexpression_19 = "";
                      }
                      _builder.append(_xblockexpression_19);
                      _builder.newLineIfNotEmpty();
                      _builder.append("   ");
                      _builder.append("<!--");
                      String _replace_5 = test_2.getSource().replace(".model", "");
                      String _plus_6 = ((this.projectPath + "/src-gen/html/diagrams/") + _replace_5);
                      String _plus_7 = (_plus_6 + "/");
                      String _plus_8 = (_plus_7 + statement);
                      File file_1 = new File(_plus_8);
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      {
                        if ((file_1.isFile() && file_1.exists())) {
                          _builder.append("<question type=\"multichoice\">");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<name>");
                          _builder.newLine();
                          _builder.append("    ");
                          _builder.append("<text>Question ");
                          int _plusPlus = i++;
                          _builder.append(_plusPlus, "    ");
                          _builder.append("</text>");
                          _builder.newLineIfNotEmpty();
                          _builder.append("  ");
                          _builder.append("</name>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<!-- ");
                          UUID uuid_1 = UUID.randomUUID();
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("  ");
                          _builder.append("<questiontext format=\"html\">");
                          _builder.newLine();
                          {
                            if ((((((MultiChoiceDiagram)exercise).getConfig().getStatement() != null) && (this.roots.size() > 1)) && statementClass_1.getName().equals(this.roots.get(1).getName()))) {
                              _builder.append("  ");
                              _builder.append("<text><![CDATA[<p>");
                              String _replace_6 = test_2.getQuestion().replace("\"", "\'");
                              _builder.append(_replace_6, "  ");
                              _builder.append("<br></p><p><img src=\"@@PLUGINFILE@@/exercise_");
                              _builder.append(uuid_1, "  ");
                              _builder.append(".png\" alt=\"");
                              String _replace_7 = test_2.getQuestion().replace("\"", "\'");
                              _builder.append(_replace_7, "  ");
                              _builder.append("\" width=\"30%\" height=\"30%\" class=\"img-responsive atto_image_button_text-bottom\"><br></p>]]></text>");
                              _builder.newLineIfNotEmpty();
                              _builder.append("  ");
                              _builder.append("<file name=\"exercise_");
                              _builder.append(uuid_1, "  ");
                              _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                              String _replace_8 = test_2.getSource().replace(".model", "");
                              String _plus_9 = ("diagrams/" + _replace_8);
                              String _plus_10 = (_plus_9 + "/");
                              String _plus_11 = (_plus_10 + statement);
                              String _stringBase64_1 = this.getStringBase64(_plus_11);
                              _builder.append(_stringBase64_1, "  ");
                              _builder.append("</file>");
                              _builder.newLineIfNotEmpty();
                            } else {
                              _builder.append("  ");
                              _builder.append("<text><![CDATA[<p>");
                              String _replace_9 = test_2.getQuestion().replace("\"", "\'");
                              _builder.append(_replace_9, "  ");
                              _builder.append("</p>]]></text>");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                          _builder.append("  ");
                          _builder.append("</questiontext>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<generalfeedback format=\"html\">");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<text></text>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("</generalfeedback>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<defaultgrade>1.0000000</defaultgrade>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<penalty>1.0000000</penalty>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<hidden>0</hidden>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<idnumber></idnumber>");
                          _builder.newLine();
                          {
                            Mode _mode = ((MultiChoiceDiagram)exercise).getConfig().getMode();
                            boolean _tripleEquals = (_mode == Mode.RADIOBUTTON);
                            if (_tripleEquals) {
                              _builder.append("  ");
                              _builder.append("<single>true</single>");
                              _builder.newLine();
                            } else {
                              Mode _mode_1 = ((MultiChoiceDiagram)exercise).getConfig().getMode();
                              boolean _tripleEquals_1 = (_mode_1 == Mode.CHECKBOX);
                              if (_tripleEquals_1) {
                                _builder.append("  ");
                                _builder.append("<single>false</single>");
                                _builder.newLine();
                              }
                            }
                          }
                          _builder.append("  ");
                          _builder.append("<shuffleanswers>true</shuffleanswers>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<answernumbering>abc</answernumbering>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<correctfeedback format=\"html\">");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<!--<text>Respuesta correcta</text>-->");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<text>Right answer.</text>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("</correctfeedback>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<partiallycorrectfeedback format=\"html\">");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<!--<text>Respuesta parcialmente correcta.</text>-->");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<text>Partially right answer.</text>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("</partiallycorrectfeedback>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<incorrectfeedback format=\"html\">");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<!--<text>Respuesta incorrecta.</text>-->");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<text>Wrong answer.</text>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("</incorrectfeedback>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<shownumcorrect/>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<!--");
                          int counter_1 = 0;
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("  ");
                          _builder.append("<!--");
                          int solutions = 1;
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("  ");
                          _builder.append("<!--");
                          double fraction = (100.0 / solutions);
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("  ");
                          String _xblockexpression_20 = null;
                          {
                            counter_1 = 0;
                            _xblockexpression_20 = "";
                          }
                          _builder.append(_xblockexpression_20, "  ");
                          _builder.newLineIfNotEmpty();
                          {
                            for(final String diagram_1 : answers_1) {
                              _builder.append("  ");
                              _builder.append("<!--");
                              String _replace_10 = test_2.getSource().replace(".model", "");
                              String _plus_12 = ((this.projectPath + "/src-gen/html/diagrams/") + _replace_10);
                              String _plus_13 = (_plus_12 + "/");
                              String _plus_14 = (_plus_13 + diagram_1);
                              File _file = new File(_plus_14);
                              File _file_1 = file_1 = _file;
                              _builder.append(_file_1, "  ");
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              {
                                if ((file_1.isFile() && file_1.exists())) {
                                  _builder.append("<!-- ");
                                  _builder.append(uuid_1 = UUID.randomUUID());
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  {
                                    if (((diagram_1.startsWith(answersClass_1.getName()) || diagram_1.contains(("/" + answersClass_1.getName()))) || diagram_1.contains(("\\" + answersClass_1.getName())))) {
                                      _builder.append("<!--");
                                      boolean s = false;
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                      {
                                        List<String> _get_3 = this.solutionsMap.get(exercise);
                                        for(final String sol : _get_3) {
                                          {
                                            if ((((diagram_1.startsWith((sol + "/")) || diagram_1.startsWith((sol + "\\"))) || diagram_1.contains((((sol + "/") + answersClass_1.getName()) + "_"))) || diagram_1.contains((((sol + "\\") + answersClass_1.getName()) + "_")))) {
                                              String _xblockexpression_21 = null;
                                              {
                                                s = true;
                                                _xblockexpression_21 = "";
                                              }
                                              _builder.append(_xblockexpression_21);
                                              _builder.newLineIfNotEmpty();
                                            }
                                          }
                                        }
                                      }
                                      {
                                        if ((s == true)) {
                                          {
                                            if ((counter_1 < (min - 1))) {
                                              String _xblockexpression_22 = null;
                                              {
                                                counter_1++;
                                                _xblockexpression_22 = "";
                                              }
                                              _builder.append(_xblockexpression_22);
                                              _builder.newLineIfNotEmpty();
                                              String _xblockexpression_23 = null;
                                              {
                                                solutions++;
                                                _xblockexpression_23 = "";
                                              }
                                              _builder.append(_xblockexpression_23);
                                              _builder.newLineIfNotEmpty();
                                            }
                                          }
                                        }
                                      }
                                      {
                                        if ((s || diagram_1.equals(solution_1))) {
                                          {
                                            if (((100 % solutions) == 0)) {
                                              _builder.append("<answer fraction=\"");
                                              _builder.append((100 / solutions));
                                              _builder.append("\" format=\"html\">");
                                              _builder.newLineIfNotEmpty();
                                            } else {
                                              _builder.append("<!--");
                                              NumberFormat _numberInstance = NumberFormat.getNumberInstance(Locale.ENGLISH);
                                              DecimalFormat formatter = ((DecimalFormat) _numberInstance);
                                              _builder.append("-->");
                                              _builder.newLineIfNotEmpty();
                                              String _xblockexpression_24 = null;
                                              {
                                                formatter.applyPattern("###.#####");
                                                _xblockexpression_24 = "";
                                              }
                                              _builder.append(_xblockexpression_24);
                                              _builder.newLineIfNotEmpty();
                                              _builder.append("<answer fraction=\"");
                                              String _format = formatter.format(fraction);
                                              _builder.append(_format);
                                              _builder.append("\" format=\"html\">");
                                              _builder.newLineIfNotEmpty();
                                            }
                                          }
                                          _builder.append(" ");
                                          _builder.append("<!--");
                                          String size = "60";
                                          _builder.append("-->");
                                          _builder.newLineIfNotEmpty();
                                          _builder.append(" ");
                                          _builder.append("<text><![CDATA[<p><img src=\"@@PLUGINFILE@@/exercise_");
                                          _builder.append(uuid_1, " ");
                                          _builder.append(".png\" alt=\"\" width=\"");
                                          _builder.append(size, " ");
                                          _builder.append("%\" height=\"");
                                          _builder.append(size, " ");
                                          _builder.append("%\" role=\"presentation\" class=\"img-responsive atto_image_button_text-bottom\"><br></p>]]></text>");
                                          _builder.newLineIfNotEmpty();
                                          _builder.append(" ");
                                          _builder.append("<file name=\"exercise_");
                                          _builder.append(uuid_1, " ");
                                          _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                                          String _replace_11 = test_2.getSource().replace(".model", "");
                                          String _plus_15 = ("diagrams/" + _replace_11);
                                          String _plus_16 = (_plus_15 + "/");
                                          String _plus_17 = (_plus_16 + diagram_1);
                                          String _stringBase64_2 = this.getStringBase64(_plus_17);
                                          _builder.append(_stringBase64_2, " ");
                                          _builder.append("</file>");
                                          _builder.newLineIfNotEmpty();
                                          _builder.append(" ");
                                          _builder.append("<feedback format=\"html\">");
                                          _builder.newLine();
                                          _builder.append(" ");
                                          _builder.append("<text></text>");
                                          _builder.newLine();
                                          _builder.append(" ");
                                          _builder.append("</feedback>");
                                          _builder.newLine();
                                          _builder.append(" ");
                                          _builder.append("</answer>");
                                          _builder.newLine();
                                        } else {
                                          {
                                            if ((counter_1 < (min - 1))) {
                                              _builder.append(" ");
                                              String _xblockexpression_25 = null;
                                              {
                                                counter_1++;
                                                _xblockexpression_25 = "";
                                              }
                                              _builder.append(_xblockexpression_25, " ");
                                              _builder.newLineIfNotEmpty();
                                              _builder.append(" ");
                                              _builder.append("<!--");
                                              _builder.append(s = false, " ");
                                              _builder.append("-->");
                                              _builder.newLineIfNotEmpty();
                                              {
                                                List<String> _get_4 = this.solutionsMap.get(exercise);
                                                for(final String sol_1 : _get_4) {
                                                  {
                                                    if ((((diagram_1.startsWith((sol_1 + "/")) || diagram_1.startsWith((sol_1 + "\\"))) || diagram_1.contains((((sol_1 + "/") + answersClass_1.getName()) + "_"))) || diagram_1.contains((((sol_1 + "\\") + answersClass_1.getName()) + "_")))) {
                                                      _builder.append(" ");
                                                      String _xblockexpression_26 = null;
                                                      {
                                                        s = true;
                                                        _xblockexpression_26 = "";
                                                      }
                                                      _builder.append(_xblockexpression_26, " ");
                                                      _builder.newLineIfNotEmpty();
                                                    }
                                                  }
                                                }
                                              }
                                              {
                                                if ((s || diagram_1.equals(solution_1))) {
                                                  {
                                                    if (((100 % solutions) == 0)) {
                                                      _builder.append("<answer fraction=\"");
                                                      _builder.append((100 / solutions));
                                                      _builder.append("\" format=\"html\">");
                                                      _builder.newLineIfNotEmpty();
                                                    } else {
                                                      _builder.append("<!--");
                                                      NumberFormat _numberInstance_1 = NumberFormat.getNumberInstance(Locale.ENGLISH);
                                                      DecimalFormat formatter_1 = ((DecimalFormat) _numberInstance_1);
                                                      _builder.append("-->");
                                                      _builder.newLineIfNotEmpty();
                                                      String _xblockexpression_27 = null;
                                                      {
                                                        formatter_1.applyPattern("###.#####");
                                                        _xblockexpression_27 = "";
                                                      }
                                                      _builder.append(_xblockexpression_27);
                                                      _builder.newLineIfNotEmpty();
                                                      _builder.append("<answer fraction=\"");
                                                      String _format_1 = formatter_1.format(fraction);
                                                      _builder.append(_format_1);
                                                      _builder.append("\" format=\"html\">");
                                                      _builder.newLineIfNotEmpty();
                                                    }
                                                  }
                                                } else {
                                                  _builder.append("<answer fraction=\"0\" format=\"html\">");
                                                  _builder.newLine();
                                                }
                                              }
                                              _builder.append(" ");
                                              _builder.append("<!--");
                                              String size_1 = "60";
                                              _builder.append("-->");
                                              _builder.newLineIfNotEmpty();
                                              _builder.append(" ");
                                              _builder.append("<text><![CDATA[<p><img src=\"@@PLUGINFILE@@/exercise_");
                                              _builder.append(uuid_1, " ");
                                              _builder.append(".png\" alt=\"\" width=\"");
                                              _builder.append(size_1, " ");
                                              _builder.append("%\" height=\"");
                                              _builder.append(size_1, " ");
                                              _builder.append("%\" role=\"presentation\" class=\"img-responsive atto_image_button_text-bottom\"><br></p>]]></text>");
                                              _builder.newLineIfNotEmpty();
                                              _builder.append(" ");
                                              _builder.append("<file name=\"exercise_");
                                              _builder.append(uuid_1, " ");
                                              _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                                              String _replace_12 = test_2.getSource().replace(".model", "");
                                              String _plus_18 = ("diagrams/" + _replace_12);
                                              String _plus_19 = (_plus_18 + "/");
                                              String _plus_20 = (_plus_19 + diagram_1);
                                              String _stringBase64_3 = this.getStringBase64(_plus_20);
                                              _builder.append(_stringBase64_3, " ");
                                              _builder.append("</file>");
                                              _builder.newLineIfNotEmpty();
                                              _builder.append(" ");
                                              _builder.append("<feedback format=\"html\">");
                                              _builder.newLine();
                                              _builder.append(" ");
                                              _builder.append("<text></text>");
                                              _builder.newLine();
                                              _builder.append(" ");
                                              _builder.append("</feedback>");
                                              _builder.newLine();
                                              _builder.append(" ");
                                              _builder.append("</answer>");
                                              _builder.newLine();
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          _builder.append("</question>");
                          _builder.newLine();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          Map<Test, List<AbstractMap.SimpleEntry<String, Boolean>>> mapTextOptions = new HashMap<Test, List<AbstractMap.SimpleEntry<String, Boolean>>>();
          _builder.newLineIfNotEmpty();
          {
            if ((exercise instanceof MultiChoiceEmendation)) {
              _builder.append("        ");
              int min_1 = Integer.MAX_VALUE;
              _builder.newLineIfNotEmpty();
              _builder.append("        ");
              int rndIndex = (-1);
              _builder.newLineIfNotEmpty();
              {
                EList<Test> _tests_3 = ((MultiChoiceEmendation)exercise).getTests();
                for(final Test test_3 : _tests_3) {
                  Test t = test_3;
                  _builder.newLineIfNotEmpty();
                  {
                    if (((this.options.get(exercise) != null) && (this.options.get(exercise).get(test_3) != null))) {
                      int counter_2 = 0;
                      _builder.newLineIfNotEmpty();
                      String _xblockexpression_28 = null;
                      {
                        rndIndex = ModelManager.getRandomIndex(this.options.get(exercise).get(test_3));
                        _xblockexpression_28 = "";
                      }
                      _builder.append(_xblockexpression_28);
                      _builder.newLineIfNotEmpty();
                      List<AbstractMap.SimpleEntry<String, Boolean>> textOptions = new ArrayList<AbstractMap.SimpleEntry<String, Boolean>>();
                      _builder.newLineIfNotEmpty();
                      {
                        int _size_8 = this.options.get(exercise).get(test_3).size();
                        boolean _greaterThan_8 = (_size_8 > 0);
                        if (_greaterThan_8) {
                          {
                            List<EduTestSuperGenerator.TestOption> _get_5 = this.options.get(exercise).get(test_3).get(rndIndex);
                            for(final EduTestSuperGenerator.TestOption opt : _get_5) {
                              {
                                Set<String> _keySet_1 = opt.text.keySet();
                                for(final String key : _keySet_1) {
                                  {
                                    List<String> _get_6 = opt.text.get(key);
                                    for(final String text : _get_6) {
                                      boolean found = false;
                                      _builder.newLineIfNotEmpty();
                                      {
                                        for(final AbstractMap.SimpleEntry<String, Boolean> entry : textOptions) {
                                          {
                                            boolean _equals_5 = entry.getKey().equals(text);
                                            if (_equals_5) {
                                              String _xblockexpression_29 = null;
                                              {
                                                found = true;
                                                _xblockexpression_29 = "";
                                              }
                                              _builder.append(_xblockexpression_29);
                                              _builder.newLineIfNotEmpty();
                                            }
                                          }
                                        }
                                      }
                                      {
                                        if ((found == false)) {
                                          String _xblockexpression_30 = null;
                                          {
                                            counter_2++;
                                            _xblockexpression_30 = "";
                                          }
                                          _builder.append(_xblockexpression_30);
                                          _builder.newLineIfNotEmpty();
                                          String _xblockexpression_31 = null;
                                          {
                                            AbstractMap.SimpleEntry<String, Boolean> _simpleEntry = new AbstractMap.SimpleEntry<String, Boolean>(text, Boolean.valueOf(false));
                                            textOptions.add(_simpleEntry);
                                            _xblockexpression_31 = "";
                                          }
                                          _builder.append(_xblockexpression_31);
                                          _builder.newLineIfNotEmpty();
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          String _xblockexpression_32 = null;
                          {
                            mapTextOptions.put(test_3, textOptions);
                            _xblockexpression_32 = "";
                          }
                          _builder.append(_xblockexpression_32);
                          _builder.newLineIfNotEmpty();
                          {
                            if ((min_1 > counter_2)) {
                              String _xblockexpression_33 = null;
                              {
                                min_1 = counter_2;
                                _xblockexpression_33 = "";
                              }
                              _builder.append(_xblockexpression_33);
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                    }
                  }
                  _builder.append("       \t");
                  _builder.append("<!-- ");
                  EClass answersClass_2 = null;
                  _builder.append("-->");
                  _builder.newLineIfNotEmpty();
                  _builder.append("       \t");
                  _builder.append("<!-- ");
                  EClass statementClass_2 = null;
                  _builder.append("-->");
                  _builder.newLineIfNotEmpty();
                  {
                    for(final EClass root_2 : this.roots) {
                      {
                        EClass _answers_2 = ((MultiChoiceEmendation)exercise).getConfig().getAnswers();
                        boolean _tripleNotEquals_7 = (_answers_2 != null);
                        if (_tripleNotEquals_7) {
                          {
                            boolean _equals_6 = ((MultiChoiceEmendation)exercise).getConfig().getAnswers().getName().equals(root_2.getName());
                            if (_equals_6) {
                              String _xblockexpression_34 = null;
                              {
                                answersClass_2 = root_2;
                                _xblockexpression_34 = "";
                              }
                              _builder.append(_xblockexpression_34);
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                      {
                        EClass _statement_2 = ((MultiChoiceEmendation)exercise).getConfig().getStatement();
                        boolean _tripleNotEquals_8 = (_statement_2 != null);
                        if (_tripleNotEquals_8) {
                          {
                            boolean _equals_7 = ((MultiChoiceEmendation)exercise).getConfig().getStatement().getName().equals(root_2.getName());
                            if (_equals_7) {
                              String _xblockexpression_35 = null;
                              {
                                statementClass_2 = root_2;
                                _xblockexpression_35 = "";
                              }
                              _builder.append(_xblockexpression_35);
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                    }
                  }
                  {
                    if ((answersClass_2 == null)) {
                      String _xblockexpression_36 = null;
                      {
                        int _size_9 = this.roots.size();
                        int _minus = (_size_9 - 1);
                        answersClass_2 = this.roots.get(_minus);
                        _xblockexpression_36 = "";
                      }
                      _builder.append(_xblockexpression_36);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  {
                    if ((statementClass_2 == null)) {
                      {
                        int _size_9 = this.roots.size();
                        boolean _greaterThan_9 = (_size_9 > 1);
                        if (_greaterThan_9) {
                          String _xblockexpression_37 = null;
                          {
                            statementClass_2 = this.roots.get(1);
                            _xblockexpression_37 = "";
                          }
                          _builder.append(_xblockexpression_37);
                          _builder.newLineIfNotEmpty();
                        } else {
                          String _xblockexpression_38 = null;
                          {
                            statementClass_2 = this.roots.get(0);
                            _xblockexpression_38 = "";
                          }
                          _builder.append(_xblockexpression_38);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                  {
                    if (((this.options.get(exercise) != null) && (this.options.get(exercise).get(t) != null))) {
                      _builder.append("<!--");
                      List<String> diagrams = new ArrayList<String>();
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      _builder.append("<!--");
                      List<EduTestSuperGenerator.TestOption> answersOptions = new ArrayList<EduTestSuperGenerator.TestOption>();
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      {
                        List<List<EduTestSuperGenerator.TestOption>> _get_7 = this.options.get(exercise).get(t);
                        boolean _tripleNotEquals_9 = (_get_7 != null);
                        if (_tripleNotEquals_9) {
                          {
                            int _size_10 = this.options.get(exercise).get(t).size();
                            boolean _greaterThan_10 = (_size_10 > 0);
                            if (_greaterThan_10) {
                              {
                                List<EduTestSuperGenerator.TestOption> _get_8 = this.options.get(exercise).get(t).get(rndIndex);
                                for(final EduTestSuperGenerator.TestOption opt_1 : _get_8) {
                                  {
                                    int _size_11 = opt_1.text.size();
                                    boolean _greaterThan_11 = (_size_11 > 0);
                                    if (_greaterThan_11) {
                                      {
                                        if ((opt_1.solution == true)) {
                                          _builder.append("<!--");
                                          boolean _add = diagrams.add(opt_1.path);
                                          _builder.append(_add);
                                          _builder.append("-->");
                                          _builder.newLineIfNotEmpty();
                                          _builder.append("<!--");
                                          boolean _add_1 = answersOptions.add(opt_1);
                                          _builder.append(_add_1);
                                          _builder.append("-->");
                                          _builder.newLineIfNotEmpty();
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      {
                        int _size_12 = diagrams.size();
                        boolean _greaterThan_12 = (_size_12 > 0);
                        if (_greaterThan_12) {
                          _builder.append("<!--");
                          int rndSolution = (-1);
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          String _xblockexpression_39 = null;
                          {
                            rndSolution = ModelManager.getRandomIndex(diagrams);
                            _xblockexpression_39 = "";
                          }
                          _builder.append(_xblockexpression_39);
                          _builder.newLineIfNotEmpty();
                          _builder.append("            ");
                          _builder.append("<!--");
                          String diagram_2 = diagrams.get(rndSolution);
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          {
                            int _length = diagram_2.length();
                            boolean _greaterThan_13 = (_length > 0);
                            if (_greaterThan_13) {
                              _builder.append("<!--");
                              int _indexOf = diagram_2.indexOf("/data/out/");
                              int _length_1 = "/data/out/".length();
                              int _plus_21 = (_indexOf + _length_1);
                              String data = diagram_2.substring(_plus_21, diagram_2.lastIndexOf("/"));
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              _builder.append("<!--");
                              String model = data.substring(0, data.lastIndexOf("/"));
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              _builder.append("<!--");
                              int _indexOf_1 = data.indexOf((model + "/"));
                              int _length_2 = (model + "/").length();
                              int _plus_22 = (_indexOf_1 + _length_2);
                              String mutOperator = data.substring(_plus_22, data.length());
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              _builder.append("<!--");
                              String _name = statementClass_2.getName();
                              String _plus_23 = ((((("diagrams/" + model) + "/") + mutOperator) + "/") + _name);
                              String _plus_24 = (_plus_23 + "_");
                              int _lastIndexOf = diagram_2.lastIndexOf("/");
                              int _plus_25 = (_lastIndexOf + 1);
                              String _substring = diagram_2.substring(_plus_25, diagram_2.length());
                              String _plus_26 = (_plus_24 + _substring);
                              _builder.append(diagram_2 = _plus_26);
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              _builder.append("           ");
                              _builder.append("<!--");
                              File file_2 = new File(((this.projectPath + "/src-gen/html/") + diagram_2));
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              {
                                if ((file_2.isFile() && file_2.exists())) {
                                  _builder.append("<question type=\"multichoice\">");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<name>");
                                  _builder.newLine();
                                  _builder.append("     ");
                                  _builder.append("<text>Question ");
                                  int _plusPlus_1 = i++;
                                  _builder.append(_plusPlus_1, "     ");
                                  _builder.append("</text>");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("  ");
                                  _builder.append("</name>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<questiontext format=\"html\">");
                                  _builder.newLine();
                                  _builder.append("    ");
                                  _builder.append("<!-- ");
                                  UUID uuidStatement = UUID.randomUUID();
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("    ");
                                  _builder.append("<!-- ");
                                  UUID uuidAnswers = UUID.randomUUID();
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  {
                                    if (((statementClass_2 != null) && (answersClass_2 == null))) {
                                      _builder.append("<text><![CDATA[<p>");
                                      String _replace_13 = t.getQuestion().replace("\"", "\'");
                                      _builder.append(_replace_13);
                                      _builder.append("<br><br><img src=\"@@PLUGINFILE@@/exercise_");
                                      _builder.append(uuidStatement);
                                      _builder.append(".png\" alt=\"multiple choice\" width=\"20%\" height=\"20%\" class=\"img-responsive atto_image_button_text-bottom\"><br></p>]]></text>");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("            ");
                                      _builder.append("<file name=\"exercise_");
                                      _builder.append(uuidStatement, "            ");
                                      _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                                      String _stringBase64_4 = this.getStringBase64(diagram_2);
                                      _builder.append(_stringBase64_4, "            ");
                                      _builder.append("</file>");
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                  {
                                    if (((statementClass_2 != null) && (answersClass_2 != null))) {
                                      _builder.append("<text><![CDATA[<p>");
                                      String _replace_14 = t.getQuestion().replace("\"", "\'");
                                      _builder.append(_replace_14);
                                      _builder.append("<br><br><img src=\"@@PLUGINFILE@@/exercise_");
                                      _builder.append(uuidStatement);
                                      _builder.append(".png\" alt=\"multiple choice\" width=\"20%\" height=\"20%\" class=\"img-responsive atto_image_button_text-bottom\"><br><br><img src=\"@@PLUGINFILE@@/exercise_");
                                      _builder.append(uuidAnswers);
                                      _builder.append(".png\" alt=\"multiple choice\" width=\"20%\" height=\"20%\" class=\"img-responsive atto_image_button_text-bottom\"><br></p>]]></text>");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("            ");
                                      _builder.append("<file name=\"exercise_");
                                      _builder.append(uuidStatement, "            ");
                                      _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                                      String _stringBase64_5 = this.getStringBase64(diagram_2);
                                      _builder.append(_stringBase64_5, "            ");
                                      _builder.append("</file>");
                                      _builder.newLineIfNotEmpty();
                                      String _xblockexpression_40 = null;
                                      {
                                        String _get_9 = diagrams.get(rndSolution);
                                        int _indexOf_2 = diagrams.get(rndSolution).indexOf("/data/out/");
                                        int _length_3 = "/data/out/".length();
                                        int _plus_27 = (_indexOf_2 + _length_3);
                                        data = _get_9.substring(_plus_27, diagrams.get(rndSolution).lastIndexOf("/"));
                                        _xblockexpression_40 = "";
                                      }
                                      _builder.append(_xblockexpression_40);
                                      _builder.newLineIfNotEmpty();
                                      _builder.append(model = data.substring(0, data.lastIndexOf("/")));
                                      _builder.newLineIfNotEmpty();
                                      String _xblockexpression_41 = null;
                                      {
                                        int _indexOf_2 = data.indexOf((model + "/"));
                                        int _length_3 = (model + "/").length();
                                        int _plus_27 = (_indexOf_2 + _length_3);
                                        mutOperator = data.substring(_plus_27, data.length());
                                        _xblockexpression_41 = "";
                                      }
                                      _builder.append(_xblockexpression_41);
                                      _builder.newLineIfNotEmpty();
                                      String _xblockexpression_42 = null;
                                      {
                                        String _name_1 = answersClass_2.getName();
                                        String _plus_27 = ((((("diagrams/" + model) + "/") + mutOperator) + "/") + _name_1);
                                        String _plus_28 = (_plus_27 + "_");
                                        String _get_9 = diagrams.get(rndSolution);
                                        int _lastIndexOf_1 = diagrams.get(rndSolution).lastIndexOf("/");
                                        int _plus_29 = (_lastIndexOf_1 + 1);
                                        String _substring_1 = _get_9.substring(_plus_29, diagrams.get(rndSolution).length());
                                        String _plus_30 = (_plus_28 + _substring_1);
                                        diagram_2 = _plus_30;
                                        _xblockexpression_42 = "";
                                      }
                                      _builder.append(_xblockexpression_42);
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("            ");
                                      File _file_2 = new File(((this.projectPath + "/src-gen/html/") + diagram_2));
                                      _builder.append(file_2 = _file_2, "            ");
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                      {
                                        if ((file_2.isFile() && file_2.exists())) {
                                          _builder.append("            ");
                                          _builder.append("<file name=\"exercise_");
                                          _builder.append(uuidAnswers, "            ");
                                          _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                                          String _stringBase64_6 = this.getStringBase64(diagram_2);
                                          _builder.append(_stringBase64_6, "            ");
                                          _builder.append("</file>");
                                          _builder.newLineIfNotEmpty();
                                        }
                                      }
                                    }
                                  }
                                  _builder.append("  ");
                                  _builder.append("</questiontext>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<generalfeedback format=\"html\">");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<text></text>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("</generalfeedback>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<defaultgrade>1.0000000</defaultgrade>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<penalty>0.3333333</penalty>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<hidden>0</hidden>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<idnumber></idnumber>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<single>false</single>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<shuffleanswers>true</shuffleanswers>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<answernumbering>abc");
                                  _builder.append("</answernumbering>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<correctfeedback format=\"html\">");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<!--<text>Respuesta correcta</text>-->");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<text>Right answer.</text>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("</correctfeedback>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<partiallycorrectfeedback format=\"html\">");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<!--<text>Respuesta parcialmente correcta.</text>-->");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<text>Partially right answer.</text>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("</partiallycorrectfeedback>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<incorrectfeedback format=\"html\">");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<!--<text>Respuesta incorrecta.</text>-->");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<text>Wrong answer.</text>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("</incorrectfeedback>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<shownumcorrect/>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  int solutions_1 = 0;
                                  _builder.newLineIfNotEmpty();
                                  {
                                    List<List<EduTestSuperGenerator.TestOption>> _get_9 = this.options.get(exercise).get(t);
                                    boolean _tripleNotEquals_10 = (_get_9 != null);
                                    if (_tripleNotEquals_10) {
                                      {
                                        int _size_13 = this.options.get(exercise).get(t).size();
                                        boolean _greaterThan_14 = (_size_13 > 0);
                                        if (_greaterThan_14) {
                                          {
                                            for(final EduTestSuperGenerator.TestOption opt_2 : answersOptions) {
                                              _builder.append("  ");
                                              List<String> textOptions_1 = new ArrayList<String>();
                                              _builder.newLineIfNotEmpty();
                                              {
                                                int _size_14 = opt_2.text.size();
                                                boolean _greaterThan_15 = (_size_14 > 0);
                                                if (_greaterThan_15) {
                                                  {
                                                    if ((opt_2.solution == true)) {
                                                      {
                                                        Set<String> _keySet_2 = opt_2.text.keySet();
                                                        for(final String key_1 : _keySet_2) {
                                                          {
                                                            List<String> _get_10 = opt_2.text.get(key_1);
                                                            for(final String text_1 : _get_10) {
                                                              {
                                                                boolean _contains = textOptions_1.contains(text_1);
                                                                boolean _not = (!_contains);
                                                                if (_not) {
                                                                  _builder.append("  ");
                                                                  String _xblockexpression_43 = null;
                                                                  {
                                                                    solutions_1++;
                                                                    _xblockexpression_43 = "";
                                                                  }
                                                                  _builder.append(_xblockexpression_43, "  ");
                                                                  _builder.newLineIfNotEmpty();
                                                                  _builder.append("  ");
                                                                  String _xblockexpression_44 = null;
                                                                  {
                                                                    textOptions_1.add(text_1);
                                                                    _xblockexpression_44 = "";
                                                                  }
                                                                  _builder.append(_xblockexpression_44, "  ");
                                                                  _builder.newLineIfNotEmpty();
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    } else {
                                                      {
                                                        Set<String> _keySet_3 = opt_2.text.keySet();
                                                        for(final String key_2 : _keySet_3) {
                                                          {
                                                            List<String> _get_11 = opt_2.text.get(key_2);
                                                            for(final String text_2 : _get_11) {
                                                              {
                                                                boolean _contains_1 = textOptions_1.contains(text_2);
                                                                boolean _not_1 = (!_contains_1);
                                                                if (_not_1) {
                                                                  _builder.append("  ");
                                                                  String _xblockexpression_45 = null;
                                                                  {
                                                                    textOptions_1.add(text_2);
                                                                    _xblockexpression_45 = "";
                                                                  }
                                                                  _builder.append(_xblockexpression_45, "  ");
                                                                  _builder.newLineIfNotEmpty();
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                      {
                                        int _size_15 = this.options.get(exercise).get(t).size();
                                        boolean _greaterThan_16 = (_size_15 > 0);
                                        if (_greaterThan_16) {
                                          {
                                            for(final EduTestSuperGenerator.TestOption opt_3 : answersOptions) {
                                              {
                                                if ((opt_3.solution == true)) {
                                                  {
                                                    int _size_16 = opt_3.text.size();
                                                    boolean _greaterThan_17 = (_size_16 > 0);
                                                    if (_greaterThan_17) {
                                                      {
                                                        Set<String> _keySet_4 = opt_3.text.keySet();
                                                        for(final String key_3 : _keySet_4) {
                                                          {
                                                            List<String> _get_12 = opt_3.text.get(key_3);
                                                            for(final String text_3 : _get_12) {
                                                              _builder.append("  ");
                                                              boolean found_1 = false;
                                                              _builder.newLineIfNotEmpty();
                                                              {
                                                                List<AbstractMap.SimpleEntry<String, Boolean>> _get_13 = mapTextOptions.get(t);
                                                                for(final AbstractMap.SimpleEntry<String, Boolean> entry_1 : _get_13) {
                                                                  {
                                                                    if ((entry_1.getKey().equals(text_3) && (!(entry_1.getValue()).booleanValue()))) {
                                                                      _builder.append("  ");
                                                                      String _xblockexpression_46 = null;
                                                                      {
                                                                        found_1 = true;
                                                                        _xblockexpression_46 = "";
                                                                      }
                                                                      _builder.append(_xblockexpression_46, "  ");
                                                                      _builder.newLineIfNotEmpty();
                                                                      _builder.append("  ");
                                                                      String _xblockexpression_47 = null;
                                                                      {
                                                                        entry_1.setValue(Boolean.valueOf(true));
                                                                        _xblockexpression_47 = "";
                                                                      }
                                                                      _builder.append(_xblockexpression_47, "  ");
                                                                      _builder.newLineIfNotEmpty();
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                              {
                                                                if ((found_1 == true)) {
                                                                  _builder.append("  ");
                                                                  _builder.append("<!--");
                                                                  double fraction_1 = (100.0 / solutions_1);
                                                                  _builder.append("-->");
                                                                  _builder.newLineIfNotEmpty();
                                                                  {
                                                                    if (((100 % solutions_1) == 0)) {
                                                                      _builder.append("  ");
                                                                      _builder.append("<answer fraction=\"");
                                                                      _builder.append((100 / solutions_1), "  ");
                                                                      _builder.append("\" format=\"html\">");
                                                                      _builder.newLineIfNotEmpty();
                                                                      _builder.append("  ");
                                                                      _builder.append("<text><![CDATA[<p>");
                                                                      String _trim = text_3.trim();
                                                                      _builder.append(_trim, "  ");
                                                                      _builder.append("<br></p>]]></text>");
                                                                      _builder.newLineIfNotEmpty();
                                                                      _builder.append("  ");
                                                                      _builder.append("<feedback format=\"html\">");
                                                                      _builder.newLine();
                                                                      _builder.append("  ");
                                                                      _builder.append("<text></text>");
                                                                      _builder.newLine();
                                                                      _builder.append("  ");
                                                                      _builder.append("</feedback>");
                                                                      _builder.newLine();
                                                                      _builder.append("  ");
                                                                      _builder.append("</answer>");
                                                                      _builder.newLine();
                                                                    } else {
                                                                      _builder.append("  ");
                                                                      _builder.append("<!--");
                                                                      NumberFormat _numberInstance_2 = NumberFormat.getNumberInstance(Locale.ENGLISH);
                                                                      DecimalFormat formatter_2 = ((DecimalFormat) _numberInstance_2);
                                                                      _builder.append("-->");
                                                                      _builder.newLineIfNotEmpty();
                                                                      _builder.append("  ");
                                                                      String _xblockexpression_48 = null;
                                                                      {
                                                                        formatter_2.applyPattern("###.#####");
                                                                        _xblockexpression_48 = "";
                                                                      }
                                                                      _builder.append(_xblockexpression_48, "  ");
                                                                      _builder.newLineIfNotEmpty();
                                                                      _builder.append("  ");
                                                                      _builder.append("<answer fraction=\"");
                                                                      String _format_2 = formatter_2.format(fraction_1);
                                                                      _builder.append(_format_2, "  ");
                                                                      _builder.append("\" format=\"html\">");
                                                                      _builder.newLineIfNotEmpty();
                                                                      _builder.append("  ");
                                                                      _builder.append("<text><![CDATA[<p>");
                                                                      String _trim_1 = text_3.trim();
                                                                      _builder.append(_trim_1, "  ");
                                                                      _builder.append("<br></p>]]></text>");
                                                                      _builder.newLineIfNotEmpty();
                                                                      _builder.append("  ");
                                                                      _builder.append("<feedback format=\"html\">");
                                                                      _builder.newLine();
                                                                      _builder.append("  ");
                                                                      _builder.append("<text></text>");
                                                                      _builder.newLine();
                                                                      _builder.append("  ");
                                                                      _builder.append("</feedback>");
                                                                      _builder.newLine();
                                                                      _builder.append("  ");
                                                                      _builder.append("</answer>");
                                                                      _builder.newLine();
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                      {
                                        int _size_17 = this.options.get(exercise).get(t).size();
                                        boolean _greaterThan_18 = (_size_17 > 0);
                                        if (_greaterThan_18) {
                                          {
                                            List<EduTestSuperGenerator.TestOption> _get_14 = this.options.get(exercise).get(t).get(rndIndex);
                                            for(final EduTestSuperGenerator.TestOption opt_4 : _get_14) {
                                              {
                                                if ((opt_4.solution == false)) {
                                                  _builder.append("  ");
                                                  int counter_3 = 0;
                                                  _builder.newLineIfNotEmpty();
                                                  {
                                                    int _size_18 = opt_4.text.size();
                                                    boolean _greaterThan_19 = (_size_18 > 0);
                                                    if (_greaterThan_19) {
                                                      {
                                                        Set<String> _keySet_5 = opt_4.text.keySet();
                                                        for(final String key_4 : _keySet_5) {
                                                          {
                                                            List<String> _get_15 = opt_4.text.get(key_4);
                                                            for(final String text_4 : _get_15) {
                                                              _builder.append("  ");
                                                              boolean found_2 = false;
                                                              _builder.newLineIfNotEmpty();
                                                              {
                                                                List<AbstractMap.SimpleEntry<String, Boolean>> _get_16 = mapTextOptions.get(t);
                                                                for(final AbstractMap.SimpleEntry<String, Boolean> entry_2 : _get_16) {
                                                                  {
                                                                    if ((entry_2.getKey().equals(text_4) && (!(entry_2.getValue()).booleanValue()))) {
                                                                      _builder.append("  ");
                                                                      String _xblockexpression_49 = null;
                                                                      {
                                                                        found_2 = true;
                                                                        _xblockexpression_49 = "";
                                                                      }
                                                                      _builder.append(_xblockexpression_49, "  ");
                                                                      _builder.newLineIfNotEmpty();
                                                                      _builder.append("  ");
                                                                      String _xblockexpression_50 = null;
                                                                      {
                                                                        entry_2.setValue(Boolean.valueOf(true));
                                                                        _xblockexpression_50 = "";
                                                                      }
                                                                      _builder.append(_xblockexpression_50, "  ");
                                                                      _builder.newLineIfNotEmpty();
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                              {
                                                                if ((found_2 == true)) {
                                                                  {
                                                                    if ((counter_3 < ((min_1 - solutions_1) + 1))) {
                                                                      _builder.append("  ");
                                                                      _builder.append("<answer fraction=\"0\" format=\"html\">");
                                                                      _builder.newLine();
                                                                      _builder.append("  ");
                                                                      _builder.append("<text><![CDATA[<p>");
                                                                      String _trim_2 = text_4.trim();
                                                                      _builder.append(_trim_2, "  ");
                                                                      _builder.append("<br></p>]]></text>");
                                                                      _builder.newLineIfNotEmpty();
                                                                      _builder.append("  ");
                                                                      _builder.append("<feedback format=\"html\">");
                                                                      _builder.newLine();
                                                                      _builder.append("  ");
                                                                      _builder.append("<text></text>");
                                                                      _builder.newLine();
                                                                      _builder.append("  ");
                                                                      _builder.append("</feedback>");
                                                                      _builder.newLine();
                                                                      _builder.append("  ");
                                                                      _builder.append("</answer>");
                                                                      _builder.newLine();
                                                                      _builder.append("  ");
                                                                      String _xblockexpression_51 = null;
                                                                      {
                                                                        counter_3++;
                                                                        _xblockexpression_51 = "";
                                                                      }
                                                                      _builder.append(_xblockexpression_51, "  ");
                                                                      _builder.newLineIfNotEmpty();
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  _builder.append("</question>");
                                  _builder.newLine();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          {
            if ((exercise instanceof MatchPairs)) {
              _builder.append("        ");
              int min_2 = Integer.MAX_VALUE;
              _builder.newLineIfNotEmpty();
              _builder.append("        ");
              int index = 0;
              _builder.newLineIfNotEmpty();
              _builder.append("        ");
              int max = Integer.MIN_VALUE;
              _builder.newLineIfNotEmpty();
              {
                EList<Test> _tests_4 = ((MatchPairs)exercise).getTests();
                for(final Test test_4 : _tests_4) {
                  {
                    if (((this.options.get(exercise) != null) && (this.options.get(exercise).get(test_4) != null))) {
                      List<String> textOptions_2 = new ArrayList<String>();
                      _builder.newLineIfNotEmpty();
                      int k = 0;
                      _builder.newLineIfNotEmpty();
                      int counter_4 = 0;
                      _builder.newLineIfNotEmpty();
                      int rndIndex_1 = ModelManager.getRandomIndex(this.options.get(exercise).get(test_4));
                      _builder.newLineIfNotEmpty();
                      {
                        int _size_19 = this.options.get(exercise).get(test_4).size();
                        boolean _greaterThan_20 = (_size_19 > 0);
                        if (_greaterThan_20) {
                          {
                            List<EduTestSuperGenerator.TestOption> _get_17 = this.options.get(exercise).get(test_4).get(rndIndex_1);
                            for(final EduTestSuperGenerator.TestOption opt_5 : _get_17) {
                              {
                                Set<String> _keySet_6 = opt_5.text.keySet();
                                for(final String key_5 : _keySet_6) {
                                  {
                                    List<String> _get_18 = opt_5.text.get(key_5);
                                    for(final String text_5 : _get_18) {
                                      {
                                        boolean _contains_2 = textOptions_2.contains(text_5);
                                        boolean _not_2 = (!_contains_2);
                                        if (_not_2) {
                                          String _xblockexpression_52 = null;
                                          {
                                            counter_4++;
                                            _xblockexpression_52 = "";
                                          }
                                          _builder.append(_xblockexpression_52);
                                          _builder.newLineIfNotEmpty();
                                          String _xblockexpression_53 = null;
                                          {
                                            textOptions_2.add(text_5);
                                            _xblockexpression_53 = "";
                                          }
                                          _builder.append(_xblockexpression_53);
                                          _builder.newLineIfNotEmpty();
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          {
                            if ((counter_4 > max)) {
                              String _xblockexpression_54 = null;
                              {
                                max = counter_4;
                                _xblockexpression_54 = "";
                              }
                              _builder.append(_xblockexpression_54);
                              _builder.newLineIfNotEmpty();
                              String _xblockexpression_55 = null;
                              {
                                index = k;
                                _xblockexpression_55 = "";
                              }
                              _builder.append(_xblockexpression_55);
                              _builder.newLineIfNotEmpty();
                            }
                          }
                          String _xblockexpression_56 = null;
                          {
                            k++;
                            _xblockexpression_56 = "";
                          }
                          _builder.append(_xblockexpression_56);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              _builder.append("        ");
              _builder.append("<!--");
              Map<Test, Map<EduTestSuperGenerator.TestOption, String>> mapPairOptions = new HashMap<Test, Map<EduTestSuperGenerator.TestOption, String>>();
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              {
                EList<Test> _tests_5 = ((MatchPairs)exercise).getTests();
                for(final Test test_5 : _tests_5) {
                  {
                    if (((this.options.get(exercise) != null) && (this.options.get(exercise).get(test_5) != null))) {
                      int k_1 = 0;
                      _builder.newLineIfNotEmpty();
                      int counter_5 = 0;
                      _builder.newLineIfNotEmpty();
                      _builder.append("<!--");
                      Map<EduTestSuperGenerator.TestOption, String> mapOptions = new HashMap<EduTestSuperGenerator.TestOption, String>();
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      int rndIndex_2 = ModelManager.getRandomIndex(this.options.get(exercise).get(test_5));
                      _builder.newLineIfNotEmpty();
                      {
                        int _size_20 = this.options.get(exercise).get(test_5).size();
                        boolean _greaterThan_21 = (_size_20 > 0);
                        if (_greaterThan_21) {
                          {
                            List<EduTestSuperGenerator.TestOption> _get_19 = this.options.get(exercise).get(test_5).get(rndIndex_2);
                            for(final EduTestSuperGenerator.TestOption opt_6 : _get_19) {
                              List<String> textOptions_3 = new ArrayList<String>();
                              _builder.newLineIfNotEmpty();
                              {
                                Set<String> _keySet_7 = opt_6.text.keySet();
                                for(final String key_6 : _keySet_7) {
                                  _builder.append("<!--");
                                  String text_6 = opt_6.text.get(key_6).get(0);
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  {
                                    boolean _contains_3 = textOptions_3.contains(text_6);
                                    boolean _not_3 = (!_contains_3);
                                    if (_not_3) {
                                      String _xblockexpression_57 = null;
                                      {
                                        counter_5++;
                                        _xblockexpression_57 = "";
                                      }
                                      _builder.append(_xblockexpression_57);
                                      _builder.newLineIfNotEmpty();
                                      String _xblockexpression_58 = null;
                                      {
                                        textOptions_3.add(text_6);
                                        _xblockexpression_58 = "";
                                      }
                                      _builder.append(_xblockexpression_58);
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                }
                              }
                              String pairOptions = "";
                              _builder.newLineIfNotEmpty();
                              {
                                for(final String textOption : textOptions_3) {
                                  _builder.append("<!--");
                                  String _pairOptions = pairOptions;
                                  String _trim_3 = textOption.trim();
                                  String _plus_27 = (_trim_3 + ".<br>");
                                  String _plus_28 = pairOptions = (_pairOptions + _plus_27);
                                  _builder.append(_plus_28);
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                }
                              }
                              _builder.append(mapOptions.put(opt_6, pairOptions));
                              _builder.newLineIfNotEmpty();
                            }
                          }
                          _builder.append(mapPairOptions.put(test_5, mapOptions));
                          _builder.newLineIfNotEmpty();
                          {
                            if ((min_2 > counter_5)) {
                              String _xblockexpression_59 = null;
                              {
                                min_2 = counter_5;
                                _xblockexpression_59 = "";
                              }
                              _builder.append(_xblockexpression_59);
                              _builder.newLineIfNotEmpty();
                            }
                          }
                          String _xblockexpression_60 = null;
                          {
                            k_1++;
                            _xblockexpression_60 = "";
                          }
                          _builder.append(_xblockexpression_60);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              _builder.append("       \t");
              _builder.append("<!-- ");
              EClass answersClass_3 = null;
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              _builder.append("       \t");
              _builder.append("<!-- ");
              EClass statementClass_3 = null;
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              {
                for(final EClass root_3 : this.roots) {
                  {
                    EClass _answers_3 = ((MatchPairs)exercise).getConfig().getAnswers();
                    boolean _tripleNotEquals_11 = (_answers_3 != null);
                    if (_tripleNotEquals_11) {
                      {
                        boolean _equals_8 = ((MatchPairs)exercise).getConfig().getAnswers().getName().equals(root_3.getName());
                        if (_equals_8) {
                          String _xblockexpression_61 = null;
                          {
                            answersClass_3 = root_3;
                            _xblockexpression_61 = "";
                          }
                          _builder.append(_xblockexpression_61);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                  {
                    EClass _statement_3 = ((MatchPairs)exercise).getConfig().getStatement();
                    boolean _tripleNotEquals_12 = (_statement_3 != null);
                    if (_tripleNotEquals_12) {
                      {
                        boolean _equals_9 = ((MatchPairs)exercise).getConfig().getStatement().getName().equals(root_3.getName());
                        if (_equals_9) {
                          String _xblockexpression_62 = null;
                          {
                            statementClass_3 = root_3;
                            _xblockexpression_62 = "";
                          }
                          _builder.append(_xblockexpression_62);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              {
                if ((answersClass_3 == null)) {
                  String _xblockexpression_63 = null;
                  {
                    int _size_21 = this.roots.size();
                    int _minus = (_size_21 - 1);
                    answersClass_3 = this.roots.get(_minus);
                    _xblockexpression_63 = "";
                  }
                  _builder.append(_xblockexpression_63);
                  _builder.newLineIfNotEmpty();
                }
              }
              {
                if ((statementClass_3 == null)) {
                  {
                    int _size_21 = this.roots.size();
                    boolean _greaterThan_22 = (_size_21 > 1);
                    if (_greaterThan_22) {
                      String _xblockexpression_64 = null;
                      {
                        statementClass_3 = this.roots.get(1);
                        _xblockexpression_64 = "";
                      }
                      _builder.append(_xblockexpression_64);
                      _builder.newLineIfNotEmpty();
                    } else {
                      String _xblockexpression_65 = null;
                      {
                        statementClass_3 = this.roots.get(0);
                        _xblockexpression_65 = "";
                      }
                      _builder.append(_xblockexpression_65);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              _builder.append("        ");
              int k_2 = 0;
              _builder.newLineIfNotEmpty();
              {
                EList<Test> _tests_6 = ((MatchPairs)exercise).getTests();
                for(final Test test_6 : _tests_6) {
                  _builder.append("        ");
                  _builder.append("<!--");
                  EduTestSuperGenerator.TestOption opt_7 = null;
                  _builder.append("-->");
                  _builder.newLineIfNotEmpty();
                  _builder.append("        ");
                  int rndIndex_3 = ModelManager.getRandomIndex(this.options.get(exercise).get(test_6));
                  _builder.newLineIfNotEmpty();
                  {
                    int _size_22 = this.options.get(exercise).get(test_6).size();
                    boolean _greaterThan_23 = (_size_22 > 0);
                    if (_greaterThan_23) {
                      {
                        if (((this.options.get(exercise).get(test_6) != null) && (this.options.get(exercise).get(test_6).get(rndIndex_3).size() > index))) {
                          _builder.append("        ");
                          _builder.append("<!--");
                          _builder.append(opt_7 = this.options.get(exercise).get(test_6).get(rndIndex_3).get(index), "        ");
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                      {
                        if ((opt_7 != null)) {
                          _builder.append("        ");
                          _builder.append("<!--");
                          String seed = "";
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("        ");
                          _builder.append("<!--");
                          _builder.append(seed = opt_7.path, "        ");
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("        ");
                          int _lastIndexOf_1 = seed.lastIndexOf("/");
                          int _plus_29 = (_lastIndexOf_1 + 1);
                          String _substring_1 = seed.substring(0, _plus_29);
                          String _name_1 = answersClass_3.getName();
                          String _plus_30 = (_substring_1 + _name_1);
                          String _plus_31 = (_plus_30 + "_");
                          int _lastIndexOf_2 = seed.lastIndexOf("/");
                          int _plus_32 = (_lastIndexOf_2 + 1);
                          String _substring_2 = seed.substring(_plus_32, seed.length());
                          String _plus_33 = (_plus_31 + _substring_2);
                          _builder.append(seed = _plus_33, "        ");
                          _builder.newLineIfNotEmpty();
                          _builder.append("        ");
                          _builder.append("<!--");
                          File file_3 = new File(((this.projectPath + "/src-gen/html/") + seed));
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          {
                            if ((file_3.isFile() && file_3.exists())) {
                              _builder.append("        ");
                              _builder.append("<question type=\"matching\">");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<name>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("     ");
                              _builder.append("<text>Question ");
                              int _plusPlus_2 = i++;
                              _builder.append(_plusPlus_2, "             ");
                              _builder.append("</text>");
                              _builder.newLineIfNotEmpty();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("</name>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<questiontext format=\"html\">");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<!--");
                              String question = test_6.getQuestion().replace("\"", "\'");
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<!-- ");
                              UUID uuid_2 = UUID.randomUUID();
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<text><![CDATA[<p>");
                              String _trim_4 = question.trim();
                              _builder.append(_trim_4, "          ");
                              _builder.append("<br><img src=\"@@PLUGINFILE@@/exercise_");
                              _builder.append(uuid_2, "          ");
                              _builder.append(".png\" alt=\"\" width=\"20%\" height=\"20%\" role=\"presentation\" class=\"img-responsive atto_image_button_text-bottom\"><br></p>]]></text>");
                              _builder.newLineIfNotEmpty();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<!--<text><![CDATA[<p>Empareja cada uno de los enunciados de la izquierda con la opci&#243;n correcta de la derecha<br><img src=\"@@PLUGINFILE@@/exercise_");
                              _builder.append(uuid_2, "          ");
                              _builder.append(".png\" alt=\"\" width=\"20%\" height=\"20%\" role=\"presentation\" class=\"img-responsive atto_image_button_text-bottom\"><br></p>]]></text>-->");
                              _builder.newLineIfNotEmpty();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<file name=\"exercise_");
                              _builder.append(uuid_2, "          ");
                              _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                              String _stringBase64_7 = this.getStringBase64(seed);
                              _builder.append(_stringBase64_7, "          ");
                              _builder.append("</file>");
                              _builder.newLineIfNotEmpty();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("</questiontext>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<generalfeedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<text></text>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("</generalfeedback>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<defaultgrade>1.0000000</defaultgrade>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<penalty>0.3333333</penalty>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<hidden>0</hidden>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<idnumber></idnumber>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<shuffleanswers>true</shuffleanswers>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<correctfeedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<!--<text>Respuesta correcta</text>-->");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<text>Right answer.</text>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("</correctfeedback>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<partiallycorrectfeedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<!--<text>Respuesta parcialmente correcta.</text>-->");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<text>Partially right answer.</text>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("</partiallycorrectfeedback>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<incorrectfeedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<!--<text>Respuesta incorrecta.</text>-->");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<text>Wrong answer.</text>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("</incorrectfeedback>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<shownumcorrect/>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<!--");
                              TreeMap<Integer, AbstractMap.SimpleEntry<String, String>> entries = new TreeMap<Integer, AbstractMap.SimpleEntry<String, String>>();
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<!--");
                              int keyCounter = 0;
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              {
                                List<EduTestSuperGenerator.TestOption> _get_20 = this.options.get(exercise).get(test_6).get(rndIndex_3);
                                for(final EduTestSuperGenerator.TestOption op : _get_20) {
                                  _builder.append("        ");
                                  _builder.append("  ");
                                  String key_7 = this.getText(((MatchPairs) exercise).getConfig().getIdentifier(), op.entry.getKey().getURI().toFileString(), resource);
                                  _builder.newLineIfNotEmpty();
                                  {
                                    int _length_3 = key_7.length();
                                    boolean _lessEqualsThan = (_length_3 <= 127);
                                    if (_lessEqualsThan) {
                                      _builder.append("        ");
                                      _builder.append("  ");
                                      boolean found_3 = false;
                                      _builder.newLineIfNotEmpty();
                                      {
                                        Set<Integer> _keySet_8 = entries.keySet();
                                        for(final int entryKey : _keySet_8) {
                                          _builder.append("        ");
                                          _builder.append("  ");
                                          AbstractMap.SimpleEntry<String, String> entry_3 = entries.get(Integer.valueOf(entryKey));
                                          _builder.newLineIfNotEmpty();
                                          {
                                            boolean _equals_10 = entry_3.getKey().equals(key_7);
                                            if (_equals_10) {
                                              _builder.append("        ");
                                              _builder.append("  ");
                                              String _xblockexpression_66 = null;
                                              {
                                                found_3 = true;
                                                _xblockexpression_66 = "";
                                              }
                                              _builder.append(_xblockexpression_66, "          ");
                                              _builder.newLineIfNotEmpty();
                                            }
                                          }
                                        }
                                      }
                                      {
                                        if ((found_3 == false)) {
                                          _builder.append("        ");
                                          _builder.append("  ");
                                          String _trim_5 = mapPairOptions.get(test_6).get(op).trim();
                                          AbstractMap.SimpleEntry<String, String> entry_4 = new AbstractMap.SimpleEntry<String, String>(key_7, _trim_5);
                                          _builder.newLineIfNotEmpty();
                                          _builder.append("        ");
                                          _builder.append("  ");
                                          String _xblockexpression_67 = null;
                                          {
                                            int _plusPlus_3 = keyCounter++;
                                            entries.put(Integer.valueOf(_plusPlus_3), entry_4);
                                            _xblockexpression_67 = "";
                                          }
                                          _builder.append(_xblockexpression_67, "          ");
                                          _builder.newLineIfNotEmpty();
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              _builder.append("        ");
                              _builder.append("  ");
                              int counter_6 = 0;
                              _builder.newLineIfNotEmpty();
                              {
                                Set<Integer> _keySet_9 = entries.keySet();
                                for(final int key_8 : _keySet_9) {
                                  {
                                    if ((counter_6 < min_2)) {
                                      _builder.append("          ");
                                      AbstractMap.SimpleEntry<String, String> entry_5 = entries.get(Integer.valueOf(key_8));
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("          ");
                                      _builder.append("<subquestion format=\"html\">");
                                      _builder.newLine();
                                      _builder.append("<text><![CDATA[<p>");
                                      String _key = entry_5.getKey();
                                      _builder.append(_key);
                                      _builder.append("<br></p>]]></text>");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("          ");
                                      _builder.append("<answer>");
                                      _builder.newLine();
                                      _builder.append("          ");
                                      _builder.append("<text><![CDATA[<p>");
                                      String _value = entry_5.getValue();
                                      _builder.append(_value, "          ");
                                      _builder.append("<br></p>]]></text>");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("          ");
                                      _builder.append("</answer>");
                                      _builder.newLine();
                                      _builder.append("          ");
                                      _builder.append("</subquestion>");
                                      _builder.newLine();
                                      _builder.append("          ");
                                      String _xblockexpression_68 = null;
                                      {
                                        counter_6++;
                                        _xblockexpression_68 = "";
                                      }
                                      _builder.append(_xblockexpression_68, "          ");
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                }
                              }
                            }
                          }
                          _builder.append("        ");
                          _builder.append("</question>");
                          _builder.newLine();
                          _builder.append("        ");
                          String _xblockexpression_69 = null;
                          {
                            k_2++;
                            _xblockexpression_69 = "";
                          }
                          _builder.append(_xblockexpression_69, "        ");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          {
            if ((exercise instanceof MissingWords)) {
              {
                EList<Test> _tests_7 = ((MissingWords)exercise).getTests();
                for(final Test test_7 : _tests_7) {
                  _builder.append("        ");
                  _builder.append("<!-- ");
                  int k_3 = 0;
                  _builder.append("-->");
                  _builder.newLineIfNotEmpty();
                  _builder.append("        ");
                  _builder.append("<!-- ");
                  int solution_2 = 0;
                  _builder.append("-->");
                  _builder.newLineIfNotEmpty();
                  _builder.append("        ");
                  _builder.append("<!-- ");
                  String textWithGaps = "";
                  _builder.append("-->");
                  _builder.newLineIfNotEmpty();
                  _builder.append("        ");
                  _builder.append("<!-- ");
                  EduTestSuperGenerator.TestOption op_1 = null;
                  _builder.append("-->");
                  _builder.newLineIfNotEmpty();
                  {
                    int _size_23 = this.options.get(exercise).get(test_7).size();
                    boolean _greaterThan_24 = (_size_23 > 0);
                    if (_greaterThan_24) {
                      _builder.append("        ");
                      int rndIndex_4 = ModelManager.getRandomIndex(this.options.get(exercise).get(test_7));
                      _builder.newLineIfNotEmpty();
                      {
                        List<EduTestSuperGenerator.TestOption> _get_21 = this.options.get(exercise).get(test_7).get(rndIndex_4);
                        for(final EduTestSuperGenerator.TestOption opt_8 : _get_21) {
                          {
                            boolean _contains_4 = opt_8.path.contains(((MissingWords)exercise).getMarkedBlocks().get(0).getBlock().getName());
                            if (_contains_4) {
                              _builder.append("        ");
                              _builder.append("<!--");
                              _builder.append(op_1 = opt_8, "        ");
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                      _builder.append("       \t");
                      _builder.append("<!-- ");
                      EClass answersClass_4 = null;
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      _builder.append("       \t");
                      _builder.append("<!-- ");
                      EClass statementClass_4 = null;
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      {
                        for(final EClass root_4 : this.roots) {
                          {
                            EClass _answers_4 = ((MissingWords)exercise).getConfig().getAnswers();
                            boolean _tripleNotEquals_13 = (_answers_4 != null);
                            if (_tripleNotEquals_13) {
                              {
                                boolean _equals_11 = ((MissingWords)exercise).getConfig().getAnswers().getName().equals(root_4.getName());
                                if (_equals_11) {
                                  String _xblockexpression_70 = null;
                                  {
                                    answersClass_4 = root_4;
                                    _xblockexpression_70 = "";
                                  }
                                  _builder.append(_xblockexpression_70);
                                  _builder.newLineIfNotEmpty();
                                }
                              }
                            }
                          }
                          {
                            EClass _statement_4 = ((MissingWords)exercise).getConfig().getStatement();
                            boolean _tripleNotEquals_14 = (_statement_4 != null);
                            if (_tripleNotEquals_14) {
                              {
                                boolean _equals_12 = ((MissingWords)exercise).getConfig().getStatement().getName().equals(root_4.getName());
                                if (_equals_12) {
                                  String _xblockexpression_71 = null;
                                  {
                                    statementClass_4 = root_4;
                                    _xblockexpression_71 = "";
                                  }
                                  _builder.append(_xblockexpression_71);
                                  _builder.newLineIfNotEmpty();
                                }
                              }
                            }
                          }
                        }
                      }
                      {
                        if ((answersClass_4 == null)) {
                          String _xblockexpression_72 = null;
                          {
                            int _size_24 = this.roots.size();
                            int _minus = (_size_24 - 1);
                            answersClass_4 = this.roots.get(_minus);
                            _xblockexpression_72 = "";
                          }
                          _builder.append(_xblockexpression_72);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                      {
                        if ((statementClass_4 == null)) {
                          {
                            int _size_24 = this.roots.size();
                            boolean _greaterThan_25 = (_size_24 > 1);
                            if (_greaterThan_25) {
                              String _xblockexpression_73 = null;
                              {
                                statementClass_4 = this.roots.get(1);
                                _xblockexpression_73 = "";
                              }
                              _builder.append(_xblockexpression_73);
                              _builder.newLineIfNotEmpty();
                            } else {
                              String _xblockexpression_74 = null;
                              {
                                statementClass_4 = this.roots.get(0);
                                _xblockexpression_74 = "";
                              }
                              _builder.append(_xblockexpression_74);
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                      {
                        if ((op_1 != null)) {
                          _builder.append("        ");
                          _builder.append("<!-- ");
                          String diagram_3 = op_1.path;
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("        ");
                          _builder.append("<!-- ");
                          UUID uuid_3 = UUID.randomUUID();
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          {
                            if ((op_1.options != null)) {
                              {
                                Set<String> _keySet_10 = op_1.options.keySet();
                                for(final String key_9 : _keySet_10) {
                                  _builder.append("<!-- ");
                                  int tmp = k_3;
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("        ");
                                  _builder.append("<!--");
                                  String opWithGaps = "";
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  {
                                    List<String> _get_22 = op_1.text.get(key_9);
                                    for(final String text_7 : _get_22) {
                                      _builder.append("        ");
                                      _builder.append("<!--");
                                      int _plusPlus_3 = k_3++;
                                      _builder.append(_plusPlus_3, "        ");
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("        ");
                                      _builder.append("<!--");
                                      String _opWithGaps = opWithGaps;
                                      String _plus_34 = opWithGaps = (_opWithGaps + (((text_7 + "%") + Integer.valueOf(k_3)) + " "));
                                      _builder.append(_plus_34, "        ");
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                  _builder.append("        ");
                                  _builder.append("<!-- ");
                                  _builder.append(k_3 = tmp, "        ");
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("        ");
                                  _builder.append("<!-- ");
                                  List<EduTestSuperGenerator.ComparableSimpleEntry<String, AbstractMap.SimpleEntry<EClass, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry<Integer, Boolean>>>>> entries_1 = op_1.options.get(key_9);
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  {
                                    for(final EduTestSuperGenerator.ComparableSimpleEntry<String, AbstractMap.SimpleEntry<EClass, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry<Integer, Boolean>>>> entry_6 : entries_1) {
                                      _builder.append("        ");
                                      _builder.append("<!--");
                                      int _plusPlus_4 = solution_2++;
                                      _builder.append(_plusPlus_4, "        ");
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                      {
                                        Boolean _value_1 = entry_6.getValue().getValue().getValue().getValue();
                                        boolean _equals_13 = ((_value_1).booleanValue() == true);
                                        if (_equals_13) {
                                          _builder.append("        ");
                                          _builder.append("<!-- ");
                                          int _plusPlus_5 = k_3++;
                                          _builder.append(_plusPlus_5, "        ");
                                          _builder.append("-->");
                                          _builder.newLineIfNotEmpty();
                                          _builder.append("        ");
                                          _builder.append("<!-- ");
                                          _builder.append(opWithGaps = opWithGaps.replace(("%" + Integer.valueOf(k_3)), (("[[" + Integer.valueOf(solution_2)) + "]]")), "        ");
                                          _builder.append("-->");
                                          _builder.newLineIfNotEmpty();
                                        }
                                      }
                                    }
                                  }
                                  _builder.append("        ");
                                  _builder.append("<!-- ");
                                  int _plusPlus_6 = k_3++;
                                  _builder.append(_plusPlus_6, "        ");
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("        ");
                                  _builder.append("<!-- ");
                                  _builder.append(opWithGaps = opWithGaps.replace((" %" + Integer.valueOf(k_3)), ""), "        ");
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("<!-- ");
                                  String _textWithGaps = textWithGaps;
                                  String _trim_6 = opWithGaps.trim();
                                  String _plus_35 = (_trim_6 + ".<br>");
                                  String _plus_36 = textWithGaps = (_textWithGaps + _plus_35);
                                  _builder.append(_plus_36);
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                }
                              }
                              {
                                int _length_4 = diagram_3.length();
                                boolean _greaterThan_26 = (_length_4 > 0);
                                if (_greaterThan_26) {
                                  _builder.append("<!--");
                                  int _indexOf_2 = diagram_3.indexOf("/data/out/");
                                  int _length_5 = "/data/out/".length();
                                  int _plus_37 = (_indexOf_2 + _length_5);
                                  String data_1 = diagram_3.substring(_plus_37, diagram_3.lastIndexOf("/"));
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("<!--");
                                  String model_1 = data_1.substring(0, data_1.lastIndexOf("/"));
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("<!--");
                                  int _indexOf_3 = data_1.indexOf((model_1 + "/"));
                                  int _length_6 = (model_1 + "/").length();
                                  int _plus_38 = (_indexOf_3 + _length_6);
                                  String mutOperator_1 = data_1.substring(_plus_38, data_1.length());
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("<!--");
                                  String _name_2 = statementClass_4.getName();
                                  String _plus_39 = ((((("diagrams/" + model_1) + "/") + mutOperator_1) + "/") + _name_2);
                                  String _plus_40 = (_plus_39 + "_");
                                  int _lastIndexOf_3 = diagram_3.lastIndexOf("/");
                                  int _plus_41 = (_lastIndexOf_3 + 1);
                                  String _substring_3 = diagram_3.substring(_plus_41, diagram_3.length());
                                  String _plus_42 = (_plus_40 + _substring_3);
                                  _builder.append(diagram_3 = _plus_42);
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("        ");
                                  _builder.append("<!--");
                                  File file_4 = new File(((this.projectPath + "/src-gen/html/") + diagram_3));
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  {
                                    if ((file_4.isFile() && file_4.exists())) {
                                      _builder.append("        ");
                                      _builder.append("<question type=\"gapselect\">");
                                      _builder.newLine();
                                      _builder.append("        ");
                                      _builder.append("  ");
                                      _builder.append("<name>");
                                      _builder.newLine();
                                      _builder.append("        ");
                                      _builder.append("     ");
                                      _builder.append("<text><![CDATA[<p>");
                                      String _replace_15 = test_7.getQuestion().replace("\"", "\'");
                                      _builder.append(_replace_15, "             ");
                                      _builder.append("<br></p>]]></text>");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("        ");
                                      _builder.append("  ");
                                      _builder.append("</name>");
                                      _builder.newLine();
                                      _builder.append("        ");
                                      _builder.append("  ");
                                      _builder.append("<questiontext format=\"html\">");
                                      _builder.newLine();
                                      _builder.append("        ");
                                      _builder.append("  ");
                                      _builder.append("<text><![CDATA[<p>");
                                      String _replace_16 = test_7.getQuestion().replace("\"", "\'");
                                      _builder.append(_replace_16, "          ");
                                      _builder.append("<br><img src=\"@@PLUGINFILE@@/exercise_");
                                      _builder.append(uuid_3, "          ");
                                      _builder.append(".png\" alt=\"\" width=\"20%\" height=\"20%\" role=\"presentation\" class=\"img-responsive atto_image_button_text-bottom\"><br><br></p><p>");
                                      String _trim_7 = textWithGaps.trim();
                                      _builder.append(_trim_7, "          ");
                                      _builder.append("<br></p>]]></text>");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("        ");
                                      _builder.append("  ");
                                      _builder.append("<file name=\"exercise_");
                                      _builder.append(uuid_3, "          ");
                                      _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                                      String _stringBase64_8 = this.getStringBase64(diagram_3);
                                      _builder.append(_stringBase64_8, "          ");
                                      _builder.append("</file>");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("    ");
                                      _builder.append("</questiontext>");
                                      _builder.newLine();
                                      _builder.append("    ");
                                      _builder.append("<generalfeedback format=\"html\">");
                                      _builder.newLine();
                                      _builder.append("      ");
                                      _builder.append("<text></text>");
                                      _builder.newLine();
                                      _builder.append("    ");
                                      _builder.append("</generalfeedback>");
                                      _builder.newLine();
                                      _builder.append("    ");
                                      _builder.append("<defaultgrade>1.0000000</defaultgrade>");
                                      _builder.newLine();
                                      _builder.append("    ");
                                      _builder.append("<penalty>0.3333333</penalty>");
                                      _builder.newLine();
                                      _builder.append("    ");
                                      _builder.append("<hidden>0</hidden>");
                                      _builder.newLine();
                                      _builder.append("    ");
                                      _builder.append("<idnumber></idnumber>");
                                      _builder.newLine();
                                      _builder.append("    ");
                                      _builder.append("<shuffleanswers>0</shuffleanswers>");
                                      _builder.newLine();
                                      _builder.append("    ");
                                      _builder.append("<correctfeedback format=\"html\">");
                                      _builder.newLine();
                                      _builder.append("      ");
                                      _builder.append("<!--<text>Respuesta correcta</text>-->");
                                      _builder.newLine();
                                      _builder.append("      ");
                                      _builder.append("<text>Right answer.</text>");
                                      _builder.newLine();
                                      _builder.append("    ");
                                      _builder.append("</correctfeedback>");
                                      _builder.newLine();
                                      _builder.append("    ");
                                      _builder.append("<partiallycorrectfeedback format=\"html\">");
                                      _builder.newLine();
                                      _builder.append("      ");
                                      _builder.append("<!--<text>Respuesta parcialmente correcta.</text>-->");
                                      _builder.newLine();
                                      _builder.append("      ");
                                      _builder.append("<text>Partially right answer.</text>");
                                      _builder.newLine();
                                      _builder.append("    ");
                                      _builder.append("</partiallycorrectfeedback>");
                                      _builder.newLine();
                                      _builder.append("    ");
                                      _builder.append("<incorrectfeedback format=\"html\">");
                                      _builder.newLine();
                                      _builder.append("      ");
                                      _builder.append("<!--<text>Respuesta incorrecta.</text>-->");
                                      _builder.newLine();
                                      _builder.append("      ");
                                      _builder.append("<text>Wrong answer.</text>");
                                      _builder.newLine();
                                      _builder.append("    ");
                                      _builder.append("</incorrectfeedback>");
                                      _builder.newLine();
                                      _builder.append("    ");
                                      _builder.append("<shownumcorrect/>");
                                      _builder.newLine();
                                      {
                                        Set<String> _keySet_11 = op_1.options.keySet();
                                        for(final String key_10 : _keySet_11) {
                                          _builder.append("        ");
                                          _builder.append("<!-- ");
                                          List<EduTestSuperGenerator.ComparableSimpleEntry<String, AbstractMap.SimpleEntry<EClass, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry<Integer, Boolean>>>>> entries_2 = op_1.options.get(key_10);
                                          _builder.append("-->");
                                          _builder.newLineIfNotEmpty();
                                          {
                                            for(final EduTestSuperGenerator.ComparableSimpleEntry<String, AbstractMap.SimpleEntry<EClass, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry<Integer, Boolean>>>> entry_7 : entries_2) {
                                              _builder.append("        ");
                                              _builder.append("<selectoption>");
                                              _builder.newLine();
                                              _builder.append("        ");
                                              _builder.append("<text>");
                                              String _trim_8 = entry_7.getKey().trim();
                                              _builder.append(_trim_8, "        ");
                                              _builder.append("</text>");
                                              _builder.newLineIfNotEmpty();
                                              _builder.append("        ");
                                              _builder.append("<group>");
                                              Integer _key_1 = entry_7.getValue().getValue().getValue().getKey();
                                              _builder.append(_key_1, "        ");
                                              _builder.append("</group>");
                                              _builder.newLineIfNotEmpty();
                                              _builder.append("        ");
                                              _builder.append("</selectoption>");
                                              _builder.newLine();
                                            }
                                          }
                                        }
                                      }
                                      _builder.append("        ");
                                      _builder.append("</question>");
                                      _builder.newLine();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          {
            if ((exercise instanceof MultiChoiceText)) {
              _builder.append("        ");
              int min_3 = Integer.MAX_VALUE;
              _builder.newLineIfNotEmpty();
              {
                EList<Test> _tests_8 = ((MultiChoiceText)exercise).getTests();
                for(final Test test_8 : _tests_8) {
                  {
                    Set<EClass> _keySet_12 = this.diagrams.get(exercise).get(test_8).keySet();
                    for(final EClass eclass_1 : _keySet_12) {
                      int counter_7 = this.diagrams.get(exercise).get(test_8).get(eclass_1).size();
                      _builder.newLineIfNotEmpty();
                      {
                        if ((min_3 > counter_7)) {
                          String _xblockexpression_75 = null;
                          {
                            min_3 = counter_7;
                            _xblockexpression_75 = "";
                          }
                          _builder.append(_xblockexpression_75);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              _builder.append("       \t");
              _builder.append("<!-- ");
              EClass answersClass_5 = null;
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              _builder.append("       \t");
              _builder.append("<!-- ");
              EClass statementClass_5 = null;
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              {
                for(final EClass root_5 : this.roots) {
                  {
                    EClass _answers_5 = ((MultiChoiceText)exercise).getConfig().getAnswers();
                    boolean _tripleNotEquals_15 = (_answers_5 != null);
                    if (_tripleNotEquals_15) {
                      {
                        boolean _equals_14 = ((MultiChoiceText)exercise).getConfig().getAnswers().getName().equals(root_5.getName());
                        if (_equals_14) {
                          String _xblockexpression_76 = null;
                          {
                            answersClass_5 = root_5;
                            _xblockexpression_76 = "";
                          }
                          _builder.append(_xblockexpression_76);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                  {
                    EClass _statement_5 = ((MultiChoiceText)exercise).getConfig().getStatement();
                    boolean _tripleNotEquals_16 = (_statement_5 != null);
                    if (_tripleNotEquals_16) {
                      {
                        boolean _equals_15 = ((MultiChoiceText)exercise).getConfig().getStatement().getName().equals(root_5.getName());
                        if (_equals_15) {
                          String _xblockexpression_77 = null;
                          {
                            statementClass_5 = root_5;
                            _xblockexpression_77 = "";
                          }
                          _builder.append(_xblockexpression_77);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              {
                if ((answersClass_5 == null)) {
                  String _xblockexpression_78 = null;
                  {
                    int _size_25 = this.roots.size();
                    int _minus = (_size_25 - 1);
                    answersClass_5 = this.roots.get(_minus);
                    _xblockexpression_78 = "";
                  }
                  _builder.append(_xblockexpression_78);
                  _builder.newLineIfNotEmpty();
                }
              }
              {
                if ((statementClass_5 == null)) {
                  {
                    int _size_25 = this.roots.size();
                    boolean _greaterThan_27 = (_size_25 > 1);
                    if (_greaterThan_27) {
                      String _xblockexpression_79 = null;
                      {
                        statementClass_5 = this.roots.get(1);
                        _xblockexpression_79 = "";
                      }
                      _builder.append(_xblockexpression_79);
                      _builder.newLineIfNotEmpty();
                    } else {
                      String _xblockexpression_80 = null;
                      {
                        statementClass_5 = this.roots.get(0);
                        _xblockexpression_80 = "";
                      }
                      _builder.append(_xblockexpression_80);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              {
                EList<Test> _tests_9 = ((MultiChoiceText)exercise).getTests();
                for(final Test test_9 : _tests_9) {
                  String _xifexpression_6 = null;
                  List<String> _get_23 = this.diagrams.get(exercise).get(test_9).get(statementClass_5);
                  boolean _tripleNotEquals_17 = (_get_23 != null);
                  if (_tripleNotEquals_17) {
                    String _xifexpression_7 = null;
                    int _size_26 = this.diagrams.get(exercise).get(test_9).get(statementClass_5).size();
                    boolean _greaterThan_28 = (_size_26 > 0);
                    if (_greaterThan_28) {
                      _xifexpression_7 = this.diagrams.get(exercise).get(test_9).get(statementClass_5).get(0);
                    } else {
                      _xifexpression_7 = null;
                    }
                    _xifexpression_6 = _xifexpression_7;
                  } else {
                    _xifexpression_6 = null;
                  }
                  String statement_1 = _xifexpression_6;
                  _builder.newLineIfNotEmpty();
                  String _xifexpression_8 = null;
                  List<String> _get_24 = this.diagrams.get(exercise).get(test_9).get(answersClass_5);
                  boolean _tripleNotEquals_18 = (_get_24 != null);
                  if (_tripleNotEquals_18) {
                    String _xifexpression_9 = null;
                    int _size_27 = this.diagrams.get(exercise).get(test_9).get(answersClass_5).size();
                    boolean _greaterThan_29 = (_size_27 > 0);
                    if (_greaterThan_29) {
                      _xifexpression_9 = this.diagrams.get(exercise).get(test_9).get(answersClass_5).get(0);
                    }
                    _xifexpression_8 = _xifexpression_9;
                  }
                  String solution_3 = _xifexpression_8;
                  _builder.newLineIfNotEmpty();
                  List<String> answers_2 = new ArrayList<String>();
                  _builder.newLineIfNotEmpty();
                  Set<String> answersSet_2 = new LinkedHashSet<String>();
                  _builder.newLineIfNotEmpty();
                  {
                    if (((this.diagrams.get(exercise).get(test_9).get(answersClass_5) != null) && (this.diagrams.get(exercise).get(test_9).get(answersClass_5).size() > 0))) {
                      String _xblockexpression_81 = null;
                      {
                        answersSet_2.addAll(this.diagrams.get(exercise).get(test_9).get(answersClass_5));
                        _xblockexpression_81 = "";
                      }
                      _builder.append(_xblockexpression_81);
                      _builder.newLineIfNotEmpty();
                      String _xblockexpression_82 = null;
                      {
                        answers_2.addAll(answersSet_2);
                        _xblockexpression_82 = "";
                      }
                      _builder.append(_xblockexpression_82);
                      _builder.newLineIfNotEmpty();
                      String _xblockexpression_83 = null;
                      {
                        Collections.shuffle(answers_2);
                        _xblockexpression_83 = "";
                      }
                      _builder.append(_xblockexpression_83);
                      _builder.newLineIfNotEmpty();
                      _builder.append("<!--");
                      String _replace_17 = test_9.getSource().replace(".model", "");
                      String _plus_43 = ((this.projectPath + "/src-gen/html/diagrams/") + _replace_17);
                      String _plus_44 = (_plus_43 + "/");
                      String diagram_4 = (_plus_44 + statement_1);
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      {
                        int _length_7 = diagram_4.length();
                        boolean _greaterThan_30 = (_length_7 > 0);
                        if (_greaterThan_30) {
                          _builder.append("<!--");
                          File file_5 = new File(diagram_4);
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          {
                            if ((file_5.isFile() && file_5.exists())) {
                              String _xblockexpression_84 = null;
                              {
                                int _indexOf_4 = diagram_4.indexOf("/src-gen/html/");
                                int _length_8 = "/src-gen/html/".length();
                                int _plus_45 = (_indexOf_4 + _length_8);
                                diagram_4 = diagram_4.substring(_plus_45, diagram_4.length());
                                _xblockexpression_84 = "";
                              }
                              _builder.append(_xblockexpression_84);
                              _builder.newLineIfNotEmpty();
                              _builder.append(" ");
                              _builder.append("<question type=\"multichoice\">");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<name>");
                              _builder.newLine();
                              _builder.append("     ");
                              _builder.append("<text>Question ");
                              int _plusPlus_7 = i++;
                              _builder.append(_plusPlus_7, "     ");
                              _builder.append("</text>");
                              _builder.newLineIfNotEmpty();
                              _builder.append("   ");
                              _builder.append("</name>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<questiontext format=\"html\">");
                              _builder.newLine();
                              _builder.append("\t\t   ");
                              _builder.append("<!-- ");
                              UUID uuid_4 = UUID.randomUUID();
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              _builder.append("   ");
                              _builder.append("<text><![CDATA[<p>");
                              String _replace_18 = test_9.getQuestion().replace("\"", "\'");
                              _builder.append(_replace_18, "   ");
                              _builder.append("<br><img src=\"@@PLUGINFILE@@/exercise_");
                              _builder.append(uuid_4, "   ");
                              _builder.append(".png\" alt=\"\" width=\"30%\" height=\"30%\" role=\"presentation\" class=\"img-responsive atto_image_button_text-bottom\"><br></p>]]></text>");
                              _builder.newLineIfNotEmpty();
                              _builder.append("   ");
                              _builder.append("<file name=\"exercise_");
                              _builder.append(uuid_4, "   ");
                              _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                              String _stringBase64_9 = this.getStringBase64(diagram_4);
                              _builder.append(_stringBase64_9, "   ");
                              _builder.append("</file>");
                              _builder.newLineIfNotEmpty();
                              _builder.append("   ");
                              _builder.append("</questiontext>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<generalfeedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<text></text>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("</generalfeedback>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<defaultgrade>1.0000000</defaultgrade>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<penalty>1.0000000</penalty>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<hidden>0</hidden>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<idnumber></idnumber>");
                              _builder.newLine();
                              {
                                Mode _mode_2 = ((MultiChoiceText)exercise).getConfig().getMode();
                                boolean _tripleEquals_2 = (_mode_2 == Mode.RADIOBUTTON);
                                if (_tripleEquals_2) {
                                  _builder.append("   ");
                                  _builder.append("<single>true</single>");
                                  _builder.newLine();
                                } else {
                                  Mode _mode_3 = ((MultiChoiceText)exercise).getConfig().getMode();
                                  boolean _tripleEquals_3 = (_mode_3 == Mode.CHECKBOX);
                                  if (_tripleEquals_3) {
                                    _builder.append("   ");
                                    _builder.append("<single>false</single>");
                                    _builder.newLine();
                                  }
                                }
                              }
                              _builder.append("   ");
                              _builder.append("<shuffleanswers>true</shuffleanswers>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<answernumbering>abc</answernumbering>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<correctfeedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<!--<text>Respuesta correcta</text>-->");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<text>Right answer.</text>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("</correctfeedback>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<partiallycorrectfeedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<!--<text>Respuesta parcialmente correcta.</text>-->");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<text>Partially right answer.</text>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("</partiallycorrectfeedback>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<incorrectfeedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<!--<text>Respuesta incorrecta.</text>-->");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<text>Wrong answer.</text>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("</incorrectfeedback>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<shownumcorrect/>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<!--");
                              int counter_8 = 0;
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              _builder.append("   ");
                              _builder.append("<!--");
                              int solutions_2 = 1;
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              _builder.append("   ");
                              _builder.append("<!--");
                              double fraction_2 = (100.0 / solutions_2);
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              _builder.append("   ");
                              String _xblockexpression_85 = null;
                              {
                                counter_8 = 0;
                                _xblockexpression_85 = "";
                              }
                              _builder.append(_xblockexpression_85, "   ");
                              _builder.newLineIfNotEmpty();
                              {
                                for(final String answer : answers_2) {
                                  _builder.append("           ");
                                  _builder.append("<!--");
                                  boolean s_1 = false;
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  {
                                    List<String> _get_25 = this.solutionsMap.get(exercise);
                                    for(final String sol_2 : _get_25) {
                                      {
                                        if ((((answer.startsWith((sol_2 + "/")) || answer.startsWith((sol_2 + "\\"))) || answer.contains((((sol_2 + "/") + answersClass_5.getName()) + "_"))) || answer.contains((((sol_2 + "\\") + answersClass_5.getName()) + "_")))) {
                                          _builder.append("           ");
                                          String _xblockexpression_86 = null;
                                          {
                                            s_1 = true;
                                            _xblockexpression_86 = "";
                                          }
                                          _builder.append(_xblockexpression_86, "           ");
                                          _builder.newLineIfNotEmpty();
                                        }
                                      }
                                    }
                                  }
                                  {
                                    if ((s_1 == true)) {
                                      {
                                        if ((counter_8 < (min_3 - 1))) {
                                          _builder.append("           ");
                                          String _xblockexpression_87 = null;
                                          {
                                            counter_8++;
                                            _xblockexpression_87 = "";
                                          }
                                          _builder.append(_xblockexpression_87, "           ");
                                          _builder.newLineIfNotEmpty();
                                          _builder.append("           ");
                                          String _xblockexpression_88 = null;
                                          {
                                            solutions_2++;
                                            _xblockexpression_88 = "";
                                          }
                                          _builder.append(_xblockexpression_88, "           ");
                                          _builder.newLineIfNotEmpty();
                                        }
                                      }
                                    }
                                  }
                                  _builder.append("<!-- ");
                                  _builder.append(uuid_4 = UUID.randomUUID());
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  {
                                    if ((s_1 || answer.equals(solution_3))) {
                                      _builder.append(" ");
                                      String _identifier = ((MultiChoiceText) exercise).getConfig().getIdentifier();
                                      String _metaModelPath = ModelManager.getMetaModelPath();
                                      String _plus_45 = (_metaModelPath + "/");
                                      String _source = test_9.getSource();
                                      String _plus_46 = (_plus_45 + _source);
                                      String text_8 = this.getText(_identifier, _plus_46, resource);
                                      _builder.newLineIfNotEmpty();
                                      {
                                        if (((100 % solutions_2) == 0)) {
                                          _builder.append("<answer fraction=\"");
                                          _builder.append((100 / solutions_2));
                                          _builder.append("\" format=\"html\">");
                                          _builder.newLineIfNotEmpty();
                                        } else {
                                          _builder.append("<!--");
                                          NumberFormat _numberInstance_3 = NumberFormat.getNumberInstance(Locale.ENGLISH);
                                          DecimalFormat formatter_3 = ((DecimalFormat) _numberInstance_3);
                                          _builder.append("-->");
                                          _builder.newLineIfNotEmpty();
                                          String _xblockexpression_89 = null;
                                          {
                                            formatter_3.applyPattern("###.#####");
                                            _xblockexpression_89 = "";
                                          }
                                          _builder.append(_xblockexpression_89);
                                          _builder.newLineIfNotEmpty();
                                          _builder.append("<answer fraction=\"");
                                          String _format_3 = formatter_3.format(fraction_2);
                                          _builder.append(_format_3);
                                          _builder.append("\" format=\"html\">");
                                          _builder.newLineIfNotEmpty();
                                        }
                                      }
                                      _builder.append(" ");
                                      _builder.append("<text><![CDATA[<p>");
                                      _builder.append(text_8, " ");
                                      _builder.append("<br></p>]]></text>");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append(" ");
                                      _builder.append("<!--<text><![CDATA[<p>");
                                      _builder.append(text_8, " ");
                                      _builder.append("<img src=\"@@PLUGINFILE@@/exercise_");
                                      _builder.append(uuid_4, " ");
                                      _builder.append(".png\" alt=\"\" width=\"15%\" height=\"15%\" role=\"presentation\" class=\"img-responsive atto_image_button_text-bottom\"><br></p>]]></text>");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append(" ");
                                      _builder.append("<file name=\"exercise_");
                                      _builder.append(uuid_4, " ");
                                      _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                                      String _replace_19 = test_9.getSource().replace(".model", "");
                                      String _plus_47 = ("diagrams/" + _replace_19);
                                      String _plus_48 = (_plus_47 + "/");
                                      String _plus_49 = (_plus_48 + answer);
                                      String _stringBase64_10 = this.getStringBase64(_plus_49);
                                      _builder.append(_stringBase64_10, " ");
                                      _builder.append("</file>-->");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append(" ");
                                      _builder.append("<feedback format=\"html\">");
                                      _builder.newLine();
                                      _builder.append(" ");
                                      _builder.append("<text></text>");
                                      _builder.newLine();
                                      _builder.append(" ");
                                      _builder.append("</feedback>");
                                      _builder.newLine();
                                      _builder.append(" ");
                                      _builder.append("</answer>");
                                      _builder.newLine();
                                    } else {
                                      {
                                        if ((counter_8 < (min_3 - 1))) {
                                          _builder.append("           ");
                                          String _xblockexpression_90 = null;
                                          {
                                            counter_8++;
                                            _xblockexpression_90 = "";
                                          }
                                          _builder.append(_xblockexpression_90, "           ");
                                          _builder.newLineIfNotEmpty();
                                          _builder.append("           ");
                                          String _identifier_1 = ((MultiChoiceText) exercise).getConfig().getIdentifier();
                                          String _outputPath = ModelManager.getOutputPath();
                                          String _plus_50 = (_outputPath + "/");
                                          String _replace_20 = test_9.getSource().replace(".model", "");
                                          String _plus_51 = (_plus_50 + _replace_20);
                                          String _plus_52 = (_plus_51 + "/");
                                          String _name_3 = answersClass_5.getName();
                                          String _plus_53 = (_name_3 + "_");
                                          String _replace_21 = diagram_4.replace(_plus_53, "");
                                          String _name_4 = answersClass_5.getName();
                                          String _plus_54 = (_name_4 + "_");
                                          String _replace_22 = _replace_21.replace(_plus_54, "").replace(".png", ".model");
                                          String _plus_55 = (_plus_52 + _replace_22);
                                          String text_9 = this.getText(_identifier_1, _plus_55, resource);
                                          _builder.newLineIfNotEmpty();
                                          _builder.append("           ");
                                          _builder.append("<answer fraction=\"0\" format=\"html\">");
                                          _builder.newLine();
                                          _builder.append("           ");
                                          _builder.append("<text><![CDATA[<p>");
                                          _builder.append(text_9, "           ");
                                          _builder.append("<br></p>]]></text>");
                                          _builder.newLineIfNotEmpty();
                                          _builder.append("           ");
                                          _builder.append("<!--<text><![CDATA[<p>");
                                          _builder.append(text_9, "           ");
                                          _builder.append("<img src=\"@@PLUGINFILE@@/exercise_");
                                          _builder.append(uuid_4, "           ");
                                          _builder.append(".png\" alt=\"\" width=\"15%\" height=\"15%\" role=\"presentation\" class=\"img-responsive atto_image_button_text-bottom\"><br></p>]]></text>");
                                          _builder.newLineIfNotEmpty();
                                          _builder.append("           ");
                                          _builder.append("<file name=\"exercise_");
                                          _builder.append(uuid_4, "           ");
                                          _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                                          String _replace_23 = test_9.getSource().replace(".model", "");
                                          String _plus_56 = ("diagrams/" + _replace_23);
                                          String _plus_57 = (_plus_56 + "/");
                                          String _plus_58 = (_plus_57 + answer);
                                          String _stringBase64_11 = this.getStringBase64(_plus_58);
                                          _builder.append(_stringBase64_11, "           ");
                                          _builder.append("</file>-->");
                                          _builder.newLineIfNotEmpty();
                                          _builder.append("           ");
                                          _builder.append("<feedback format=\"html\">");
                                          _builder.newLine();
                                          _builder.append("           ");
                                          _builder.append("<text></text>");
                                          _builder.newLine();
                                          _builder.append("           ");
                                          _builder.append("</feedback>");
                                          _builder.newLine();
                                          _builder.append("           ");
                                          _builder.append("</answer>");
                                          _builder.newLine();
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          _builder.append(" ");
                          _builder.append("</question>");
                          _builder.newLine();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          {
            if ((exercise instanceof AlternativeText)) {
              _builder.append("       \t");
              _builder.append("<!-- ");
              EClass answersClass_6 = null;
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              _builder.append("       \t");
              _builder.append("<!-- ");
              EClass statementClass_6 = null;
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              {
                for(final EClass root_6 : this.roots) {
                  {
                    EClass _answers_6 = ((AlternativeText)exercise).getConfig().getAnswers();
                    boolean _tripleNotEquals_19 = (_answers_6 != null);
                    if (_tripleNotEquals_19) {
                      {
                        boolean _equals_16 = ((AlternativeText)exercise).getConfig().getAnswers().getName().equals(root_6.getName());
                        if (_equals_16) {
                          String _xblockexpression_91 = null;
                          {
                            answersClass_6 = root_6;
                            _xblockexpression_91 = "";
                          }
                          _builder.append(_xblockexpression_91);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                  {
                    EClass _statement_6 = ((AlternativeText)exercise).getConfig().getStatement();
                    boolean _tripleNotEquals_20 = (_statement_6 != null);
                    if (_tripleNotEquals_20) {
                      {
                        boolean _equals_17 = ((AlternativeText)exercise).getConfig().getStatement().getName().equals(root_6.getName());
                        if (_equals_17) {
                          String _xblockexpression_92 = null;
                          {
                            statementClass_6 = root_6;
                            _xblockexpression_92 = "";
                          }
                          _builder.append(_xblockexpression_92);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              {
                if ((answersClass_6 == null)) {
                  String _xblockexpression_93 = null;
                  {
                    int _size_28 = this.roots.size();
                    int _minus = (_size_28 - 1);
                    answersClass_6 = this.roots.get(_minus);
                    _xblockexpression_93 = "";
                  }
                  _builder.append(_xblockexpression_93);
                  _builder.newLineIfNotEmpty();
                }
              }
              {
                if ((statementClass_6 == null)) {
                  {
                    int _size_28 = this.roots.size();
                    boolean _greaterThan_31 = (_size_28 > 1);
                    if (_greaterThan_31) {
                      String _xblockexpression_94 = null;
                      {
                        statementClass_6 = this.roots.get(1);
                        _xblockexpression_94 = "";
                      }
                      _builder.append(_xblockexpression_94);
                      _builder.newLineIfNotEmpty();
                    } else {
                      String _xblockexpression_95 = null;
                      {
                        statementClass_6 = this.roots.get(0);
                        _xblockexpression_95 = "";
                      }
                      _builder.append(_xblockexpression_95);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              {
                EList<Test> _tests_10 = ((AlternativeText)exercise).getTests();
                for(final Test test_10 : _tests_10) {
                  String _xifexpression_10 = null;
                  List<String> _get_26 = this.diagrams.get(exercise).get(test_10).get(answersClass_6);
                  boolean _tripleNotEquals_21 = (_get_26 != null);
                  if (_tripleNotEquals_21) {
                    String _xifexpression_11 = null;
                    int _size_29 = this.diagrams.get(exercise).get(test_10).get(answersClass_6).size();
                    boolean _greaterThan_32 = (_size_29 > 0);
                    if (_greaterThan_32) {
                      _xifexpression_11 = this.diagrams.get(exercise).get(test_10).get(answersClass_6).get(0);
                    }
                    _xifexpression_10 = _xifexpression_11;
                  }
                  String solution_4 = _xifexpression_10;
                  _builder.newLineIfNotEmpty();
                  List<String> answers_3 = new ArrayList<String>();
                  _builder.newLineIfNotEmpty();
                  Set<String> answersSet_3 = new LinkedHashSet<String>();
                  _builder.newLineIfNotEmpty();
                  {
                    if (((this.diagrams.get(exercise).get(test_10).get(answersClass_6) != null) && (this.diagrams.get(exercise).get(test_10).get(answersClass_6).size() > 0))) {
                      String _xblockexpression_96 = null;
                      {
                        answersSet_3.addAll(this.diagrams.get(exercise).get(test_10).get(answersClass_6));
                        _xblockexpression_96 = "";
                      }
                      _builder.append(_xblockexpression_96);
                      _builder.newLineIfNotEmpty();
                      String _xblockexpression_97 = null;
                      {
                        answers_3.addAll(answersSet_3);
                        _xblockexpression_97 = "";
                      }
                      _builder.append(_xblockexpression_97);
                      _builder.newLineIfNotEmpty();
                      String _xblockexpression_98 = null;
                      {
                        Collections.shuffle(answers_3);
                        _xblockexpression_98 = "";
                      }
                      _builder.append(_xblockexpression_98);
                      _builder.newLineIfNotEmpty();
                      _builder.append("<!-- ");
                      String diagram_5 = answers_3.get(0);
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      _builder.append("<!--");
                      String _replace_24 = test_10.getSource().replace(".model", "");
                      String _plus_59 = ((this.projectPath + "/src-gen/html/diagrams/") + _replace_24);
                      String _plus_60 = (_plus_59 + "/");
                      String _plus_61 = (_plus_60 + diagram_5);
                      File file_6 = new File(_plus_61);
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      {
                        if ((file_6.isFile() && file_6.exists())) {
                          _builder.append("          ");
                          _builder.append("<question type=\"truefalse\">");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<name>");
                          _builder.newLine();
                          _builder.append("    ");
                          _builder.append("<text><![CDATA[<p>");
                          String _replace_25 = test_10.getQuestion().replace("\"", "\'");
                          _builder.append(_replace_25, "    ");
                          _builder.append("<br></p>]]></text>");
                          _builder.newLineIfNotEmpty();
                          _builder.append("  ");
                          _builder.append("</name>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<questiontext format=\"html\">");
                          _builder.newLine();
                          _builder.append("    ");
                          _builder.append("<!-- ");
                          UUID uuid_5 = UUID.randomUUID();
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("    ");
                          _builder.append("<!-- ");
                          String text_10 = "";
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("    ");
                          _builder.newLine();
                          _builder.append("    ");
                          _builder.append("<!--");
                          String _identifier_2 = ((AlternativeText) exercise).getConfig().getIdentifier();
                          String _metaModelPath_1 = ModelManager.getMetaModelPath();
                          String _plus_62 = (_metaModelPath_1 + "/");
                          String _source_1 = test_10.getSource();
                          String _plus_63 = (_plus_62 + _source_1);
                          _builder.append(text_10 = this.getText(_identifier_2, _plus_63, resource), "    ");
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("    ");
                          _builder.newLine();
                          _builder.append("    ");
                          _builder.append("<!--");
                          _builder.append("-->");
                          _builder.newLine();
                          _builder.append("    ");
                          _builder.newLine();
                          _builder.append("    ");
                          _builder.append("<text><![CDATA[<p>");
                          String _replace_26 = test_10.getQuestion().replace("\"", "\'");
                          _builder.append(_replace_26, "    ");
                          _builder.append("<br></p><p><img src=\"@@PLUGINFILE@@/exercise_");
                          _builder.append(uuid_5, "    ");
                          _builder.append(".png\" alt=\"");
                          String _replace_27 = test_10.getQuestion().replace("\"", "\'");
                          _builder.append(_replace_27, "    ");
                          _builder.append("\" width=\"20%\" height=\"20%\" class=\"img-responsive atto_image_button_text-bottom\"><br></p><p>");
                          _builder.append(text_10, "    ");
                          _builder.append("<br></p>]]></text>");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t\t\t  ");
                          _builder.append("<file name=\"exercise_");
                          _builder.append(uuid_5, "\t\t\t  ");
                          _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                          String _replace_28 = test_10.getSource().replace(".model", "");
                          String _plus_64 = ("diagrams/" + _replace_28);
                          String _plus_65 = (_plus_64 + "/");
                          String _plus_66 = (_plus_65 + diagram_5);
                          String _stringBase64_12 = this.getStringBase64(_plus_66);
                          _builder.append(_stringBase64_12, "\t\t\t  ");
                          _builder.append("</file>");
                          _builder.newLineIfNotEmpty();
                          _builder.append("  ");
                          _builder.append("</questiontext>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<generalfeedback format=\"html\">");
                          _builder.newLine();
                          _builder.append("    ");
                          _builder.append("<text></text>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("</generalfeedback>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<defaultgrade>1.0000000</defaultgrade>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<penalty>1.0000000</penalty>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<hidden>0</hidden>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<idnumber></idnumber>");
                          _builder.newLine();
                          {
                            boolean _equals_18 = diagram_5.equals(solution_4.replace(".model", ".png"));
                            if (_equals_18) {
                              _builder.append("<answer fraction=\"100\" format=\"moodle_auto_format\">");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("<text>true</text>");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("<feedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<text></text>");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("</feedback>");
                              _builder.newLine();
                              _builder.append("</answer>");
                              _builder.newLine();
                              _builder.append("<answer fraction=\"0\" format=\"moodle_auto_format\">");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("<text>false</text>");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("<feedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<text></text>");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("</feedback>");
                              _builder.newLine();
                              _builder.append("</answer>");
                              _builder.newLine();
                            } else {
                              _builder.append("<answer fraction=\"0\" format=\"moodle_auto_format\">");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("<text>true</text>");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("<feedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<text></text>");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("</feedback>");
                              _builder.newLine();
                              _builder.append("</answer>");
                              _builder.newLine();
                              _builder.append("<answer fraction=\"100\" format=\"moodle_auto_format\">");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("<text>false</text>");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("<feedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<text></text>");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("</feedback>");
                              _builder.newLine();
                              _builder.append("</answer>");
                              _builder.newLine();
                            }
                          }
                          _builder.append("</question>");
                          _builder.newLine();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          {
            if ((exercise instanceof DragAndDropText)) {
              _builder.append("        ");
              _builder.append("<!-- ");
              Map<Test, Map<String, Map<String, Map<String, Integer>>>> groups = new HashMap<Test, Map<String, Map<String, Map<String, Integer>>>>();
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              _builder.append("        ");
              _builder.append("<!-- ");
              Map<String, Integer> indexes = new TreeMap<String, Integer>();
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              _builder.append("       \t");
              _builder.append("<!-- ");
              EClass answersClass_7 = null;
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              _builder.append("       \t");
              _builder.append("<!-- ");
              EClass statementClass_7 = null;
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              {
                for(final EClass root_7 : this.roots) {
                  {
                    EClass _answers_7 = ((DragAndDropText)exercise).getConfig().getAnswers();
                    boolean _tripleNotEquals_22 = (_answers_7 != null);
                    if (_tripleNotEquals_22) {
                      {
                        boolean _equals_19 = ((DragAndDropText)exercise).getConfig().getAnswers().getName().equals(root_7.getName());
                        if (_equals_19) {
                          String _xblockexpression_99 = null;
                          {
                            answersClass_7 = root_7;
                            _xblockexpression_99 = "";
                          }
                          _builder.append(_xblockexpression_99);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                  {
                    EClass _statement_7 = ((DragAndDropText)exercise).getConfig().getStatement();
                    boolean _tripleNotEquals_23 = (_statement_7 != null);
                    if (_tripleNotEquals_23) {
                      {
                        boolean _equals_20 = ((DragAndDropText)exercise).getConfig().getStatement().getName().equals(root_7.getName());
                        if (_equals_20) {
                          String _xblockexpression_100 = null;
                          {
                            statementClass_7 = root_7;
                            _xblockexpression_100 = "";
                          }
                          _builder.append(_xblockexpression_100);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              {
                if ((answersClass_7 == null)) {
                  String _xblockexpression_101 = null;
                  {
                    int _size_30 = this.roots.size();
                    int _minus = (_size_30 - 1);
                    answersClass_7 = this.roots.get(_minus);
                    _xblockexpression_101 = "";
                  }
                  _builder.append(_xblockexpression_101);
                  _builder.newLineIfNotEmpty();
                }
              }
              {
                if ((statementClass_7 == null)) {
                  {
                    int _size_30 = this.roots.size();
                    boolean _greaterThan_33 = (_size_30 > 1);
                    if (_greaterThan_33) {
                      String _xblockexpression_102 = null;
                      {
                        statementClass_7 = this.roots.get(1);
                        _xblockexpression_102 = "";
                      }
                      _builder.append(_xblockexpression_102);
                      _builder.newLineIfNotEmpty();
                    } else {
                      String _xblockexpression_103 = null;
                      {
                        statementClass_7 = this.roots.get(0);
                        _xblockexpression_103 = "";
                      }
                      _builder.append(_xblockexpression_103);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              {
                EList<Test> _tests_11 = ((DragAndDropText)exercise).getTests();
                for(final Test test_11 : _tests_11) {
                  _builder.append("        ");
                  _builder.append("<!-- ");
                  int k_4 = 0;
                  _builder.append("-->");
                  _builder.newLineIfNotEmpty();
                  _builder.append("        ");
                  _builder.append("<!-- ");
                  String textWithGaps_1 = "";
                  _builder.append("-->");
                  _builder.newLineIfNotEmpty();
                  _builder.append("        ");
                  _builder.append("<!-- ");
                  Map<String, Map<String, Map<String, Integer>>> group = new TreeMap<String, Map<String, Map<String, Integer>>>();
                  _builder.append(" -->");
                  _builder.newLineIfNotEmpty();
                  _builder.append("        ");
                  _builder.append("<!-- ");
                  EduTestSuperGenerator.TestOption op_2 = null;
                  _builder.append("-->");
                  _builder.newLineIfNotEmpty();
                  {
                    int _size_31 = this.options.get(exercise).get(test_11).size();
                    boolean _greaterThan_34 = (_size_31 > 0);
                    if (_greaterThan_34) {
                      _builder.append("        ");
                      int rndIndex_5 = ModelManager.getRandomIndex(this.options.get(exercise).get(test_11));
                      _builder.newLineIfNotEmpty();
                      {
                        List<EduTestSuperGenerator.TestOption> _get_27 = this.options.get(exercise).get(test_11).get(rndIndex_5);
                        for(final EduTestSuperGenerator.TestOption opt_9 : _get_27) {
                          {
                            boolean _contains_5 = opt_9.path.contains(((DragAndDropText)exercise).getMarkedBlocks().get(0).getBlock().getName());
                            if (_contains_5) {
                              _builder.append("        ");
                              _builder.append("<!--");
                              _builder.append(op_2 = opt_9, "        ");
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                      {
                        if ((op_2 != null)) {
                          _builder.append("        ");
                          _builder.append("<!-- ");
                          String diagram_6 = op_2.path;
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("        ");
                          _builder.append("<!-- ");
                          UUID uuid_6 = UUID.randomUUID();
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("        ");
                          _builder.append("<!-- ");
                          Map<String, Integer> solutions_3 = new HashMap<String, Integer>();
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t\t");
                          _builder.append("<!-- ");
                          int tmp_1 = k_4;
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("        ");
                          _builder.append("<!--");
                          String opWithGaps_1 = "";
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          {
                            Set<String> _keySet_13 = op_2.options.keySet();
                            for(final String key_11 : _keySet_13) {
                              {
                                List<String> _get_28 = op_2.text.get(key_11);
                                for(final String text_11 : _get_28) {
                                  _builder.append("        ");
                                  _builder.append("<!--");
                                  int _plusPlus_8 = k_4++;
                                  _builder.append(_plusPlus_8, "        ");
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("        ");
                                  _builder.append("<!--");
                                  String _opWithGaps_1 = opWithGaps_1;
                                  String _plus_67 = opWithGaps_1 = (_opWithGaps_1 + (((text_11 + "%") + Integer.valueOf(k_4)) + " "));
                                  _builder.append(_plus_67, "        ");
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                }
                              }
                              _builder.append("        ");
                              _builder.append("<!--");
                              String _trim_9 = opWithGaps_1.trim();
                              String _plus_68 = (_trim_9 + ".<br>");
                              String _opWithGaps_2 = opWithGaps_1 = _plus_68;
                              _builder.append(_opWithGaps_2, "        ");
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                          {
                            Set<String> _keySet_14 = op_2.sortedOptions.keySet();
                            for(final String key_12 : _keySet_14) {
                              _builder.append("        ");
                              _builder.append("<!-- ");
                              List<EduTestSuperGenerator.ComparableSimpleEntry<String, AbstractMap.SimpleEntry<EClass, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry<Integer, Boolean>>>>> entries_3 = op_2.sortedOptions.get(key_12);
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              {
                                for(final EduTestSuperGenerator.ComparableSimpleEntry<String, AbstractMap.SimpleEntry<EClass, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry<Integer, Boolean>>>> entry_8 : entries_3) {
                                  _builder.append("        ");
                                  _builder.append("<!-- ");
                                  Map<String, Map<String, Integer>> value = null;
                                  _builder.append(" -->");
                                  _builder.newLineIfNotEmpty();
                                  {
                                    Set<String> _keySet_15 = group.keySet();
                                    for(final String typeName : _keySet_15) {
                                      {
                                        boolean _equals_21 = typeName.equals(entry_8.getValue().getKey().getName());
                                        if (_equals_21) {
                                          _builder.append("        ");
                                          _builder.append("<!-- ");
                                          _builder.append(value = group.get(typeName), "        ");
                                          _builder.append(" -->");
                                          _builder.newLineIfNotEmpty();
                                        }
                                      }
                                    }
                                  }
                                  {
                                    if ((value == null)) {
                                      _builder.append("        ");
                                      _builder.append("<!-- ");
                                      TreeMap<String, Map<String, Integer>> _treeMap = new TreeMap<String, Map<String, Integer>>();
                                      Map<String, Map<String, Integer>> _value_2 = value = _treeMap;
                                      _builder.append(_value_2, "        ");
                                      _builder.append(" -->");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("        ");
                                      _builder.append("<!-- ");
                                      Map<String, Map<String, Integer>> _put = group.put(entry_8.getValue().getKey().getName(), value);
                                      _builder.append(_put, "        ");
                                      _builder.append(" -->");
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                  {
                                    boolean _containsKey = indexes.containsKey(entry_8.getKey());
                                    boolean _not_4 = (!_containsKey);
                                    if (_not_4) {
                                      _builder.append("        ");
                                      _builder.append("<!-- ");
                                      Integer _put_1 = indexes.put(entry_8.getKey(), Integer.valueOf(0));
                                      _builder.append(_put_1, "        ");
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                  _builder.append("        ");
                                  _builder.append("<!-- ");
                                  Map<String, Integer> localIndexes = null;
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  {
                                    boolean _containsKey_1 = value.containsKey(entry_8.getValue().getValue().getKey());
                                    boolean _not_5 = (!_containsKey_1);
                                    if (_not_5) {
                                      _builder.append("<!-- ");
                                      TreeMap<String, Integer> _treeMap_1 = new TreeMap<String, Integer>();
                                      Map<String, Integer> _localIndexes = localIndexes = _treeMap_1;
                                      _builder.append(_localIndexes);
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                    } else {
                                      _builder.append("<!-- ");
                                      _builder.append(localIndexes = value.get(entry_8.getValue().getValue().getKey()));
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                  _builder.append("        ");
                                  _builder.append("<!-- ");
                                  Integer _put_2 = localIndexes.put(entry_8.getKey(), Integer.valueOf(0));
                                  _builder.append(_put_2, "        ");
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("        ");
                                  _builder.append("<!--");
                                  Map<String, Integer> _put_3 = value.put(entry_8.getValue().getValue().getKey(), localIndexes);
                                  _builder.append(_put_3, "        ");
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                }
                              }
                            }
                          }
                          _builder.append("        ");
                          _builder.append("<!-- ");
                          int localIndex = 0;
                          _builder.append(" -->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("        ");
                          _builder.append("<!-- ");
                          int index_1 = 0;
                          _builder.append(" -->");
                          _builder.newLineIfNotEmpty();
                          {
                            Set<String> _keySet_16 = group.keySet();
                            for(final String typeName_1 : _keySet_16) {
                              {
                                Set<String> _keySet_17 = group.get(typeName_1).keySet();
                                for(final String attName : _keySet_17) {
                                  _builder.append("        ");
                                  _builder.append("<!-- ");
                                  int _plusPlus_9 = localIndex++;
                                  _builder.append(_plusPlus_9, "        ");
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  {
                                    Set<String> _keySet_18 = group.get(typeName_1).get(attName).keySet();
                                    for(final String name : _keySet_18) {
                                      _builder.append("        ");
                                      _builder.append("<!-- ");
                                      int _plusPlus_10 = index_1++;
                                      _builder.append(_plusPlus_10, "        ");
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("        ");
                                      _builder.append("<!--");
                                      Integer _put_4 = group.get(typeName_1).get(attName).put(name, Integer.valueOf(localIndex));
                                      _builder.append(_put_4, "        ");
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("        ");
                                      _builder.append("<!--");
                                      Integer _put_5 = indexes.put(name, Integer.valueOf(index_1));
                                      _builder.append(_put_5, "        ");
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                }
                              }
                            }
                          }
                          {
                            Set<String> _keySet_19 = op_2.sortedOptions.keySet();
                            for(final String key_13 : _keySet_19) {
                              _builder.append("        ");
                              _builder.append("<!-- ");
                              List<EduTestSuperGenerator.ComparableSimpleEntry<String, AbstractMap.SimpleEntry<EClass, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry<Integer, Boolean>>>>> sortedEntries = op_2.sortedOptions.get(key_13);
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              {
                                for(final EduTestSuperGenerator.ComparableSimpleEntry<String, AbstractMap.SimpleEntry<EClass, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry<Integer, Boolean>>>> entry_9 : sortedEntries) {
                                  {
                                    if ((indexes.containsKey(entry_9.getKey()) && ((entry_9.getValue().getValue().getValue().getValue()).booleanValue() == true))) {
                                      _builder.append("        ");
                                      _builder.append("<!-- ");
                                      Integer _put_6 = solutions_3.put(entry_9.getKey(), indexes.get(entry_9.getKey()));
                                      _builder.append(_put_6, "        ");
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                }
                              }
                            }
                          }
                          _builder.append("        ");
                          _builder.append("<!--");
                          Map<String, Map<String, Map<String, Integer>>> _put_7 = groups.put(test_11, group);
                          _builder.append(_put_7, "        ");
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("        ");
                          _builder.append("<!-- ");
                          _builder.append(k_4 = tmp_1, "        ");
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          {
                            Set<String> _keySet_20 = op_2.options.keySet();
                            for(final String key_14 : _keySet_20) {
                              _builder.append("        ");
                              _builder.append("<!-- ");
                              List<EduTestSuperGenerator.ComparableSimpleEntry<String, AbstractMap.SimpleEntry<EClass, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry<Integer, Boolean>>>>> entries_4 = op_2.options.get(key_14);
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              {
                                for(final EduTestSuperGenerator.ComparableSimpleEntry<String, AbstractMap.SimpleEntry<EClass, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry<Integer, Boolean>>>> entry_10 : entries_4) {
                                  {
                                    Boolean _value_3 = entry_10.getValue().getValue().getValue().getValue();
                                    boolean _equals_22 = ((_value_3).booleanValue() == true);
                                    if (_equals_22) {
                                      _builder.append("        ");
                                      _builder.append("<!-- ");
                                      int _plusPlus_11 = k_4++;
                                      _builder.append(_plusPlus_11, "        ");
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("        ");
                                      _builder.append("<!-- ");
                                      Integer _get_29 = solutions_3.get(entry_10.getKey());
                                      String _plus_69 = ("[[" + _get_29);
                                      String _plus_70 = (_plus_69 + "]]");
                                      _builder.append(opWithGaps_1 = opWithGaps_1.replace(("%" + Integer.valueOf(k_4)), _plus_70), "        ");
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                }
                              }
                            }
                          }
                          _builder.append("        ");
                          _builder.append("<!-- ");
                          int _plusPlus_12 = k_4++;
                          _builder.append(_plusPlus_12, "        ");
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("        ");
                          _builder.append("<!-- ");
                          _builder.append(opWithGaps_1 = opWithGaps_1.replace((" %" + Integer.valueOf(k_4)), ""), "        ");
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t\t");
                          _builder.append("<!-- ");
                          String _textWithGaps_1 = textWithGaps_1;
                          String _trim_10 = opWithGaps_1.trim();
                          String _plus_71 = textWithGaps_1 = (_textWithGaps_1 + _trim_10);
                          _builder.append(_plus_71, "\t\t");
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("        ");
                          String _xblockexpression_104 = null;
                          {
                            int _lastIndexOf_4 = diagram_6.lastIndexOf("/");
                            int _plus_72 = (_lastIndexOf_4 + 1);
                            String _substring_4 = diagram_6.substring(0, _plus_72);
                            String _name_5 = answersClass_7.getName();
                            String _plus_73 = (_substring_4 + _name_5);
                            String _plus_74 = (_plus_73 + "_");
                            int _lastIndexOf_5 = diagram_6.lastIndexOf("/");
                            int _plus_75 = (_lastIndexOf_5 + 1);
                            String _substring_5 = diagram_6.substring(_plus_75, diagram_6.length());
                            String _plus_76 = (_plus_74 + _substring_5);
                            diagram_6 = _plus_76;
                            _xblockexpression_104 = "";
                          }
                          _builder.append(_xblockexpression_104, "        ");
                          _builder.newLineIfNotEmpty();
                          _builder.append("        ");
                          _builder.append("<!--");
                          File file_7 = new File(((this.projectPath + "/src-gen/html/") + diagram_6));
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          {
                            if ((file_7.isFile() && file_7.exists())) {
                              _builder.append("        ");
                              String _xblockexpression_105 = null;
                              {
                                int _indexOf_4 = diagram_6.indexOf("/src-gen/html/");
                                int _length_8 = "/src-gen/html/".length();
                                int _plus_72 = (_indexOf_4 + _length_8);
                                diagram_6 = diagram_6.substring(_plus_72, diagram_6.length());
                                _xblockexpression_105 = "";
                              }
                              _builder.append(_xblockexpression_105, "        ");
                              _builder.newLineIfNotEmpty();
                              _builder.append("        ");
                              _builder.append("<question type=\"ddwtos\">");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<name>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("     ");
                              _builder.append("<text><![CDATA[<p>");
                              String _replace_29 = test_11.getQuestion().replace("\"", "\'");
                              _builder.append(_replace_29, "             ");
                              _builder.append("<br></p>]]></text>");
                              _builder.newLineIfNotEmpty();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("</name>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<questiontext format=\"html\">");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<text><![CDATA[<p>");
                              String _replace_30 = test_11.getQuestion().replace("\"", "\'");
                              _builder.append(_replace_30, "          ");
                              _builder.append("<br><img src=\"@@PLUGINFILE@@/exercise_");
                              _builder.append(uuid_6, "          ");
                              _builder.append(".png\" alt=\"\" width=\"20%\" height=\"20%\" role=\"presentation\" class=\"img-responsive atto_image_button_text-bottom\"><br><br></p><p>");
                              String _trim_11 = textWithGaps_1.trim();
                              _builder.append(_trim_11, "          ");
                              _builder.append("<br></p>]]></text>");
                              _builder.newLineIfNotEmpty();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<file name=\"exercise_");
                              _builder.append(uuid_6, "          ");
                              _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                              String _stringBase64_13 = this.getStringBase64(diagram_6);
                              _builder.append(_stringBase64_13, "          ");
                              _builder.append("</file>");
                              _builder.newLineIfNotEmpty();
                              _builder.append("    ");
                              _builder.append("</questiontext>");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<generalfeedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("      ");
                              _builder.append("<text></text>");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("</generalfeedback>");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<defaultgrade>1.0000000</defaultgrade>");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<penalty>0.3333333</penalty>");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<hidden>0</hidden>");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<idnumber></idnumber>");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<shuffleanswers>0</shuffleanswers>");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<correctfeedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("      ");
                              _builder.append("<!--<text>Respuesta correcta</text>-->");
                              _builder.newLine();
                              _builder.append("      ");
                              _builder.append("<text>Right answer.</text>");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("</correctfeedback>");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<partiallycorrectfeedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("      ");
                              _builder.append("<!--<text>Respuesta parcialmente correcta.</text>-->");
                              _builder.newLine();
                              _builder.append("      ");
                              _builder.append("<text>Partially right answer.</text>");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("</partiallycorrectfeedback>");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<incorrectfeedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("      ");
                              _builder.append("<!--<text>Respuesta incorrecta.</text>-->");
                              _builder.newLine();
                              _builder.append("      ");
                              _builder.append("<text>Wrong answer.</text>");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("</incorrectfeedback>");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<shownumcorrect/>");
                              _builder.newLine();
                              {
                                Set<String> _keySet_21 = groups.get(test_11).keySet();
                                for(final String typeName_2 : _keySet_21) {
                                  _builder.append("        ");
                                  _builder.append("<!-- ");
                                  Map<String, Map<String, Integer>> entries_5 = groups.get(test_11).get(typeName_2);
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  {
                                    Set<String> _keySet_22 = entries_5.keySet();
                                    for(final String attName_1 : _keySet_22) {
                                      _builder.append("        ");
                                      _builder.append("<!-- ");
                                      Map<String, Integer> entry_11 = groups.get(test_11).get(typeName_2).get(attName_1);
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                      {
                                        Set<String> _keySet_23 = entry_11.keySet();
                                        for(final String key_15 : _keySet_23) {
                                          _builder.append("        ");
                                          _builder.append("<dragbox>");
                                          _builder.newLine();
                                          _builder.append("        ");
                                          _builder.append("<text>");
                                          String _trim_12 = key_15.trim();
                                          _builder.append(_trim_12, "        ");
                                          _builder.append("</text>");
                                          _builder.newLineIfNotEmpty();
                                          _builder.append("        ");
                                          _builder.append("<group>");
                                          Integer _get_30 = groups.get(test_11).get(typeName_2).get(attName_1).get(key_15);
                                          _builder.append(_get_30, "        ");
                                          _builder.append("</group>");
                                          _builder.newLineIfNotEmpty();
                                          _builder.append("        ");
                                          _builder.append("<infinite/>");
                                          _builder.newLine();
                                          _builder.append("        ");
                                          _builder.append("</dragbox>");
                                          _builder.newLine();
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              _builder.append("        ");
                              _builder.append("</question>");
                              _builder.newLine();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      _builder.append("</quiz>");
      _builder.newLine();
      return _builder;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
