// automatically generated by Xtext
grammar wodeledu.dsls.ModelDraw with org.eclipse.xtext.common.Terminals

//import "http://modeldraw/1.0" 
import "platform:/resource/wodeledu.models/model/ModelDraw.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

MutatorDraw returns MutatorDraw:
	{MutatorDraw}
	'metamodel' metamodel=EString
	name=[ecore::EClass|ID] ':' type=DrawType
	'{'
	(nodes+=Node)*
	(relations+=Relation)*
	(contents+=Content)*
	'}'	
;

EString returns ecore::EString:
	STRING | ID;

enum DrawType returns DrawType:
	diagram = 'diagram';

Node returns Node:
	{Node}
	name=[ecore::EClass|ID] ('(' feature+=ValuedFeature (',' feature+=ValuedFeature)* ')')? ('->' targetNode=[ecore::EClass|ID] ('(' targetFeature+=ValuedFeature (',' targetFeature+=ValuedFeature)* ')')?)? ':'
	type=NodeType ('=' attName=[ecore::EAttribute|ID])?
	( 'compartments' '=' '{' reference+=[ecore::EReference|ID] ( reference+=[ecore::EReference|ID])* '}')?
	( 'shape' '=' shape=NodeShape ( '(' pathShape=EString ')')? )?
	( 'color' '=' color=NodeColor)?
	( 'style' '=' style=NodeStyle)?
;

ValuedFeature returns ValuedFeature:
	{ValuedFeature}
	(negation?='not')? feat=[ecore::EStructuralFeature|ID] ('->' refFeature=[ecore::EStructuralFeature|ID])? ('==' value='null')?
;

Relation returns Relation:
	Edge | Level
;

Edge returns Edge:
	{Edge}
	name=[ecore::EClass|ID] ('(' feature+=ValuedFeature (',' feature+=ValuedFeature)* ')')? ('(' source=[ecore::EReference|ID] ',' target=[ecore::EReference|ID] ')' | '->' targetNode=[ecore::EClass|ID]  ('(' targetFeature+=ValuedFeature (',' targetFeature+=ValuedFeature)* ')')?) ':'
	'edge' ('=' attName=[ecore::EAttribute|ID])?
	( 'label' '=' ( (reference+=[ecore::EReference|ID] ('->' refType+=[ecore::EReference|ID])? '.')? label+=[ecore::EAttribute|ID] |
		"{" (reference+=[ecore::EReference|ID] ('->' refType+=[ecore::EReference|ID])? '.')? label+=[ecore::EAttribute|ID]
				("(" (reference+=[ecore::EReference|ID] ('->' refType+=[ecore::EReference|ID])? '.')? label+=[ecore::EAttribute|ID] ")" )?
			("," (reference+=[ecore::EReference|ID] ('->' refType+=[ecore::EReference|ID])? '.')? label+=[ecore::EAttribute|ID]
				("(" (reference+=[ecore::EReference|ID] ('->' refType+=[ecore::EReference|ID])? '.')? label+=[ecore::EAttribute|ID] ")" )? )*
		"}" ))?
	( 'src_decoration' '=' src_decoration=Decoration)?
	( 'src_label' '=' src_label=[ecore::EAttribute|ID])?
	( 'tar_decoration' '=' tar_decoration=Decoration)?
	( 'tar_label' '=' tar_label=[ecore::EAttribute|ID])?
;

Level returns Level:
	{Level}
	name=[ecore::EClass|ID] '.' upper=[ecore::EReference|ID] ':'
	'edge' ('=' attName=[ecore::EAttribute|ID])?
	( 'label' '=' ( (reference+=[ecore::EReference|ID] ('->' refType+=[ecore::EReference|ID])? '.')? label+=[ecore::EAttribute|ID] |
		"{" (reference+=[ecore::EReference|ID] ('->' refType+=[ecore::EReference|ID])? '.')? label+=[ecore::EAttribute|ID]
				("(" (reference+=[ecore::EReference|ID] ('->' refType+=[ecore::EReference|ID])? '.')? label+=[ecore::EAttribute|ID] ")" )?
			("," (reference+=[ecore::EReference|ID] ('->' refType+=[ecore::EReference|ID])? '.')? label+=[ecore::EAttribute|ID]
				("(" (reference+=[ecore::EReference|ID] ('->' refType+=[ecore::EReference|ID])? '.')? label+=[ecore::EAttribute|ID] ")" )? )*
		"}" ))?
	( 'src_decoration' '=' src_decoration=Decoration)?
	( 'src_label' '=' src_label=[ecore::EAttribute|ID])?
	( 'tar_decoration' '=' tar_decoration=Decoration)?
	( 'tar_label' '=' tar_label=[ecore::EAttribute|ID])?
;

Content returns Content:
	{Content}
	name=[ecore::EClass|ID] ':'
	(nodenum+=NodeEnumerator ( nodenum+=NodeEnumerator)* )?
	(info+=Information (info+=Information)* )?
	('{' attName=[ecore::EAttribute|ID] '}' )?
	('text' '=' symbol=EString)?
;

NodeEnumerator returns NodeEnumerator:
	{NodeEnumerator}
	att=[ecore::EAttribute|ID] '[' enumerator+=Enumerator ( enumerator+=Enumerator)* ']'
;

Enumerator returns Enumerator:
	{Enumerator}
	literal=[ecore::EEnumLiteral|ID] '=' value=EString
;

Information returns Information:
	{Information}
	type=[ecore::EReference|ID] ('.' att=[ecore::EAttribute|ID])?
;

enum NodeType returns NodeType:
	node = 'node' | markednode = 'markednode';

enum NodeShape returns NodeShape:
	circle = 'circle' | doublecircle = 'doublecircle' | record = 'record' | load = 'load' | logic = 'logic';
				
enum NodeColor returns NodeColor:
	gray95 = 'gray95';
	
enum NodeStyle returns NodeStyle:
	italic = 'italic' | underline = 'underline';
	
enum Decoration returns Decoration:
	none = 'none' | triangle = 'triangle' | diamond = 'diamond' | odiamond = 'odiamond' | open = 'open' | empty = 'empty'
;