/*
 * generated by Xtext 2.30.0
 */
package wodeledu.dsls.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import wodeledu.dsls.ide.contentassist.antlr.internal.InternalMutaTextParser;
import wodeledu.dsls.services.MutaTextGrammarAccess;

public class MutaTextParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MutaTextGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MutaTextGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getWordAccess().getAlternatives(), "rule__Word__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getVariableTypeAccess().getAlternatives(), "rule__VariableType__Alternatives");
			builder.put(grammarAccess.getConfigurationAccess().getGroup(), "rule__Configuration__Group__0");
			builder.put(grammarAccess.getConfigurationAccess().getGroup_3(), "rule__Configuration__Group_3__0");
			builder.put(grammarAccess.getOptionAccess().getGroup(), "rule__Option__Group__0");
			builder.put(grammarAccess.getOptionAccess().getGroup_3(), "rule__Option__Group_3__0");
			builder.put(grammarAccess.getTextAccess().getGroup(), "rule__Text__Group__0");
			builder.put(grammarAccess.getTextAccess().getGroup_1(), "rule__Text__Group_1__0");
			builder.put(grammarAccess.getConstantAccess().getGroup(), "rule__Constant__Group__0");
			builder.put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
			builder.put(grammarAccess.getConfigurationAccess().getMetamodelAssignment_2(), "rule__Configuration__MetamodelAssignment_2");
			builder.put(grammarAccess.getConfigurationAccess().getOptionsAssignment_3_0(), "rule__Configuration__OptionsAssignment_3_0");
			builder.put(grammarAccess.getConfigurationAccess().getOptionsAssignment_3_1(), "rule__Configuration__OptionsAssignment_3_1");
			builder.put(grammarAccess.getOptionAccess().getTypeAssignment_2(), "rule__Option__TypeAssignment_2");
			builder.put(grammarAccess.getOptionAccess().getObjectAssignment_3_1(), "rule__Option__ObjectAssignment_3_1");
			builder.put(grammarAccess.getOptionAccess().getValidAssignment_5(), "rule__Option__ValidAssignment_5");
			builder.put(grammarAccess.getOptionAccess().getInvalidAssignment_7(), "rule__Option__InvalidAssignment_7");
			builder.put(grammarAccess.getTextAccess().getWordsAssignment_1_0(), "rule__Text__WordsAssignment_1_0");
			builder.put(grammarAccess.getTextAccess().getWordsAssignment_1_1(), "rule__Text__WordsAssignment_1_1");
			builder.put(grammarAccess.getConstantAccess().getValueAssignment_1(), "rule__Constant__ValueAssignment_1");
			builder.put(grammarAccess.getVariableAccess().getTypeAssignment_1(), "rule__Variable__TypeAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MutaTextGrammarAccess grammarAccess;

	@Override
	protected InternalMutaTextParser createParser() {
		InternalMutaTextParser result = new InternalMutaTextParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MutaTextGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MutaTextGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
