// automatically generated by Xtext
grammar wodeledu.dsls.EduTest with org.eclipse.xtext.common.Terminals

//import "http://edutest/1.0"
import "platform:/resource/wodel.models/models/EduTest.ecore" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "platform:/resource/wodel.models/models/MutatorEnvironment.ecore" as mutatorenvironment

Program returns Program:
	{Program}
	(config = ProgramConfiguration)?
	(exercises+=MutatorTests)+
;

MutatorTests returns MutatorTests:
	AlternativeResponse | MultiChoiceDiagram | MultiChoiceEmendation | MatchPairs | MissingWords | MultiChoiceText
;

AlternativeResponse returns AlternativeResponse:
	'AlternativeResponse' (blocks+=[mutatorenvironment::Block|ID] (',' blocks+=[mutatorenvironment::Block|ID])*)? '{'
		config = TestConfiguration
		(tests += Test)*
	'}'
;

MultiChoiceDiagram returns MultiChoiceDiagram:
	'MultiChoiceDiagram' (blocks+=[mutatorenvironment::Block|ID] (',' blocks+=[mutatorenvironment::Block|ID])*)? '{'
		config = TestConfiguration
		(tests += Test)*
	'}'
;

MultiChoiceEmendation returns MultiChoiceEmendation:
	'MultiChoiceEmendation' (blocks+=[mutatorenvironment::Block|ID] (',' blocks+=[mutatorenvironment::Block|ID])*)? '{'
		config = MultiChoiceEmConfig
		(tests += Test)*
	'}'
;

MatchPairs returns MatchPairs:
	'MatchPairs' (blocks+=[mutatorenvironment::Block|ID] (',' blocks+=[mutatorenvironment::Block|ID])*)? '{'
		config = TestConfiguration
		(tests += Test)*
	'}'
;

MissingWords returns MissingWords:
	'MissingWords' (blocks+=[mutatorenvironment::Block|ID] (',' blocks+=[mutatorenvironment::Block|ID])*)? '{'
		config = TestConfiguration
		(tests += Test)*
	'}'
;

MultiChoiceText returns MultiChoiceText:
	'MultiChoiceText' (blocks+=[mutatorenvironment::Block|ID] (',' blocks+=[mutatorenvironment::Block|ID])*)? '{'
		config = MultiChoiceTextConfig
		(tests += Test)*
	'}'
;

ProgramConfiguration returns ProgramConfiguration:
	'navigation' '=' navigation=Navigation
;

TestConfiguration returns TestConfiguration:
	{TestConfiguration}
	'retry' '=' retry?=('yes' | 'no')
;

MultiChoiceEmConfig returns MultiChoiceEmConfig:
	{MultiChoiceEmConfig}
	'retry' '=' retry?=('yes' | 'no') ',' 'weighted' '=' weighted?=('yes' | 'no') ',' 'penalty' '=' penalty=EDouble ',' 'order' '=' order=Order ',' 'mode' '=' mode=Mode
;

MultiChoiceTextConfig returns MultiChoiceTextConfig:
	{MultiChoiceTextConfig}
	'retry' '=' retry?=('yes' | 'no') ',' 'text' '=' identifier=EString
;

Test returns Test:
	'description' 'for' source=EString '=' question=EString  (expression?='%text' ('(' identifier=EString')')? )?
;

EString returns ecore::EString:
	STRING | ID;
	
EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	
enum Order returns Order:
	fixed = 'fixed' | random = 'random' | ascending = 'options-ascending' | descending = 'options-descending'
;

enum Mode returns Mode:
	radiobutton = 'radiobutton' | checkbox = 'checkbox'
;

enum Navigation returns Navigation:
	free = 'free' | locked = 'locked'
;

