/**
 * generated by Xtext 2.30.0
 */
package wodel.dsls.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import mutatorenvironment.Block;
import mutatorenvironment.Constraint;
import mutatorenvironment.Definition;
import mutatorenvironment.Load;
import mutatorenvironment.Mutator;
import mutatorenvironment.MutatorEnvironment;
import mutatorenvironment.Program;
import mutatorenvironment.Resource;
import mutatorenvironment.Source;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import wodel.dsls.services.WodelGrammarAccess;

@SuppressWarnings("all")
public class WodelFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private WodelGrammarAccess _wodelGrammarAccess;

  protected void _format(final MutatorEnvironment mutatorEnvironment, @Extension final IFormattableDocument document) {
    EList<Load> _load = mutatorEnvironment.getLoad();
    for (final Load load : _load) {
      document.<Load>format(load);
    }
    document.<Definition>format(mutatorEnvironment.getDefinition());
    EList<Block> _blocks = mutatorEnvironment.getBlocks();
    for (final Block block : _blocks) {
      document.<Block>format(block);
    }
    EList<Mutator> _commands = mutatorEnvironment.getCommands();
    for (final Mutator mutator : _commands) {
      document.<Mutator>format(mutator);
    }
    EList<Constraint> _constraints = mutatorEnvironment.getConstraints();
    for (final Constraint constraint : _constraints) {
      document.<Constraint>format(constraint);
    }
  }

  protected void _format(final Program program, @Extension final IFormattableDocument document) {
    document.<Source>format(program.getSource());
    EList<Resource> _resources = program.getResources();
    for (final Resource resource : _resources) {
      document.<Resource>format(resource);
    }
  }

  public void format(final Object program, final IFormattableDocument document) {
    if (program instanceof XtextResource) {
      _format((XtextResource)program, document);
      return;
    } else if (program instanceof Program) {
      _format((Program)program, document);
      return;
    } else if (program instanceof MutatorEnvironment) {
      _format((MutatorEnvironment)program, document);
      return;
    } else if (program instanceof EObject) {
      _format((EObject)program, document);
      return;
    } else if (program == null) {
      _format((Void)null, document);
      return;
    } else if (program != null) {
      _format(program, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(program, document).toString());
    }
  }
}
