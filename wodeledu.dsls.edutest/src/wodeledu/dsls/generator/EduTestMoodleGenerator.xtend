/*
 * generated by Xtext 2.13.0
 */
package wodeledu.dsls.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import manager.ModelManager
import edutest.Program
import edutest.AlternativeResponse
import java.net.URL
import org.eclipse.core.runtime.FileLocator
import org.eclipse.emf.ecore.EPackage
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.common.util.URI
import exceptions.ModelNotFoundException
import org.osgi.framework.Bundle
import org.eclipse.core.runtime.Platform
import java.util.List
import wodeledu.dsls.generator.EduTestSuperGenerator.TestOption
import wodeledu.dsls.generator.EduTestSuperGenerator.Registry
import java.util.UUID
import edutest.MultiChoiceDiagram
import edutest.MultiChoiceEmendation
import edutest.MatchPairs
import java.text.DecimalFormat
import java.text.NumberFormat
import java.util.Locale
import edutest.Test
import java.util.AbstractMap.SimpleEntry
import edutest.MissingWords
import java.util.Map
import java.util.ArrayList
import java.util.TreeMap
import java.util.HashMap
import edutest.MultiChoiceText

/**
 * @author Pablo Gomez-Abajo - eduTest code generator.
 * 
 * Generates the javascript and html code for the
 * test exercises application
 *  
 */
class EduTestMoodleGenerator extends EduTestSuperGenerator {

	private String fileName
	private String pageName
	private List<EObject> blocks

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		try {
			var i = 0;
			//loads the mutator model
			var xmiFileName = "file:/" + ModelManager.getWorkspaceAbsolutePath + "/" + project.name +
			"/" + ModelManager.getOutputFolder + "/" + resource.URI.lastSegment.replaceAll(".test", ".model")
			val Bundle bundle = Platform.getBundle("wodel.models")
	   		val URL fileURL = bundle.getEntry("/models/MutatorEnvironment.ecore")
	   		val String mutatorecore = FileLocator.resolve(fileURL).getFile()
			//val String mutatorecore = ModelManager.getWorkspaceAbsolutePath + "/" + project.name + "/resources/MutatorEnvironment.ecore";
			val List<EPackage> mutatorpackages = ModelManager.loadMetaModel(mutatorecore)
			//val EPackage epackage = mutatorpackages.get(0);
			//EPackage.Registry.INSTANCE.put(epackage.getNsURI(), epackage);
			val Resource mutatormodel = ModelManager.loadModel(mutatorpackages, URI.createURI(xmiFileName).toFileString)
			blocks = ModelManager.getObjectsOfType("Block", mutatormodel)

			for (p : resource.allContents.toIterable.filter(Program)) {
				if (i == 0) {
					fileName = 'xml/' + resource.URI.lastSegment.replaceAll(".test", "") + '.xml'
					pageName = resource.URI.lastSegment.replaceAll(".test", "") + '.xml'
				} else {
					fileName = 'xml/' + resource.URI.lastSegment.replaceAll(".test", "") + i + '.xml'
					pageName = resource.URI.lastSegment.replaceAll(".test", "") + i + '.xml'
				}
				fsa.generateFile(fileName, p.compile(resource))
				i++
			}
		}
		catch (ModelNotFoundException e) {
		}
	}

	def compile(Program program, Resource resource) '''
		«{buildOptions(program, resource, blocks, program.class); ""}»
		<?xml version="1.0" encoding="UTF-8"?>
		<quiz>
		  <question type="category">
		    <category>
		      <text>$course$/top/dfa</text>
		    </category>
		    <info format="moodle_auto_format">
		      <text>Default category in the context of deterministic finite automata.</text>
		      <!--<text>Categoria por defecto para preguntas compartidas en el contexto Aut&#243;matas.</text>-->
		    </info>
		    <idnumber></idnumber>
		  </question>
		
		
    	«var int i = 0»
		«FOR exercise : program.exercises»
    	«IF exercise instanceof AlternativeResponse»
		«FOR test : exercise.tests»
	    «IF rand.get(exercise).get(test).size() > 0»
          <question type="truefalse">
		    <name>
		      <text><![CDATA[<p>«test.question.replace("\"", "'")»<br></p>]]></text>
		    </name>
		    <questiontext format="html">
		      <!-- «var diagram = rand.get(exercise).get(test).get(0)»-->
		      <!-- «var UUID uuid = UUID.randomUUID()»-->
		      <text><![CDATA[<p>«test.question.replace("\"", "'")»<br></p><p><img src="@@PLUGINFILE@@/exercise_«uuid».png" alt="«test.question.replace("\"", "'")»" width="46%" height="46%" class="img-responsive atto_image_button_text-bottom"><br></p>]]></text>
		<file name="exercise_«uuid».png" path="/" encoding="base64">«getStringBase64("diagrams/" + test.source.replace('.model', '') + "/" + diagram)»</file>
		    </questiontext>
		    <generalfeedback format="html">
		      <text></text>
		    </generalfeedback>
		    <defaultgrade>1.0000000</defaultgrade>
		    <penalty>1.0000000</penalty>
		    <hidden>0</hidden>
		    <idnumber></idnumber>
		      «IF diagram.equals(test.source.replace('.model', '.png'))»
		    <answer fraction="100" format="moodle_auto_format">
		      <text>true</text>
		      <feedback format="html">
		        <text></text>
		      </feedback>
		    </answer>
		    <answer fraction="0" format="moodle_auto_format">
		      <text>false</text>
		      <feedback format="html">
		        <text></text>
		      </feedback>
		    </answer>
		      «ELSE»
		    <answer fraction="0" format="moodle_auto_format">
		      <text>true</text>
		      <feedback format="html">
		        <text></text>
		      </feedback>
		    </answer>
		    <answer fraction="100" format="moodle_auto_format">
		      <text>false</text>
		      <feedback format="html">
		        <text></text>
		      </feedback>
		    </answer>
		      «ENDIF»
		  </question>
		«ENDIF»
    	«ENDFOR»
		«ENDIF»
    	«IF exercise instanceof MultiChoiceDiagram»
           «var int min = Integer.MAX_VALUE»
		«FOR test : exercise.tests»
           «var int counter = diagrams.get(exercise).get(test).size()»
           «IF min > diagrams.get(exercise).get(test).size()»
           «{min = counter; ""}»
           «ENDIF»
         «ENDFOR»
		«FOR test : exercise.tests»
         <question type="multichoice">
           <name>
             <text>Question «i++»</text>
           </name>
           <questiontext format="html">
           <text><![CDATA[<p>«test.question.replace("\"", "'")»<br></p>]]></text>
           </questiontext>
           <generalfeedback format="html">
           <text></text>
           </generalfeedback>
           <defaultgrade>1.0000000</defaultgrade>
           <penalty>1.0000000</penalty>
           <hidden>0</hidden>
           <idnumber></idnumber>
           <single>true</single>
           <shuffleanswers>true</shuffleanswers>
           <answernumbering>abc</answernumbering>
           <correctfeedback format="html">
           <!--<text>Respuesta correcta</text>-->
           <text>Right answer.</text>
           </correctfeedback>
           <partiallycorrectfeedback format="html">
           <!--<text>Respuesta parcialmente correcta.</text>-->
           <text>Partially right answer.</text>
           </partiallycorrectfeedback>
           <incorrectfeedback format="html">
           <!--<text>Respuesta incorrecta.</text>-->
           <text>Wrong answer.</text>
           </incorrectfeedback>
           <shownumcorrect/>
           «var counter = 0»
           «FOR diagram : diagrams.get(exercise).get(test)»
		   <!-- «var UUID uuid = UUID.randomUUID()»-->
           «IF diagram.equals(test.source.replace('.model', '.png'))»
           <answer fraction="100" format="html">
           <text><![CDATA[<p><img src="@@PLUGINFILE@@/exercise_«uuid».png" alt="" width="46%" height="46%" role="presentation" class="img-responsive atto_image_button_text-bottom"><br></p>]]></text>
           <file name="exercise_«uuid».png" path="/" encoding="base64">«getStringBase64("diagrams/" + test.source.replace('.model', '') + "/" + diagram)»</file>
           <feedback format="html">
           <text></text>
           </feedback>
           </answer>
           «ELSE»
           «IF counter < min - 1»
           «{counter++; ""}»
           <answer fraction="0" format="html">
           <text><![CDATA[<p><img src="@@PLUGINFILE@@/exercise_«uuid».png" alt="" width="46%" height="46%" role="presentation" class="img-responsive atto_image_button_text-bottom"><br></p>]]></text>
           <file name="exercise_«uuid».png" path="/" encoding="base64">«getStringBase64("diagrams/" + test.source.replace('.model', '') + "/" + diagram)»</file>
           <feedback format="html">
           <text></text>
           </feedback>
           </answer>
           «ENDIF»
           «ENDIF»
           «ENDFOR»
         </question>
    	«ENDFOR»
		«ENDIF»
		«var Map<Test, List<SimpleEntry<String, Boolean>>> mapTextOptions = new HashMap<Test, List<SimpleEntry<String, Boolean>>>()»
		«IF exercise instanceof MultiChoiceEmendation»
        «var int min = Integer.MAX_VALUE»
		«FOR test : exercise.tests»
		«IF options.get(exercise) !== null && options.get(exercise).get(test) !== null»
          «var counter = 0»
          «var List<SimpleEntry<String, Boolean>> textOptions = new ArrayList<SimpleEntry<String, Boolean>>()»
          «FOR opt : options.get(exercise).get(test)»
          «FOR String key : opt.text.keySet()»
          «FOR String text : opt.text.get(key)»
          «var boolean found = false»
          «FOR SimpleEntry<String, Boolean> entry : textOptions»
          «IF entry.getKey().equals(text)»
          «{found = true; ""}»
          «ENDIF»
          «ENDFOR»
          «IF found == false»
          «{counter ++; ""}»
          «{textOptions.add(new SimpleEntry<String, Boolean>(text, false)); ""}»
          «ENDIF»
          «ENDFOR»
          «ENDFOR»
          «ENDFOR»
          «{mapTextOptions.put(test, textOptions); ""}»
          «IF min > counter»
          «{min = counter; ""}»
          «ENDIF»
        «ENDIF»
        «ENDFOR»
		«FOR test : exercise.tests»
		«IF options.get(exercise) !== null && options.get(exercise).get(test) !== null»
            <!--«var String diagram = ''»-->
			«IF (options.get(exercise).get(test) !== null)»
			«FOR opt : options.get(exercise).get(test)»
			«IF opt.text.size > 0»
			«IF opt.solution == true»
				<!--«diagram = opt.path»-->
			«ENDIF»
			«ENDIF»
			«ENDFOR»
			«ENDIF»
			«IF !diagram.equals('')»
        <question type="multichoice">
          <name>
             <text>Question «i++»</text>
          </name>
          <questiontext format="html">
            <!-- «var UUID uuid = UUID.randomUUID()»-->
			<text><![CDATA[<p>«test.question.replace("\"", "'")»<br><br><img src="@@PLUGINFILE@@/exercise_«uuid».png" alt="multiple choice" width="46%" height="46%" class="img-responsive atto_image_button_text-bottom"><br></p>]]></text>
            <file name="exercise_«uuid».png" path="/" encoding="base64">«getStringBase64(diagram)»</file>
          </questiontext>
          <generalfeedback format="html">
          <text></text>
          </generalfeedback>
          <defaultgrade>1.0000000</defaultgrade>
          <penalty>0.3333333</penalty>
          <hidden>0</hidden>
          <idnumber></idnumber>
          <single>false</single>
          <shuffleanswers>true</shuffleanswers>
          <answernumbering>abc«/*var char car = 'a'»«FOR opt : options.get(exercise).get(test)»«car++»«ENDFOR*/»</answernumbering>
          <correctfeedback format="html">
          <!--<text>Respuesta correcta</text>-->
          <text>Right answer.</text>
          </correctfeedback>
          <partiallycorrectfeedback format="html">
          <!--<text>Respuesta parcialmente correcta.</text>-->
          <text>Partially right answer.</text>
          </partiallycorrectfeedback>
          <incorrectfeedback format="html">
          <!--<text>Respuesta incorrecta.</text>-->
          <text>Wrong answer.</text>
          </incorrectfeedback>
          <shownumcorrect/>
          «var int solutions = 0»
          «IF (options.get(exercise).get(test) !== null)»
          «FOR opt : options.get(exercise).get(test)»
          «var List<String> textOptions = new ArrayList<String>()»
          «IF opt.text.size > 0»
          «IF opt.solution == true»
          «FOR String key : opt.text.keySet()»
          «FOR String text : opt.text.get(key)»
          «IF !textOptions.contains(text)»
                «{solutions ++; ""}»
                «{textOptions.add(text); ""}»
          «ENDIF»
          «ENDFOR»
          «ENDFOR»
          «ENDIF»
          «ENDIF»
          «ENDFOR»
          «FOR opt : options.get(exercise).get(test)»
          «IF opt.solution == true»
          «IF opt.text.size > 0»
          «FOR String key : opt.text.keySet()»
          «FOR String text : opt.text.get(key)»
          «var boolean found = false»
          «FOR SimpleEntry<String, Boolean> entry : mapTextOptions.get(test)»
          «IF entry.getKey().equals(text) && !entry.getValue()»
          «{found = true; ""}»
          «{entry.setValue(true); ""}»
          «ENDIF»
          «ENDFOR»
          «IF found == true»
          «IF 100 % solutions == 0»
          <answer fraction="«100/solutions»" format="html">
          <text><![CDATA[<p>«text.trim()»<br></p>]]></text>
          <feedback format="html">
          <text></text>
          </feedback>
          </answer>
          «ELSE»
          <!--«var DecimalFormat formatter = (NumberFormat.getNumberInstance(new Locale("en", "UK")) as DecimalFormat)»-->
          «{formatter.applyPattern("###.#####"); ""}»
          <answer fraction="«formatter.format(100.0/solutions)»" format="html">
          <text><![CDATA[<p>«text.trim()»<br></p>]]></text>
          <feedback format="html">
          <text></text>
          </feedback>
          </answer>
          «ENDIF»
          «ENDIF»
          «ENDFOR»
          «ENDFOR»
          «ENDIF»
          «ENDIF»
          «ENDFOR»
          «FOR opt : options.get(exercise).get(test)»
          «IF opt.solution == false»
          «var int counter = 0»
          «IF opt.text.size > 0»
          «FOR String key : opt.text.keySet()»
          «FOR String text : opt.text.get(key)»
          «var boolean found = false»
          «FOR SimpleEntry<String, Boolean> entry : mapTextOptions.get(test)»
          «IF entry.getKey().equals(text) && !entry.getValue()»
          «{found = true; ""}»
          «{entry.setValue(true); ""}»
          «ENDIF»
          «ENDFOR»
          «IF found == true»
          «IF counter < min - solutions»
          <answer fraction="0" format="html">
          <text><![CDATA[<p>«text.trim()»<br></p>]]></text>
          <feedback format="html">
          <text></text>
          </feedback>
          </answer>
          «{counter++; ""}»
          «ENDIF»
          «ENDIF»
          «ENDFOR»
          «ENDFOR»
          «ENDIF»
          «ENDIF»
          «ENDFOR»
          «FOR SimpleEntry<String, Boolean> entry : mapTextOptions.get(test)»
          «IF entry.getValue() == true»
          «ENDIF»
          «ENDFOR»
          «ENDIF»
        </question>
          «ENDIF»
          «ENDIF»
		«ENDFOR»
		«ENDIF»
		«IF exercise instanceof MatchPairs»
        «var int min = Integer.MAX_VALUE»
        «var int index = 0»
        «var int max = Integer.MIN_VALUE»
		«FOR test : exercise.tests»
		«IF options.get(exercise) !== null && options.get(exercise).get(test) !== null»
          «var List<String> textOptions = new ArrayList<String>()»
          «var int k = 0»
          «var int counter = 0»
          «FOR TestOption opt : options.get(exercise).get(test)»
          «FOR String key : opt.text.keySet()»
          «FOR String text : opt.text.get(key)»
          «IF !textOptions.contains(text)»
          «{counter++; ""}»
          «{textOptions.add(text); ""}»
          «ENDIF»
          «ENDFOR»
          «ENDFOR»
          «ENDFOR»
          «IF counter > max»
          «{max = counter; ""}»
          «{index = k; ""}»
          «ENDIF»
          «{k++; ""}»
        «ENDIF»
        «ENDFOR»
		«FOR test : exercise.tests»
		«IF options.get(exercise) !== null && options.get(exercise).get(test) !== null»
          «var int k = 0»
          «var int counter = 0»
          «var List<String> textOptions = new ArrayList<String>()»
          «FOR TestOption opt : options.get(exercise).get(test)»
          «FOR String key : opt.text.keySet()»
          «FOR String text : opt.text.get(key)»
          «IF !textOptions.contains(text)»
          «{counter++; ""}»
          «{textOptions.add(text); ""}»
          «ENDIF»
          «ENDFOR»
          «ENDFOR»
          «ENDFOR»
          «IF min > counter»
          «{min = counter; ""}»
          «ENDIF»
          «{k++; ""}»
        «ENDIF»
        «ENDFOR»
        «var int k = 0»
        «FOR Test test : exercise.tests»
        <!--«var TestOption opt = null»-->
        «IF (options.get(exercise).get(test) !== null && options.get(exercise).get(test).size() > index)»
        <!--«opt = options.get(exercise).get(test).get(index)»-->
        «ENDIF»
        «IF opt !== null»
        <!--«var String diagram = ''»-->
        <!--«diagram = opt.path»-->
        <question type="matching">
          <name>
             <text>Question «i++»</text>
          </name>
          <questiontext format="html">
          <!-- «var UUID uuid = UUID.randomUUID()»-->
          <text><![CDATA[<p>Match the correct option on the right with each of the statements on the left<br><img src="@@PLUGINFILE@@/exercise_«uuid».png" alt="" width="46%" height="46%" role="presentation" class="img-responsive atto_image_button_text-bottom"><br></p>]]></text>
          <!--<text><![CDATA[<p>Empareja cada uno de los enunciados de la izquierda con la opci&#243;n correcta de la derecha<br><img src="@@PLUGINFILE@@/exercise_«uuid».png" alt="" width="46%" height="46%" role="presentation" class="img-responsive atto_image_button_text-bottom"><br></p>]]></text>-->
          <file name="exercise_«uuid».png" path="/" encoding="base64">«getStringBase64(diagram)»</file>
          </questiontext>
          <generalfeedback format="html">
          <text></text>
          </generalfeedback>
          <defaultgrade>1.0000000</defaultgrade>
          <penalty>0.3333333</penalty>
          <hidden>0</hidden>
          <idnumber></idnumber>
          <shuffleanswers>true</shuffleanswers>
          <correctfeedback format="html">
          <!--<text>Respuesta correcta</text>-->
          <text>Right answer.</text>
          </correctfeedback>
          <partiallycorrectfeedback format="html">
          <!--<text>Respuesta parcialmente correcta.</text>-->
          <text>Partially right answer.</text>
          </partiallycorrectfeedback>
          <incorrectfeedback format="html">
          <!--<text>Respuesta incorrecta.</text>-->
          <text>Wrong answer.</text>
          </incorrectfeedback>
          <shownumcorrect/>
          «var TreeMap<Integer, SimpleEntry<String, String>> entries = new TreeMap<Integer, SimpleEntry<String, String>>()»
          «FOR TestOption op : options.get(exercise).get(test)»
            «IF test.expression == true»
            «var String key = getText(test.identifier, op.entry.getKey().getURI().toFileString(), resource)»
            «IF key.length() <= 36»
            «var boolean found = false»
            «FOR int length : entries.keySet()»
            «var SimpleEntry<String, String> entry = entries.get(length)»
            «IF entry.getValue().equals(key)»
            «{found = true; ""}»
            «ENDIF»
            «ENDFOR»
            «IF found == false»
            «var SimpleEntry<String, String> entry = new SimpleEntry<String, String>(key, op.text.get(op.text.keySet().get(index)).get(index).trim())»
            «{entries.put(key.length,  entry); ""}»
            «ENDIF»
            «ENDIF»
            «ENDIF»
          «ENDFOR»          
          «var String question = test.question.replace("\"", "'")»
          «var int counter = 0»
          «FOR int length : entries.keySet()»
          «IF counter < min»
          «var SimpleEntry<String, String> entry = entries.get(length)»
          <subquestion format="html">
			<text><![CDATA[<p>«question + entry.getKey()»<br></p>]]></text>
          <answer>
          <text><![CDATA[<p>«entry.getValue()»<br></p>]]></text>
          </answer>
          </subquestion>
          «{counter++; ""}»
          «ENDIF»
          «ENDFOR»
          «ENDIF»
        </question>
        «{k++; ""}»
          «ENDFOR»
        «ENDIF»
        «IF exercise instanceof MissingWords»
        «FOR test : exercise.tests»
        <question type="gapselect">
          <name>
             <text><![CDATA[<p>«test.question.replace("\"", "'")»<br></p>]]></text>
          </name>
          <questiontext format="html">
        <!-- «var int k = 0»-->
        <!-- «var int solution = 0»-->
        <!-- «var String textWithGaps = ""»-->
        <!-- «var TestOption op = null»-->
        «FOR TestOption opt : options.get(exercise).get(test)»
        «IF opt.path.contains(exercise.blocks.get(0).name)»
        <!--«op = opt»-->
        «ENDIF»
        «ENDFOR»
        «IF op !== null»
        <!-- «var String diagram = op.path»-->
        <!-- «var UUID uuid = UUID.randomUUID()»-->
        «FOR String key : op.options.keySet()»
		<!-- «var int tmp = k»-->
        <!--«var String opWithGaps = ""»-->
        «FOR String text : op.text.get(key)»
        <!--«k++»-->
        <!--«opWithGaps += text + "%" + k + " "»-->
        «ENDFOR»
        <!-- «k = tmp»-->
        <!-- «var List<SimpleEntry<String, SimpleEntry<Integer, Boolean>>> entries = op.options.get(key)»-->
        «FOR SimpleEntry<String, SimpleEntry<Integer, Boolean>> entry : entries»
        <!--«solution++»-->
        «IF entry.getValue().getValue() == true»
        <!-- «k++»-->
        <!-- «opWithGaps = opWithGaps.replace("%" + k, "[[" + solution + "]]")»-->
        «ENDIF»
        «ENDFOR»
		<!-- «textWithGaps += opWithGaps.trim() + ".<br>"»-->
        «ENDFOR»
          <text><![CDATA[<p>«test.question.replace("\"", "'")»<br><img src="@@PLUGINFILE@@/exercise_«uuid».png" alt="" width="46%" height="46%" role="presentation" class="img-responsive atto_image_button_text-bottom"><br><br></p><p>«textWithGaps.trim()»<br></p>]]></text>
          <file name="exercise_«uuid».png" path="/" encoding="base64">«getStringBase64(diagram)»</file>
    </questiontext>
    <generalfeedback format="html">
      <text></text>
    </generalfeedback>
    <defaultgrade>1.0000000</defaultgrade>
    <penalty>0.3333333</penalty>
    <hidden>0</hidden>
    <idnumber></idnumber>
    <shuffleanswers>0</shuffleanswers>
    <correctfeedback format="html">
      <!--<text>Respuesta correcta</text>-->
      <text>Right answer.</text>
    </correctfeedback>
    <partiallycorrectfeedback format="html">
      <!--<text>Respuesta parcialmente correcta.</text>-->
      <text>Partially right answer.</text>
    </partiallycorrectfeedback>
    <incorrectfeedback format="html">
      <!--<text>Respuesta incorrecta.</text>-->
      <text>Wrong answer.</text>
    </incorrectfeedback>
    <shownumcorrect/>
        «FOR String key : op.options.keySet()»
        <!-- «var List<SimpleEntry<String, SimpleEntry<Integer, Boolean>>> entries = op.options.get(key)»-->
        «FOR SimpleEntry<String, SimpleEntry<Integer, Boolean>> entry : entries»
        <selectoption>
        <text>«entry.getKey().trim()»</text>
        <group>«entry.getValue().getKey()»</group>
        </selectoption>
        «ENDFOR»
        «ENDFOR»
        «ENDIF»
        </question>
	    «ENDFOR»
        «ENDIF»
    	«IF exercise instanceof MultiChoiceText»
           «var int min = Integer.MAX_VALUE»
		«FOR test : exercise.tests»
           «var int counter = diagrams.get(exercise).get(test).size()»
           «IF min > diagrams.get(exercise).get(test).size()»
           «{min = counter; ""}»
           «ENDIF»
         «ENDFOR»
		«FOR Test test : exercise.tests»
         <question type="multichoice">
           <name>
             <text>Question «i++»</text>
           </name>
           <questiontext format="html">
		   <!-- «var UUID uuid = UUID.randomUUID()»-->
           <text><![CDATA[<p>«test.question.replace("\"", "'")»<br><img src="@@PLUGINFILE@@/exercise_«uuid».png" alt="" width="46%" height="46%" role="presentation" class="img-responsive atto_image_button_text-bottom"><br></p>]]></text>
           <file name="exercise_«uuid».png" path="/" encoding="base64">«getStringBase64("diagrams/" + test.source.replace('.model', '') + "/" + test.source.replace('.model', '.png'))»</file>
           </questiontext>
           <generalfeedback format="html">
           <text></text>
           </generalfeedback>
           <defaultgrade>1.0000000</defaultgrade>
           <penalty>1.0000000</penalty>
           <hidden>0</hidden>
           <idnumber></idnumber>
           <single>true</single>
           <shuffleanswers>true</shuffleanswers>
           <answernumbering>abc</answernumbering>
           <correctfeedback format="html">
           <!--<text>Respuesta correcta</text>-->
           <text>Right answer.</text>
           </correctfeedback>
           <partiallycorrectfeedback format="html">
           <!--<text>Respuesta parcialmente correcta.</text>-->
           <text>Partially right answer.</text>
           </partiallycorrectfeedback>
           <incorrectfeedback format="html">
           <!--<text>Respuesta incorrecta.</text>-->
           <text>Wrong answer.</text>
           </incorrectfeedback>
           <shownumcorrect/>
           «var counter = 0»
           «FOR diagram : diagrams.get(exercise).get(test)»
		   <!-- «uuid = UUID.randomUUID()»-->
           «IF diagram.equals(test.source.replace('.model', '.png'))»
           «var String text = getText((exercise as MultiChoiceText).config.identifier, ModelManager.getMetaModelPath() + "/" + test.source, resource)»
           <answer fraction="100" format="html">
           <text><![CDATA[<p>«text»<br></p>]]></text>
           <!--<text><![CDATA[<p>«text»<img src="@@PLUGINFILE@@/exercise_«uuid».png" alt="" width="46%" height="46%" role="presentation" class="img-responsive atto_image_button_text-bottom"><br></p>]]></text>
           <file name="exercise_«uuid».png" path="/" encoding="base64">«getStringBase64("diagrams/" + test.source.replace('.model', '') + "/" + diagram)»</file>-->
           <feedback format="html">
           <text></text>
           </feedback>
           </answer>
           «ELSE»
           «IF counter < min - 1»
           «{counter++; ""}»
           «var String text = getText((exercise as MultiChoiceText).config.identifier, ModelManager.getOutputPath() + "/" + test.source.replace('.model', '') + "/" + diagram.replace(".png", ".model"), resource)»
           <answer fraction="0" format="html">
           <text><![CDATA[<p>«text»<br></p>]]></text>
           <!--<text><![CDATA[<p>«text»<img src="@@PLUGINFILE@@/exercise_«uuid».png" alt="" width="46%" height="46%" role="presentation" class="img-responsive atto_image_button_text-bottom"><br></p>]]></text>
           <file name="exercise_«uuid».png" path="/" encoding="base64">«getStringBase64("diagrams/" + test.source.replace('.model', '') + "/" + diagram)»</file>-->
           <feedback format="html">
           <text></text>
           </feedback>
           </answer>
           «ENDIF»
           «ENDIF»
           «ENDFOR»
         </question>
    	«ENDFOR»
		«ENDIF»
		«ENDFOR»
		</quiz>
	'''
}
