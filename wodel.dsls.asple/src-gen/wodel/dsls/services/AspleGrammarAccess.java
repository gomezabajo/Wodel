/*
 * generated by Xtext 2.37.0
 */
package wodel.dsls.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ASPLEGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "wodel.dsls.ASPLE.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cProgramAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBeginKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cDeclarationsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cDeclarationsDeclarationParserRuleCall_2_0_0 = (RuleCall)cDeclarationsAssignment_2_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementsStatementParserRuleCall_3_0 = (RuleCall)cStatementsAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Program returns Program:
		//    {Program}
		//    'begin'
		//        ( declarations+=Declaration ';' )*
		//        ( statements+=Statement )*
		//    'end'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Program}
		//'begin'
		//    ( declarations+=Declaration ';' )*
		//    ( statements+=Statement )*
		//'end'
		public Group getGroup() { return cGroup; }
		
		//{Program}
		public Action getProgramAction_0() { return cProgramAction_0; }
		
		//'begin'
		public Keyword getBeginKeyword_1() { return cBeginKeyword_1; }
		
		//( declarations+=Declaration ';' )*
		public Group getGroup_2() { return cGroup_2; }
		
		//declarations+=Declaration
		public Assignment getDeclarationsAssignment_2_0() { return cDeclarationsAssignment_2_0; }
		
		//Declaration
		public RuleCall getDeclarationsDeclarationParserRuleCall_2_0_0() { return cDeclarationsDeclarationParserRuleCall_2_0_0; }
		
		//';'
		public Keyword getSemicolonKeyword_2_1() { return cSemicolonKeyword_2_1; }
		
		//( statements+=Statement )*
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_3_0() { return cStatementsStatementParserRuleCall_3_0; }
		
		//'end'
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "wodel.dsls.ASPLE.Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cRefRefKeyword_1_0 = (Keyword)cRefAssignment_1.eContents().get(0);
		private final Assignment cModeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cModeModeEnumRuleCall_2_0 = (RuleCall)cModeAssignment_2.eContents().get(0);
		private final Assignment cIdentifiersAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cIdentifiersIdentifierParserRuleCall_3_0 = (RuleCall)cIdentifiersAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cIdentifiersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIdentifiersIdentifierParserRuleCall_4_1_0 = (RuleCall)cIdentifiersAssignment_4_1.eContents().get(0);
		
		//Declaration returns Declaration:
		//    {Declaration}
		//    (ref ?= 'ref')? (mode = Mode)? identifiers+=Identifier (',' identifiers += Identifier)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Declaration}
		//(ref ?= 'ref')? (mode = Mode)? identifiers+=Identifier (',' identifiers += Identifier)*
		public Group getGroup() { return cGroup; }
		
		//{Declaration}
		public Action getDeclarationAction_0() { return cDeclarationAction_0; }
		
		//(ref ?= 'ref')?
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//'ref'
		public Keyword getRefRefKeyword_1_0() { return cRefRefKeyword_1_0; }
		
		//(mode = Mode)?
		public Assignment getModeAssignment_2() { return cModeAssignment_2; }
		
		//Mode
		public RuleCall getModeModeEnumRuleCall_2_0() { return cModeModeEnumRuleCall_2_0; }
		
		//identifiers+=Identifier
		public Assignment getIdentifiersAssignment_3() { return cIdentifiersAssignment_3; }
		
		//Identifier
		public RuleCall getIdentifiersIdentifierParserRuleCall_3_0() { return cIdentifiersIdentifierParserRuleCall_3_0; }
		
		//(',' identifiers += Identifier)*
		public Group getGroup_4() { return cGroup_4; }
		
		//','
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//identifiers += Identifier
		public Assignment getIdentifiersAssignment_4_1() { return cIdentifiersAssignment_4_1; }
		
		//Identifier
		public RuleCall getIdentifiersIdentifierParserRuleCall_4_1_0() { return cIdentifiersIdentifierParserRuleCall_4_1_0; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "wodel.dsls.ASPLE.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "wodel.dsls.ASPLE.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "wodel.dsls.ASPLE.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "wodel.dsls.ASPLE.EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EDouble returns ecore::EDouble:
		//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E'|'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E'|'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//('E'|'e')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "wodel.dsls.ASPLE.Identifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIdentifierAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Identifier returns Identifier:
		//    {Identifier}
		//    name=EString
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Identifier}
		//name=EString
		public Group getGroup() { return cGroup; }
		
		//{Identifier}
		public Action getIdentifierAction_0() { return cIdentifierAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class LiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "wodel.dsls.ASPLE.Literal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDoubleParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Literal returns Literal:
		//    Integer|Boolean|Double
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Integer|Boolean|Double
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Integer
		public RuleCall getIntegerParserRuleCall_0() { return cIntegerParserRuleCall_0; }
		
		//Boolean
		public RuleCall getBooleanParserRuleCall_1() { return cBooleanParserRuleCall_1; }
		
		//Double
		public RuleCall getDoubleParserRuleCall_2() { return cDoubleParserRuleCall_2; }
	}
	public class IntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "wodel.dsls.ASPLE.Integer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEIntParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Integer returns Integer:
		//    {Integer}
		//    value=EInt
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Integer}
		//value=EInt
		public Group getGroup() { return cGroup; }
		
		//{Integer}
		public Action getIntegerAction_0() { return cIntegerAction_0; }
		
		//value=EInt
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_1_0() { return cValueEIntParserRuleCall_1_0; }
	}
	public class BooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "wodel.dsls.ASPLE.Boolean");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEBooleanParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Boolean returns Boolean:
		//     {Boolean}
		//     value=EBoolean
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Boolean}
		//value=EBoolean
		public Group getGroup() { return cGroup; }
		
		//{Boolean}
		public Action getBooleanAction_0() { return cBooleanAction_0; }
		
		//value=EBoolean
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//EBoolean
		public RuleCall getValueEBooleanParserRuleCall_1_0() { return cValueEBooleanParserRuleCall_1_0; }
	}
	public class DoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "wodel.dsls.ASPLE.Double");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDoubleAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueEDoubleParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Double returns Double:
		//    {Double}
		//    value=EDouble
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Double}
		//value=EDouble
		public Group getGroup() { return cGroup; }
		
		//{Double}
		public Action getDoubleAction_0() { return cDoubleAction_0; }
		
		//value=EDouble
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//EDouble
		public RuleCall getValueEDoubleParserRuleCall_1_0() { return cValueEDoubleParserRuleCall_1_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "wodel.dsls.ASPLE.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cConditionalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLoopParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTransputParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Statement returns Statement:
		//    Assignment | Conditional | Loop | Transput;
		@Override public ParserRule getRule() { return rule; }
		
		//Assignment | Conditional | Loop | Transput
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Assignment
		public RuleCall getAssignmentParserRuleCall_0() { return cAssignmentParserRuleCall_0; }
		
		//Conditional
		public RuleCall getConditionalParserRuleCall_1() { return cConditionalParserRuleCall_1; }
		
		//Loop
		public RuleCall getLoopParserRuleCall_2() { return cLoopParserRuleCall_2; }
		
		//Transput
		public RuleCall getTransputParserRuleCall_3() { return cTransputParserRuleCall_3; }
	}
	public class AssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "wodel.dsls.ASPLE.Assignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVarAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cVarIdentifierCrossReference_0_0 = (CrossReference)cVarAssignment_0.eContents().get(0);
		private final RuleCall cVarIdentifierIDTerminalRuleCall_0_0_1 = (RuleCall)cVarIdentifierCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Assignment returns Assignment:
		//    var=[Identifier|ID] '=' value=Expression ';';
		@Override public ParserRule getRule() { return rule; }
		
		//var=[Identifier|ID] '=' value=Expression ';'
		public Group getGroup() { return cGroup; }
		
		//var=[Identifier|ID]
		public Assignment getVarAssignment_0() { return cVarAssignment_0; }
		
		//[Identifier|ID]
		public CrossReference getVarIdentifierCrossReference_0_0() { return cVarIdentifierCrossReference_0_0; }
		
		//ID
		public RuleCall getVarIdentifierIDTerminalRuleCall_0_0_1() { return cVarIdentifierIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class ConditionalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "wodel.dsls.ASPLE.Conditional");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cConditionalAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cIfAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cIfStatementParserRuleCall_6_0 = (RuleCall)cIfAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cElseKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cElseAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cElseStatementParserRuleCall_8_2_0 = (RuleCall)cElseAssignment_8_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		
		//Conditional returns Conditional:
		//    {Conditional}
		//    'if' '(' expression=Expression ')' '{' ( if+=Statement )* '}'
		//    ('else' '{' ( else+=Statement )* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Conditional}
		//'if' '(' expression=Expression ')' '{' ( if+=Statement )* '}'
		//('else' '{' ( else+=Statement )* '}')?
		public Group getGroup() { return cGroup; }
		
		//{Conditional}
		public Action getConditionalAction_0() { return cConditionalAction_0; }
		
		//'if'
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_3_0() { return cExpressionExpressionParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }
		
		//( if+=Statement )*
		public Assignment getIfAssignment_6() { return cIfAssignment_6; }
		
		//Statement
		public RuleCall getIfStatementParserRuleCall_6_0() { return cIfStatementParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//('else' '{' ( else+=Statement )* '}')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'else'
		public Keyword getElseKeyword_8_0() { return cElseKeyword_8_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8_1() { return cLeftCurlyBracketKeyword_8_1; }
		
		//( else+=Statement )*
		public Assignment getElseAssignment_8_2() { return cElseAssignment_8_2; }
		
		//Statement
		public RuleCall getElseStatementParserRuleCall_8_2_0() { return cElseStatementParserRuleCall_8_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8_3() { return cRightCurlyBracketKeyword_8_3; }
	}
	public class LoopElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "wodel.dsls.ASPLE.Loop");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cLoopAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cWhileKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cExpressionAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cExpressionExpressionParserRuleCall_0_3_0 = (RuleCall)cExpressionAssignment_0_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_0_5 = (Keyword)cGroup_0.eContents().get(5);
		private final Assignment cStatementsAssignment_0_6 = (Assignment)cGroup_0.eContents().get(6);
		private final RuleCall cStatementsStatementParserRuleCall_0_6_0 = (RuleCall)cStatementsAssignment_0_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_7 = (Keyword)cGroup_0.eContents().get(7);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cRepeatKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cStatementsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cStatementsStatementParserRuleCall_1_2_0 = (RuleCall)cStatementsAssignment_1_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Keyword cUntilKeyword_1_4 = (Keyword)cGroup_1.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		private final Assignment cExpressionAssignment_1_6 = (Assignment)cGroup_1.eContents().get(6);
		private final RuleCall cExpressionExpressionParserRuleCall_1_6_0 = (RuleCall)cExpressionAssignment_1_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_7 = (Keyword)cGroup_1.eContents().get(7);
		
		//Loop returns Loop:
		//    {Loop}
		//    'while' '(' expression=Expression ')' '{' ( statements+=Statement )* '}' |
		//    'repeat' '{' ( statements+=Statement )* '}' 'until' '(' expression=Expression ')'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Loop}
		//'while' '(' expression=Expression ')' '{' ( statements+=Statement )* '}' |
		//'repeat' '{' ( statements+=Statement )* '}' 'until' '(' expression=Expression ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{Loop}
		//'while' '(' expression=Expression ')' '{' ( statements+=Statement )* '}'
		public Group getGroup_0() { return cGroup_0; }
		
		//{Loop}
		public Action getLoopAction_0_0() { return cLoopAction_0_0; }
		
		//'while'
		public Keyword getWhileKeyword_0_1() { return cWhileKeyword_0_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_2() { return cLeftParenthesisKeyword_0_2; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_0_3() { return cExpressionAssignment_0_3; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_3_0() { return cExpressionExpressionParserRuleCall_0_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_4() { return cRightParenthesisKeyword_0_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0_5() { return cLeftCurlyBracketKeyword_0_5; }
		
		//( statements+=Statement )*
		public Assignment getStatementsAssignment_0_6() { return cStatementsAssignment_0_6; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0_6_0() { return cStatementsStatementParserRuleCall_0_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_0_7() { return cRightCurlyBracketKeyword_0_7; }
		
		//'repeat' '{' ( statements+=Statement )* '}' 'until' '(' expression=Expression ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'repeat'
		public Keyword getRepeatKeyword_1_0() { return cRepeatKeyword_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_1() { return cLeftCurlyBracketKeyword_1_1; }
		
		//( statements+=Statement )*
		public Assignment getStatementsAssignment_1_2() { return cStatementsAssignment_1_2; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_1_2_0() { return cStatementsStatementParserRuleCall_1_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_3() { return cRightCurlyBracketKeyword_1_3; }
		
		//'until'
		public Keyword getUntilKeyword_1_4() { return cUntilKeyword_1_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_5() { return cLeftParenthesisKeyword_1_5; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1_6() { return cExpressionAssignment_1_6; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_6_0() { return cExpressionExpressionParserRuleCall_1_6_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_7() { return cRightParenthesisKeyword_1_7; }
	}
	public class TransputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "wodel.dsls.ASPLE.Transput");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTransputAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInputKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cVarAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVarIdentifierCrossReference_2_0 = (CrossReference)cVarAssignment_2.eContents().get(0);
		private final RuleCall cVarIdentifierIDTerminalRuleCall_2_0_1 = (RuleCall)cVarIdentifierCrossReference_2_0.eContents().get(1);
		private final Keyword cOutputKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		
		//Transput returns Transput:
		//    {Transput}
		//    'input' var=[Identifier|ID]
		//    'output' expression=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{Transput}
		//'input' var=[Identifier|ID]
		//'output' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//{Transput}
		public Action getTransputAction_0() { return cTransputAction_0; }
		
		//'input'
		public Keyword getInputKeyword_1() { return cInputKeyword_1; }
		
		//var=[Identifier|ID]
		public Assignment getVarAssignment_2() { return cVarAssignment_2; }
		
		//[Identifier|ID]
		public CrossReference getVarIdentifierCrossReference_2_0() { return cVarIdentifierCrossReference_2_0; }
		
		//ID
		public RuleCall getVarIdentifierIDTerminalRuleCall_2_0_1() { return cVarIdentifierIDTerminalRuleCall_2_0_1; }
		
		//'output'
		public Keyword getOutputKeyword_3() { return cOutputKeyword_3; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_4_0() { return cExpressionExpressionParserRuleCall_4_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "wodel.dsls.ASPLE.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBinaryOperatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expression returns Expression:
		//    Primary | BinaryOperator
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary | BinaryOperator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//BinaryOperator
		public RuleCall getBinaryOperatorParserRuleCall_1() { return cBinaryOperatorParserRuleCall_1; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "wodel.dsls.ASPLE.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIdentifierParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Primary returns Primary:
		//    Identifier|Literal
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Identifier|Literal
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Identifier
		public RuleCall getIdentifierParserRuleCall_0() { return cIdentifierParserRuleCall_0; }
		
		//Literal
		public RuleCall getLiteralParserRuleCall_1() { return cLiteralParserRuleCall_1; }
	}
	public class BinaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "wodel.dsls.ASPLE.BinaryOperator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBinaryOperatorAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftPrimaryParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cOperatorAlternatives_2_0 = (Alternatives)cOperatorAssignment_2.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_2_0_0 = (Keyword)cOperatorAlternatives_2_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_2_0_1 = (Keyword)cOperatorAlternatives_2_0.eContents().get(1);
		private final Keyword cOperatorAsteriskKeyword_2_0_2 = (Keyword)cOperatorAlternatives_2_0.eContents().get(2);
		private final Keyword cOperatorSolidusKeyword_2_0_3 = (Keyword)cOperatorAlternatives_2_0.eContents().get(3);
		private final Keyword cOperatorPercentSignKeyword_2_0_4 = (Keyword)cOperatorAlternatives_2_0.eContents().get(4);
		private final Keyword cOperatorEqualsSignEqualsSignKeyword_2_0_5 = (Keyword)cOperatorAlternatives_2_0.eContents().get(5);
		private final Keyword cOperatorExclamationMarkEqualsSignKeyword_2_0_6 = (Keyword)cOperatorAlternatives_2_0.eContents().get(6);
		private final Keyword cOperatorGreaterThanSignKeyword_2_0_7 = (Keyword)cOperatorAlternatives_2_0.eContents().get(7);
		private final Keyword cOperatorLessThanSignKeyword_2_0_8 = (Keyword)cOperatorAlternatives_2_0.eContents().get(8);
		private final Assignment cRightAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightExpressionParserRuleCall_3_0 = (RuleCall)cRightAssignment_3.eContents().get(0);
		
		//BinaryOperator returns BinaryOperator:
		//    {BinaryOperator}
		//    left=Primary operator=('+' | '-' | '*' | '/' | '%' | '==' | '!=' | '>' | '<' ) right=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{BinaryOperator}
		//left=Primary operator=('+' | '-' | '*' | '/' | '%' | '==' | '!=' | '>' | '<' ) right=Expression
		public Group getGroup() { return cGroup; }
		
		//{BinaryOperator}
		public Action getBinaryOperatorAction_0() { return cBinaryOperatorAction_0; }
		
		//left=Primary
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//Primary
		public RuleCall getLeftPrimaryParserRuleCall_1_0() { return cLeftPrimaryParserRuleCall_1_0; }
		
		//operator=('+' | '-' | '*' | '/' | '%' | '==' | '!=' | '>' | '<' )
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//('+' | '-' | '*' | '/' | '%' | '==' | '!=' | '>' | '<' )
		public Alternatives getOperatorAlternatives_2_0() { return cOperatorAlternatives_2_0; }
		
		//'+'
		public Keyword getOperatorPlusSignKeyword_2_0_0() { return cOperatorPlusSignKeyword_2_0_0; }
		
		//'-'
		public Keyword getOperatorHyphenMinusKeyword_2_0_1() { return cOperatorHyphenMinusKeyword_2_0_1; }
		
		//'*'
		public Keyword getOperatorAsteriskKeyword_2_0_2() { return cOperatorAsteriskKeyword_2_0_2; }
		
		//'/'
		public Keyword getOperatorSolidusKeyword_2_0_3() { return cOperatorSolidusKeyword_2_0_3; }
		
		//'%'
		public Keyword getOperatorPercentSignKeyword_2_0_4() { return cOperatorPercentSignKeyword_2_0_4; }
		
		//'=='
		public Keyword getOperatorEqualsSignEqualsSignKeyword_2_0_5() { return cOperatorEqualsSignEqualsSignKeyword_2_0_5; }
		
		//'!='
		public Keyword getOperatorExclamationMarkEqualsSignKeyword_2_0_6() { return cOperatorExclamationMarkEqualsSignKeyword_2_0_6; }
		
		//'>'
		public Keyword getOperatorGreaterThanSignKeyword_2_0_7() { return cOperatorGreaterThanSignKeyword_2_0_7; }
		
		//'<'
		public Keyword getOperatorLessThanSignKeyword_2_0_8() { return cOperatorLessThanSignKeyword_2_0_8; }
		
		//right=Expression
		public Assignment getRightAssignment_3() { return cRightAssignment_3; }
		
		//Expression
		public RuleCall getRightExpressionParserRuleCall_3_0() { return cRightExpressionParserRuleCall_3_0; }
	}
	
	public class ModeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "wodel.dsls.ASPLE.Mode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cIntIntKeyword_0_0 = (Keyword)cIntEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBoolEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBoolBoolKeyword_1_0 = (Keyword)cBoolEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDoubleEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDoubleDoubleKeyword_2_0 = (Keyword)cDoubleEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Mode returns Mode:
		//    int = 'int' | bool = 'bool' | double = 'double';
		public EnumRule getRule() { return rule; }
		
		//int = 'int' | bool = 'bool' | double = 'double'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//int = 'int'
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_0() { return cIntEnumLiteralDeclaration_0; }
		
		//'int'
		public Keyword getIntIntKeyword_0_0() { return cIntIntKeyword_0_0; }
		
		//bool = 'bool'
		public EnumLiteralDeclaration getBoolEnumLiteralDeclaration_1() { return cBoolEnumLiteralDeclaration_1; }
		
		//'bool'
		public Keyword getBoolBoolKeyword_1_0() { return cBoolBoolKeyword_1_0; }
		
		//double = 'double'
		public EnumLiteralDeclaration getDoubleEnumLiteralDeclaration_2() { return cDoubleEnumLiteralDeclaration_2; }
		
		//'double'
		public Keyword getDoubleDoubleKeyword_2_0() { return cDoubleDoubleKeyword_2_0; }
	}
	
	private final ProgramElements pProgram;
	private final DeclarationElements pDeclaration;
	private final ModeElements eMode;
	private final EStringElements pEString;
	private final EIntElements pEInt;
	private final EBooleanElements pEBoolean;
	private final EDoubleElements pEDouble;
	private final IdentifierElements pIdentifier;
	private final LiteralElements pLiteral;
	private final IntegerElements pInteger;
	private final BooleanElements pBoolean;
	private final DoubleElements pDouble;
	private final StatementElements pStatement;
	private final AssignmentElements pAssignment;
	private final ConditionalElements pConditional;
	private final LoopElements pLoop;
	private final TransputElements pTransput;
	private final ExpressionElements pExpression;
	private final PrimaryElements pPrimary;
	private final BinaryOperatorElements pBinaryOperator;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ASPLEGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pDeclaration = new DeclarationElements();
		this.eMode = new ModeElements();
		this.pEString = new EStringElements();
		this.pEInt = new EIntElements();
		this.pEBoolean = new EBooleanElements();
		this.pEDouble = new EDoubleElements();
		this.pIdentifier = new IdentifierElements();
		this.pLiteral = new LiteralElements();
		this.pInteger = new IntegerElements();
		this.pBoolean = new BooleanElements();
		this.pDouble = new DoubleElements();
		this.pStatement = new StatementElements();
		this.pAssignment = new AssignmentElements();
		this.pConditional = new ConditionalElements();
		this.pLoop = new LoopElements();
		this.pTransput = new TransputElements();
		this.pExpression = new ExpressionElements();
		this.pPrimary = new PrimaryElements();
		this.pBinaryOperator = new BinaryOperatorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("wodel.dsls.ASPLE".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program returns Program:
	//    {Program}
	//    'begin'
	//        ( declarations+=Declaration ';' )*
	//        ( statements+=Statement )*
	//    'end'
	//;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Declaration returns Declaration:
	//    {Declaration}
	//    (ref ?= 'ref')? (mode = Mode)? identifiers+=Identifier (',' identifiers += Identifier)*;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}
	
	//enum Mode returns Mode:
	//    int = 'int' | bool = 'bool' | double = 'double';
	public ModeElements getModeAccess() {
		return eMode;
	}
	
	public EnumRule getModeRule() {
		return getModeAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//EDouble returns ecore::EDouble:
	//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	//Identifier returns Identifier:
	//    {Identifier}
	//    name=EString
	//;
	public IdentifierElements getIdentifierAccess() {
		return pIdentifier;
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}
	
	//Literal returns Literal:
	//    Integer|Boolean|Double
	//;
	public LiteralElements getLiteralAccess() {
		return pLiteral;
	}
	
	public ParserRule getLiteralRule() {
		return getLiteralAccess().getRule();
	}
	
	//Integer returns Integer:
	//    {Integer}
	//    value=EInt
	//;
	public IntegerElements getIntegerAccess() {
		return pInteger;
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}
	
	//Boolean returns Boolean:
	//     {Boolean}
	//     value=EBoolean
	//;
	public BooleanElements getBooleanAccess() {
		return pBoolean;
	}
	
	public ParserRule getBooleanRule() {
		return getBooleanAccess().getRule();
	}
	
	//Double returns Double:
	//    {Double}
	//    value=EDouble
	//;
	public DoubleElements getDoubleAccess() {
		return pDouble;
	}
	
	public ParserRule getDoubleRule() {
		return getDoubleAccess().getRule();
	}
	
	//Statement returns Statement:
	//    Assignment | Conditional | Loop | Transput;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//Assignment returns Assignment:
	//    var=[Identifier|ID] '=' value=Expression ';';
	public AssignmentElements getAssignmentAccess() {
		return pAssignment;
	}
	
	public ParserRule getAssignmentRule() {
		return getAssignmentAccess().getRule();
	}
	
	//Conditional returns Conditional:
	//    {Conditional}
	//    'if' '(' expression=Expression ')' '{' ( if+=Statement )* '}'
	//    ('else' '{' ( else+=Statement )* '}')?;
	public ConditionalElements getConditionalAccess() {
		return pConditional;
	}
	
	public ParserRule getConditionalRule() {
		return getConditionalAccess().getRule();
	}
	
	//Loop returns Loop:
	//    {Loop}
	//    'while' '(' expression=Expression ')' '{' ( statements+=Statement )* '}' |
	//    'repeat' '{' ( statements+=Statement )* '}' 'until' '(' expression=Expression ')'
	//;
	public LoopElements getLoopAccess() {
		return pLoop;
	}
	
	public ParserRule getLoopRule() {
		return getLoopAccess().getRule();
	}
	
	//Transput returns Transput:
	//    {Transput}
	//    'input' var=[Identifier|ID]
	//    'output' expression=Expression
	//;
	public TransputElements getTransputAccess() {
		return pTransput;
	}
	
	public ParserRule getTransputRule() {
		return getTransputAccess().getRule();
	}
	
	//Expression returns Expression:
	//    Primary | BinaryOperator
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Primary returns Primary:
	//    Identifier|Literal
	//;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//BinaryOperator returns BinaryOperator:
	//    {BinaryOperator}
	//    left=Primary operator=('+' | '-' | '*' | '/' | '%' | '==' | '!=' | '>' | '<' ) right=Expression
	//;
	public BinaryOperatorElements getBinaryOperatorAccess() {
		return pBinaryOperator;
	}
	
	public ParserRule getBinaryOperatorRule() {
		return getBinaryOperatorAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
