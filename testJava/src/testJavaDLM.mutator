generate exhaustive mutants
in "data/out/"
from "data/model/"
metamodel "/testJava/data/model/java.ecore"
description "Different literals modification"

with blocks {
	bt "Changes the boolean value to true" {
		modify one BooleanLiteral where {value = false} with {value = true}
	}
	bf "Changes the boolean value to false" {
		modify one BooleanLiteral where {value = true} with {value = false}
	}
	rnl "Replaces a NumberLiteral by 1" {
		modify one NumberLiteral where {tokenValue <> '1'} with {tokenValue = '1'}
	}
	nrst "Null ReturnStatment" {
		rtstmt = select one ReturnStatement
		create NullLiteral in rtstmt->expression
	}
	rn0 "Replaces a NumberLiteral value with 0" {
		modify one NumberLiteral where {tokenValue <> '0'} with {tokenValue = '0'}
	}
	rnn0 "Replaces a NumberLiteral value with -1" {
		exp = select one InfixExpression where {leftOperand is typed NumberLiteral}
		modify exp with {leftOperand.tokenValue = '1'}
		p = create PrefixExpression with {operator = '-', operand = exp->leftOperand}
		modify exp with {leftOperand = p}
	}
	rnn1 "Replaces a NumberLiteral value with -1" {
		exp = select one InfixExpression where {rightOperand is typed NumberLiteral}
		modify exp with {rightOperand.tokenValue = '1'}
		p = create PrefixExpression with {operator = '-', operand = exp->rightOperand}
		modify exp with {rightOperand = p}
		
	}
	rnn2 "Replaces a NumberLiteral value with -1" {
		rt = select one ReturnStatement where {expression is typed NumberLiteral}
		modify rt with {expression.tokenValue = '1'}
		p = create PrefixExpression with {operator = '-', operand = rt->expression}
		modify rt with {expression = p}
		
	}
	rnn3 "Replaces a NumberLiteral value with -1" {
		a = select one Assignment where {rightHandSide is typed NumberLiteral}
		modify a with {rightHandSide.tokenValue = '1'}
		p = create PrefixExpression with {operator = '-', operand = a->rightHandSide}
		modify a with {rightHandSide = p}
	}
	rsl "Replaces a StringLiteral return value with ''" {
		modify one StringLiteral where {escapedValue <> ''} with {escapedValue = ''}
	}
}
