/**
 * generated by Xtext 2.30.0
 */
package wodeledu.dsls.formatting2;

import com.google.inject.Inject;
import java.util.Arrays;
import modeldraw.Content;
import modeldraw.MutatorDraw;
import modeldraw.MutatorInstance;
import modeldraw.Node;
import modeldraw.Relation;
import modeldraw.ValuedFeature;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.XbaseGenerated;
import wodeledu.dsls.services.ModelDrawGrammarAccess;

@SuppressWarnings("all")
public class ModelDrawFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private ModelDrawGrammarAccess _modelDrawGrammarAccess;

  protected void _format(final MutatorDraw mutatorDraw, @Extension final IFormattableDocument document) {
    EList<MutatorInstance> _instances = mutatorDraw.getInstances();
    for (final MutatorInstance instance : _instances) {
      EList<Node> _nodes = instance.getNodes();
      for (final Node node : _nodes) {
        document.<Node>format(node);
      }
    }
    EList<MutatorInstance> _instances_1 = mutatorDraw.getInstances();
    for (final MutatorInstance instance_1 : _instances_1) {
      EList<Relation> _relations = instance_1.getRelations();
      for (final Relation relation : _relations) {
        document.<Relation>format(relation);
      }
    }
    EList<MutatorInstance> _instances_2 = mutatorDraw.getInstances();
    for (final MutatorInstance instance_2 : _instances_2) {
      EList<Content> _contents = instance_2.getContents();
      for (final Content content : _contents) {
        document.<Content>format(content);
      }
    }
  }

  protected void _format(final Node node, @Extension final IFormattableDocument document) {
    EList<ValuedFeature> _feature = node.getFeature();
    for (final ValuedFeature valuedFeature : _feature) {
      document.<ValuedFeature>format(valuedFeature);
    }
    EList<ValuedFeature> _targetFeature = node.getTargetFeature();
    for (final ValuedFeature valuedFeature_1 : _targetFeature) {
      document.<ValuedFeature>format(valuedFeature_1);
    }
  }

  @XbaseGenerated
  public void format(final Object node, final IFormattableDocument document) {
    if (node instanceof Node) {
      _format((Node)node, document);
      return;
    } else if (node instanceof XtextResource) {
      _format((XtextResource)node, document);
      return;
    } else if (node instanceof MutatorDraw) {
      _format((MutatorDraw)node, document);
      return;
    } else if (node instanceof EObject) {
      _format((EObject)node, document);
      return;
    } else if (node == null) {
      _format((Void)null, document);
      return;
    } else if (node != null) {
      _format(node, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(node, document).toString());
    }
  }
}
