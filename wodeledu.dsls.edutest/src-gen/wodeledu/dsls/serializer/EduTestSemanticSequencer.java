/*
 * generated by Xtext 2.38.0
 */
package wodeledu.dsls.serializer;

import com.google.inject.Inject;
import edutest.AlternativeResponse;
import edutest.AlternativeText;
import edutest.DragAndDropText;
import edutest.EdutestPackage;
import edutest.MarkedBlock;
import edutest.MatchPairs;
import edutest.MissingWords;
import edutest.MultiChoiceDiagram;
import edutest.MultiChoiceEmConfig;
import edutest.MultiChoiceEmendation;
import edutest.MultiChoiceText;
import edutest.Program;
import edutest.ProgramConfiguration;
import edutest.Test;
import edutest.TestConfiguration;
import edutest.TextConfiguration;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import wodeledu.dsls.services.EduTestGrammarAccess;

@SuppressWarnings("all")
public class EduTestSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private EduTestGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == EdutestPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case EdutestPackage.ALTERNATIVE_RESPONSE:
				sequence_AlternativeResponse(context, (AlternativeResponse) semanticObject); 
				return; 
			case EdutestPackage.ALTERNATIVE_TEXT:
				sequence_AlternativeText(context, (AlternativeText) semanticObject); 
				return; 
			case EdutestPackage.DRAG_AND_DROP_TEXT:
				sequence_DragAndDropText(context, (DragAndDropText) semanticObject); 
				return; 
			case EdutestPackage.MARKED_BLOCK:
				sequence_MarkedBlock(context, (MarkedBlock) semanticObject); 
				return; 
			case EdutestPackage.MATCH_PAIRS:
				sequence_MatchPairs(context, (MatchPairs) semanticObject); 
				return; 
			case EdutestPackage.MISSING_WORDS:
				sequence_MissingWords(context, (MissingWords) semanticObject); 
				return; 
			case EdutestPackage.MULTI_CHOICE_DIAGRAM:
				sequence_MultiChoiceDiagram(context, (MultiChoiceDiagram) semanticObject); 
				return; 
			case EdutestPackage.MULTI_CHOICE_EM_CONFIG:
				sequence_MultiChoiceEmConfig(context, (MultiChoiceEmConfig) semanticObject); 
				return; 
			case EdutestPackage.MULTI_CHOICE_EMENDATION:
				sequence_MultiChoiceEmendation(context, (MultiChoiceEmendation) semanticObject); 
				return; 
			case EdutestPackage.MULTI_CHOICE_TEXT:
				sequence_MultiChoiceText(context, (MultiChoiceText) semanticObject); 
				return; 
			case EdutestPackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case EdutestPackage.PROGRAM_CONFIGURATION:
				sequence_ProgramConfiguration(context, (ProgramConfiguration) semanticObject); 
				return; 
			case EdutestPackage.TEST:
				sequence_Test(context, (Test) semanticObject); 
				return; 
			case EdutestPackage.TEST_CONFIGURATION:
				sequence_TestConfiguration(context, (TestConfiguration) semanticObject); 
				return; 
			case EdutestPackage.TEXT_CONFIGURATION:
				sequence_TextConfiguration(context, (TextConfiguration) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     MutatorTests returns AlternativeResponse
	 *     AlternativeResponse returns AlternativeResponse
	 *
	 * Constraint:
	 *     ((markedBlocks+=MarkedBlock markedBlocks+=MarkedBlock*)? config=TestConfiguration tests+=Test*)
	 * </pre>
	 */
	protected void sequence_AlternativeResponse(ISerializationContext context, AlternativeResponse semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MutatorTests returns AlternativeText
	 *     AlternativeText returns AlternativeText
	 *
	 * Constraint:
	 *     ((markedBlocks+=MarkedBlock markedBlocks+=MarkedBlock*)? config=TextConfiguration tests+=Test*)
	 * </pre>
	 */
	protected void sequence_AlternativeText(ISerializationContext context, AlternativeText semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MutatorTests returns DragAndDropText
	 *     DragAndDropText returns DragAndDropText
	 *
	 * Constraint:
	 *     ((markedBlocks+=MarkedBlock markedBlocks+=MarkedBlock*)? config=TestConfiguration tests+=Test*)
	 * </pre>
	 */
	protected void sequence_DragAndDropText(ISerializationContext context, DragAndDropText semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MarkedBlock returns MarkedBlock
	 *
	 * Constraint:
	 *     (block=[Block|ID] solution?='='?)
	 * </pre>
	 */
	protected void sequence_MarkedBlock(ISerializationContext context, MarkedBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MutatorTests returns MatchPairs
	 *     MatchPairs returns MatchPairs
	 *
	 * Constraint:
	 *     ((markedBlocks+=MarkedBlock markedBlocks+=MarkedBlock*)? config=TextConfiguration tests+=Test*)
	 * </pre>
	 */
	protected void sequence_MatchPairs(ISerializationContext context, MatchPairs semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MutatorTests returns MissingWords
	 *     MissingWords returns MissingWords
	 *
	 * Constraint:
	 *     ((markedBlocks+=MarkedBlock markedBlocks+=MarkedBlock*)? config=TestConfiguration tests+=Test*)
	 * </pre>
	 */
	protected void sequence_MissingWords(ISerializationContext context, MissingWords semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MutatorTests returns MultiChoiceDiagram
	 *     MultiChoiceDiagram returns MultiChoiceDiagram
	 *
	 * Constraint:
	 *     ((markedBlocks+=MarkedBlock markedBlocks+=MarkedBlock*)? config=TestConfiguration tests+=Test*)
	 * </pre>
	 */
	protected void sequence_MultiChoiceDiagram(ISerializationContext context, MultiChoiceDiagram semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MultiChoiceEmConfig returns MultiChoiceEmConfig
	 *
	 * Constraint:
	 *     (
	 *         (retry?='yes' | retry?='no') 
	 *         (weighted?='yes' | weighted?='no') 
	 *         penalty=EDouble 
	 *         order=Order 
	 *         mode=Mode 
	 *         (statement+=[EClass|ID] statement+=[EClass|ID]*)? 
	 *         (answers+=[EClass|ID] answers+=[EClass|ID]*)?
	 *     )
	 * </pre>
	 */
	protected void sequence_MultiChoiceEmConfig(ISerializationContext context, MultiChoiceEmConfig semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MutatorTests returns MultiChoiceEmendation
	 *     MultiChoiceEmendation returns MultiChoiceEmendation
	 *
	 * Constraint:
	 *     ((markedBlocks+=MarkedBlock markedBlocks+=MarkedBlock*)? config=MultiChoiceEmConfig tests+=Test*)
	 * </pre>
	 */
	protected void sequence_MultiChoiceEmendation(ISerializationContext context, MultiChoiceEmendation semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     MutatorTests returns MultiChoiceText
	 *     MultiChoiceText returns MultiChoiceText
	 *
	 * Constraint:
	 *     ((markedBlocks+=MarkedBlock markedBlocks+=MarkedBlock*)? config=TextConfiguration tests+=Test*)
	 * </pre>
	 */
	protected void sequence_MultiChoiceText(ISerializationContext context, MultiChoiceText semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     ProgramConfiguration returns ProgramConfiguration
	 *
	 * Constraint:
	 *     navigation=Navigation
	 * </pre>
	 */
	protected void sequence_ProgramConfiguration(ISerializationContext context, ProgramConfiguration semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, EdutestPackage.Literals.PROGRAM_CONFIGURATION__NAVIGATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, EdutestPackage.Literals.PROGRAM_CONFIGURATION__NAVIGATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProgramConfigurationAccess().getNavigationNavigationEnumRuleCall_2_0(), semanticObject.getNavigation());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     (metamodel=EString config=ProgramConfiguration? exercises+=MutatorTests+)
	 * </pre>
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TestConfiguration returns TestConfiguration
	 *
	 * Constraint:
	 *     ((retry?='yes' | retry?='no') mode=Mode? (statement+=[EClass|ID] statement+=[EClass|ID]*)? (answers+=[EClass|ID] answers+=[EClass|ID]*)?)
	 * </pre>
	 */
	protected void sequence_TestConfiguration(ISerializationContext context, TestConfiguration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Test returns Test
	 *
	 * Constraint:
	 *     (source=EString question=EString (expression?='%text' identifier=EString?)?)
	 * </pre>
	 */
	protected void sequence_Test(ISerializationContext context, Test semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     TextConfiguration returns TextConfiguration
	 *
	 * Constraint:
	 *     ((retry?='yes' | retry?='no') mode=Mode? identifier=EString?)
	 * </pre>
	 */
	protected void sequence_TextConfiguration(ISerializationContext context, TextConfiguration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
