package wodeledu.dsls.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import modeldraw.MutatorDraw;
import modeldraw.MutatorInstance;
import modeldraw.Node;
import modeldraw.NodeStyle;
import modeldraw.ValuedFeature;
import org.eclipse.core.resources.IProject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import wodel.utils.manager.JavaUtils;
import wodel.utils.manager.ModelManager;
import wodel.utils.manager.ProjectUtils;

/**
 * @author Pablo Gomez-Abajo - modelDraw dot code generator.
 * 
 * Generates the Java code for the graphical
 * representation of the models. PlantUML mode.
 */
@SuppressWarnings("all")
public class ModelDrawPlantUMLGenerator extends AbstractGenerator {
  protected IProject project = null;

  private String fileName;

  private String className;

  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    ProjectUtils.resetProject();
    this.project = ProjectUtils.getProject();
    int i = 0;
    this.fileName = resource.getURI().lastSegment();
    String _replaceAll = this.fileName.replaceAll(".draw", "").replaceAll("[.]", "_");
    String _plus = (_replaceAll + ".draw");
    this.fileName = _plus;
    Iterable<MutatorDraw> _filter = Iterables.<MutatorDraw>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), MutatorDraw.class);
    for (final MutatorDraw e : _filter) {
      {
        if ((i == 0)) {
          String _replace = this.fileName.replace(".draw", "");
          String _plus_1 = (_replace + "Draw.java");
          this.fileName = _plus_1;
        } else {
          String _replace_1 = this.fileName.replace(".draw", "");
          String _plus_2 = (_replace_1 + Integer.valueOf(i));
          String _plus_3 = (_plus_2 + "Draw.java");
          this.fileName = _plus_3;
        }
        this.className = this.fileName.replaceAll("Draw.java", "");
        fsa.generateFile(((("mutator/" + this.className) + "/") + this.fileName), JavaUtils.format(this.compile(e), false));
        i++;
      }
    }
  }

  public CharSequence generate(final MutatorDraw draw, final String folder, final int index) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("List<String> umlcode = new ArrayList<String>();");
    _builder.newLine();
    {
      EList<Node> _nodes = draw.getInstances().get(index).getNodes();
      boolean _tripleNotEquals = (_nodes != null);
      if (_tripleNotEquals) {
        {
          int _size = draw.getInstances().get(index).getNodes().size();
          boolean _greaterThan = (_size > 0);
          if (_greaterThan) {
            _builder.append("generateUMLNodes(packages, model, umlnodes, umlrels);");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("umlcode.add(\"@startuml\");");
    _builder.newLine();
    _builder.append("for (EObject umlnode : umlnodes.get(");
    _builder.append(index);
    _builder.append(").keySet()) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("if (umlnodes.get(");
    _builder.append(index, "\t");
    _builder.append(").get(umlnode) != null) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("umlcode.add((umlnodes.get(");
    _builder.append(index, "\t\t");
    _builder.append(").get(umlnode).label.replaceAll(\"\'\", \"\") + \" \" + umlnodes.get(");
    _builder.append(index, "\t\t");
    _builder.append(").get(umlnode).name.replaceAll(\"\'\", \"\")).trim());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("if (umlrels.get(");
    _builder.append(index, "\t\t");
    _builder.append(").get(umlnode) != null) {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("for (String rel : umlrels.get(");
    _builder.append(index, "\t\t\t");
    _builder.append(").get(umlnode)) { ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t");
    _builder.append("umlcode.add((rel.replaceAll(\"\'\", \"\") + \" <|-- \" + umlnodes.get(");
    _builder.append(index, "\t\t\t\t");
    _builder.append(").get(umlnode).name.replaceAll(\"\'\", \"\")).trim());");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.append("umlcode.add(\"@enduml\");");
    _builder.newLine();
    return _builder;
  }

  public CharSequence compile(final MutatorDraw draw) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package mutator.");
    _builder.append(this.className);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import java.io.File;");
    _builder.newLine();
    _builder.append("import java.io.FileNotFoundException;");
    _builder.newLine();
    _builder.append("import java.io.FileOutputStream;");
    _builder.newLine();
    _builder.append("import java.io.IOException;");
    _builder.newLine();
    _builder.append("import java.io.OutputStream;");
    _builder.newLine();
    _builder.append("import java.io.PrintWriter;");
    _builder.newLine();
    _builder.append("import java.io.UnsupportedEncodingException;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.append("import java.util.Arrays;\t");
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import java.util.LinkedHashMap;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EObject;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.EPackage;");
    _builder.newLine();
    _builder.append("import org.eclipse.emf.ecore.resource.Resource;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import net.sourceforge.plantuml.SourceStringReader;");
    _builder.newLine();
    _builder.append("import wodel.utils.exceptions.MetaModelNotFoundException;");
    _builder.newLine();
    _builder.append("import wodel.utils.exceptions.ModelNotFoundException;");
    _builder.newLine();
    _builder.append("import wodel.utils.exceptions.ReferenceNonExistingException;");
    _builder.newLine();
    _builder.append("import wodel.utils.manager.ModelManager;");
    _builder.newLine();
    _builder.append("import wodel.utils.manager.DrawUtils.LabelStyle;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import net.sourceforge.plantuml.GeneratedImage;");
    _builder.newLine();
    _builder.append("import net.sourceforge.plantuml.SourceFileReader;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(this.className);
    _builder.append("Draw implements wodel.utils.manager.IMutatorDraw {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static String getOrdinalFor(int value) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int hundredRemainder = value % 100;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int tenRemainder = value % 10;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (hundredRemainder - tenRemainder == 10) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return value + \"th\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("switch (tenRemainder) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case 1:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return value + \"st\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case 2:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return value + \"nd\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("case 3:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return value + \"rd\";");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("default:");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return value + \"th\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   \t\t");
    String _workspaceAbsolutePath = ModelManager.getWorkspaceAbsolutePath();
    String _plus = (_workspaceAbsolutePath + "/");
    String _name = this.project.getName();
    String folder = (_plus + _name);
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private static void generateUMLNodes(List<EPackage> packages, Resource model, Map<Integer, Map<EObject, LabelStyle>> umlnodes, Map<Integer, Map<EObject, List<String>>> umlrels) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// COUNTER: ");
    int counter = 0;
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("Map<EObject, LabelStyle> localnodes = null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Map<EObject, List<String>> localrels = null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("int i = 0;");
    _builder.newLine();
    {
      EList<MutatorInstance> _instances = draw.getInstances();
      for(final MutatorInstance instance : _instances) {
        _builder.append("\t");
        _builder.append("localnodes = new LinkedHashMap<EObject, LabelStyle>();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("umlnodes.put(");
        _builder.append(counter, "\t");
        _builder.append(", localnodes);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("localrels = new LinkedHashMap<EObject, List<String>>();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("umlrels.put(");
        _builder.append(counter, "\t");
        _builder.append(", localrels);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("try {");
        _builder.newLine();
        {
          EList<Node> _nodes = draw.getInstances().get(counter).getNodes();
          boolean _tripleNotEquals = (_nodes != null);
          if (_tripleNotEquals) {
            {
              int _size = draw.getInstances().get(counter).getNodes().size();
              boolean _greaterThan = (_size > 0);
              if (_greaterThan) {
                _builder.append("\t");
                _builder.append("// COUNTER: ");
                int counter2 = 0;
                _builder.newLineIfNotEmpty();
                {
                  EList<Node> _nodes_1 = draw.getInstances().get(counter).getNodes();
                  for(final Node node : _nodes_1) {
                    _builder.append("\t");
                    _builder.append("List<EObject> lnode_");
                    _builder.append(counter, "\t");
                    _builder.append("_");
                    _builder.append(counter2, "\t");
                    _builder.append(" = ModelManager.getObjectsOfType(\"");
                    String _name_1 = node.getName().getName();
                    _builder.append(_name_1, "\t");
                    _builder.append("\", model);");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("i = 0;");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("for (EObject node : lnode_");
                    _builder.append(counter, "\t");
                    _builder.append("_");
                    _builder.append(counter2, "\t");
                    _builder.append(") {");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("String name = ModelManager.getStringAttribute(\"name\", node);");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("String typeName = node.eClass().getName();");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("LabelStyle label = new LabelStyle();");
                    _builder.newLine();
                    {
                      boolean _equals = node.getName().getName().equals("Class");
                      if (_equals) {
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("label.label = \"");
                        String _lowerCase = node.getName().getName().toLowerCase();
                        _builder.append(_lowerCase, "\t\t");
                        _builder.append("\";");
                        _builder.newLineIfNotEmpty();
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("label.name = name;");
                        _builder.newLine();
                      } else {
                        boolean _equals_1 = node.getName().getName().equals("Object");
                        if (_equals_1) {
                          _builder.append("\t");
                          _builder.append("\t");
                          _builder.append("Object o = ModelManager.getReferences(\"class\", node);");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("\t");
                          _builder.append("EObject cl = null;");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("\t");
                          _builder.append("if (o instanceof List<?>) {");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("\t");
                          _builder.append("\t");
                          _builder.append("cl = ((List<EObject>) o).get(0);");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("\t");
                          _builder.append("}");
                          _builder.newLine();
                          _builder.append("\t");
                          _builder.append("\t");
                          _builder.append("label.label = \"");
                          String _lowerCase_1 = node.getName().getName().toLowerCase();
                          _builder.append(_lowerCase_1, "\t\t");
                          _builder.append("\";");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t");
                          _builder.append("\t");
                          _builder.append("label.name = \"\\\"\" + name + \" :<u>\" + ModelManager.getStringAttribute(\"name\", cl) + \"</u>\\\" as \" + getOrdinalFor(i);");
                          _builder.newLine();
                        }
                      }
                    }
                    {
                      EList<ValuedFeature> _feature = node.getFeature();
                      boolean _tripleNotEquals_1 = (_feature != null);
                      if (_tripleNotEquals_1) {
                        _builder.append("\t");
                        _builder.append("\t");
                        _builder.append("boolean value = false;");
                        _builder.newLine();
                        {
                          EList<ValuedFeature> _feature_1 = node.getFeature();
                          for(final ValuedFeature feature : _feature_1) {
                            {
                              boolean _equals_2 = feature.getFeat().getEType().getName().equals("EBoolean");
                              if (_equals_2) {
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("value = ModelManager.getBooleanAttribute(\"");
                                String _name_2 = feature.getFeat().getName();
                                _builder.append(_name_2, "\t\t");
                                _builder.append("\", node);");
                                _builder.newLineIfNotEmpty();
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("if (value == true) {");
                                _builder.newLine();
                                {
                                  NodeStyle _style = node.getStyle();
                                  boolean _equals_3 = Objects.equal(_style, NodeStyle.ITALIC);
                                  if (_equals_3) {
                                    _builder.append("\t");
                                    _builder.append("\t");
                                    _builder.append("\t");
                                    _builder.append("label.label = \"");
                                    String _name_3 = feature.getFeat().getName();
                                    _builder.append(_name_3, "\t\t\t");
                                    _builder.append("\";");
                                    _builder.newLineIfNotEmpty();
                                  }
                                }
                                _builder.append("\t");
                                _builder.append("\t");
                                _builder.append("}");
                                _builder.newLine();
                              }
                            }
                          }
                        }
                      }
                    }
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("localnodes.put(node, label);");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("Object noderels = ModelManager.getReferences(\"superclass\", node);");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("if (noderels instanceof List<?>) {");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("List<String> rels = new ArrayList<String>();");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("for (EObject nnode : (List<EObject>) noderels) {");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t\t\t");
                    _builder.append("String rel = ModelManager.getStringAttribute(\"name\", nnode);");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t\t\t");
                    _builder.append("rels.add(rel);");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t\t");
                    _builder.append("localrels.put(node, rels);");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("\t");
                    _builder.append("i++;");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                    _builder.append("\t");
                    _builder.append("// INC COUNTER: ");
                    int _plusPlus = counter2++;
                    _builder.append(_plusPlus, "\t");
                    _builder.newLineIfNotEmpty();
                  }
                }
                _builder.append("\t");
                _builder.append("} catch (ReferenceNonExistingException e) {");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("// TODO Auto-generated catch block");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("\t");
                _builder.append("e.printStackTrace();");
                _builder.newLine();
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
              }
            }
          }
        }
        _builder.append("// INC COUNTER: ");
        int _plusPlus_1 = counter++;
        _builder.append(_plusPlus_1);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void generateUMLGraphs(File file, String folder, List<EPackage> packages, File exercise) throws ModelNotFoundException, FileNotFoundException, UnsupportedEncodingException {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("//");
    _builder.append(counter = 0, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("Map<Integer, Map<EObject, LabelStyle>> umlnodes = new LinkedHashMap<Integer, Map<EObject, LabelStyle>>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("Map<Integer, Map<EObject, List<String>>> umlrels = new LinkedHashMap<Integer, Map<EObject, List<String>>>();");
    _builder.newLine();
    {
      EList<MutatorInstance> _instances_1 = draw.getInstances();
      for(final MutatorInstance instance_1 : _instances_1) {
        _builder.append("\t");
        _builder.append("if (file.isFile()) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("String pathfile = file.getPath();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("if (pathfile.endsWith(\".model\") == true) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("Resource model = ModelManager.loadModel(packages, pathfile);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("String path = exercise.getName() + \"/\" + folder;");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("String umlfile = \"");
        _builder.append(folder, "\t\t\t");
        _builder.append("/src-gen/html/diagrams/\" + ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t\t\t");
        _builder.append("path + \"/\" + file.getName().replace(\".model\", \"_");
        _builder.append(counter, "\t\t\t\t");
        _builder.append(".txt\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t\t");
        CharSequence _generate = this.generate(draw, folder, counter);
        _builder.append(_generate, "\t\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("File diagramsfolder = new File(\"");
        _builder.append(folder, "\t\t\t");
        _builder.append("/src-gen/html/diagrams/\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("if (diagramsfolder.exists() != true) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t\t");
        _builder.append("diagramsfolder.mkdirs();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("File exercisefolder = new File(\"");
        _builder.append(folder, "\t\t\t");
        _builder.append("/src-gen/html/diagrams/\" + path + \"/\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("if (exercisefolder.exists() != true) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t\t");
        _builder.append("exercisefolder.mkdirs();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("PrintWriter umlwriter = new PrintWriter(umlfile, \"UTF-8\");");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("for (String umlline : umlcode) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t\t");
        _builder.append("umlwriter.println(umlline);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("umlwriter.close();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("try {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t\t");
        _builder.append("SourceFileReader reader = new SourceFileReader(new File(umlfile));");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t\t");
        _builder.append("List<GeneratedImage> list = reader.getGeneratedImages();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t\t");
        _builder.append("File umlpng = list.get(0).getPngFile();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t\t");
        _builder.append("umlpng.createNewFile();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("} catch (IOException e) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t\t");
        _builder.append("// TODO Auto-generated catch block");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t\t");
        _builder.append("e.printStackTrace();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("//Reload input");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("try {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t\t");
        _builder.append("model.unload();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t\t");
        _builder.append("model.load(null);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("} catch (Exception e) {}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("else {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("if (file.getName().equals(\"registry\") != true && !file.getName().endsWith(\"vs\")) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("File[] filesBlock = file.listFiles();");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("for (File fileBlock : filesBlock) {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t\t");
        _builder.append("generateUMLGraphs(fileBlock, folder + \"/\" + file.getName(), packages, exercise);");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("//");
        int _plusPlus_2 = counter++;
        _builder.append(_plusPlus_2, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void generate() throws MetaModelNotFoundException, ModelNotFoundException, FileNotFoundException {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Map<Integer, Map<EObject, LabelStyle>> umlnodes = new LinkedHashMap<Integer, Map<EObject, LabelStyle>>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Map<Integer, Map<EObject, List<String>>> umlrels = new LinkedHashMap<Integer, Map<EObject, List<String>>>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String metamodel = \"");
    String _replace = ModelManager.getMetaModel().replace("\\", "/");
    _builder.append(_replace, "\t\t");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("List<EPackage> packages = ModelManager.loadMetaModel(metamodel);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// GENERATES PNG FILES FROM SOURCE MODELS");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("File folder = new File(\"");
    _builder.append(folder, "\t\t");
    _builder.append("/data/model\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("for (File file : folder.listFiles()) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("//");
    _builder.append(counter = 0, "\t\t");
    _builder.newLineIfNotEmpty();
    {
      EList<MutatorInstance> _instances_2 = draw.getInstances();
      for(final MutatorInstance instance_2 : _instances_2) {
        _builder.append("\t\t");
        _builder.append("if (file.isFile()) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("String pathfile = file.getPath();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("if (pathfile.endsWith(\".model\") == true) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("Resource model = ModelManager.loadModel(packages, pathfile);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("String umlfile = \"");
        _builder.append(folder, "\t\t\t\t");
        _builder.append("/src-gen/html/diagrams/\" + ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t\t\t");
        _builder.append("file.getName().replace(\".model\", \"\") + \"/\" +");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t\t");
        _builder.append("file.getName().replace(\".model\", \"_");
        _builder.append(counter, "\t\t\t\t\t");
        _builder.append(".txt\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t\t");
        CharSequence _generate_1 = this.generate(draw, folder, counter);
        _builder.append(_generate_1, "\t\t\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("File diagramsfolder = new File(\"");
        _builder.append(folder, "\t\t\t\t");
        _builder.append("/src-gen/html/diagrams/\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("if (diagramsfolder.exists() != true) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t\t");
        _builder.append("diagramsfolder.mkdirs();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("File umlfolder = new File(\"");
        _builder.append(folder, "\t\t\t\t");
        _builder.append("/src-gen/html/diagrams/\" + ");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("\t\t\t");
        _builder.append("file.getName().replace(\".model\", \"\") + \"/\");");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("if (umlfolder.exists() != true) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t\t");
        _builder.append("umlfolder.mkdirs();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("try {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t\t");
        _builder.append("PrintWriter umlwriter = new PrintWriter(umlfile, \"UTF-8\");");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t\t");
        _builder.append("for (String umlline : umlcode) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t\t\t");
        _builder.append("umlwriter.println(umlline);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t\t");
        _builder.append("umlwriter.close();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("} catch (UnsupportedEncodingException e) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t\t");
        _builder.append("//Reload input");
        _builder.newLine();
        _builder.append("\t\t    \t\t\t\t");
        _builder.append("try {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t\t\t");
        _builder.append("model.unload();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t\t\t");
        _builder.append("model.load(null);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t\t");
        _builder.append("} catch (Exception ex) {}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t\t");
        _builder.append("continue;");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("try {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t\t");
        _builder.append("SourceFileReader reader = new SourceFileReader(new File(umlfile));");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t\t");
        _builder.append("List<GeneratedImage> list = reader.getGeneratedImages();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t\t");
        _builder.append("File umlpng = list.get(0).getPngFile();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t\t");
        _builder.append("umlpng.createNewFile();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("} catch (IOException e) {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t\t");
        _builder.append("// TODO Auto-generated catch block");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t\t");
        _builder.append("e.printStackTrace();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("//Reload input");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("try {");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t\t");
        _builder.append("model.unload();");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t\t");
        _builder.append("model.load(null);");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t\t");
        _builder.append("} catch (Exception e) {}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t");
        _builder.append("//");
        int _plusPlus_3 = counter++;
        _builder.append(_plusPlus_3, "\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// GENERATES PNG FILES FROM MUTANTS");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("folder = new File(\"");
    _builder.append(folder, "\t\t");
    _builder.append("/data/out\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("for (File exercise : folder.listFiles()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (exercise.isDirectory()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("for (File file : exercise.listFiles()) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("//");
    _builder.append(counter = 0, "\t\t\t\t");
    _builder.newLineIfNotEmpty();
    {
      EList<MutatorInstance> _instances_3 = draw.getInstances();
      for(final MutatorInstance instance_3 : _instances_3) {
        _builder.append("\t\t\t\t");
        _builder.append("if (file.isFile()) {");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t");
        _builder.append("String pathfile = file.getPath();");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t");
        _builder.append("if (pathfile.endsWith(\".model\") == true) {");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("Resource model = ModelManager.loadModel(packages, pathfile);");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("String umlfile = \"");
        _builder.append(folder, "\t\t\t\t\t\t");
        _builder.append("/src-gen/html/diagrams/\" + exercise.getName() + \"/\" +");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("file.getName().replace(\".model\", \"_");
        _builder.append(counter, "\t\t\t\t\t\t\t");
        _builder.append(".txt\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        CharSequence _generate_2 = this.generate(draw, folder, counter);
        _builder.append(_generate_2, "\t\t\t\t\t\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("File diagramsfolder = new File(\"");
        _builder.append(folder, "\t\t\t\t\t\t");
        _builder.append("/src-gen/html/diagrams/\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("if (diagramsfolder.exists() != true) {");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("diagramsfolder.mkdirs();");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("File umlfolder = new File(\"");
        _builder.append(folder, "\t\t\t\t\t\t");
        _builder.append("/src-gen/html/diagrams/\" + exercise.getName() + \"/\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("if (umlfolder.exists() != true) {");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("umlfolder.mkdirs();");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("try {");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("PrintWriter umlwriter = new PrintWriter(umlfile, \"UTF-8\");");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("for (String umlline : umlcode) {");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t\t");
        _builder.append("umlwriter.println(umlline);");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("umlwriter.close();");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("} catch (UnsupportedEncodingException e) {");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("//Reload input");
        _builder.newLine();
        _builder.append("\t\t    \t\t\t\t\t\t");
        _builder.append("try {");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t\t");
        _builder.append("model.unload();");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t\t");
        _builder.append("model.load(null);");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("} catch (Exception ex) {}");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("continue;");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("try {");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("SourceFileReader reader = new SourceFileReader(new File(umlfile));");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("List<GeneratedImage> list = reader.getGeneratedImages();");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("File umlpng = list.get(0).getPngFile();");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("umlpng.createNewFile();");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("} catch (IOException e) {");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("// TODO Auto-generated catch block");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("e.printStackTrace();");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("//Reload input");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("try {");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("model.unload();");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("model.load(null);");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("} catch (Exception e) {}");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("else {");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t");
        _builder.append("if (file.getName().equals(\"registry\") != true && !file.getName().endsWith(\"vs\")) {");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("File[] filesBlock = file.listFiles();");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("for (File fileBlock : filesBlock) {");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("try {");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t\t");
        _builder.append("generateUMLGraphs(fileBlock, file.getName(), packages, exercise);");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("} catch (UnsupportedEncodingException e) {");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t\t");
        _builder.append("continue;");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t");
        _builder.append("}");
        _builder.newLine();
        _builder.append("\t\t\t\t\t");
        _builder.append("//");
        int _plusPlus_4 = counter++;
        _builder.append(_plusPlus_4, "\t\t\t\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
}
