/**
 * generated by Xtext 2.13.0
 */
package wodeledu.dsls.generator;

import com.google.common.collect.Iterables;
import edutest.AlternativeResponse;
import edutest.AlternativeText;
import edutest.DragAndDropText;
import edutest.MatchPairs;
import edutest.MissingWords;
import edutest.Mode;
import edutest.MultiChoiceDiagram;
import edutest.MultiChoiceEmendation;
import edutest.MultiChoiceText;
import edutest.MutatorTests;
import edutest.Program;
import edutest.Test;
import java.io.File;
import java.net.URL;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.UUID;
import mutatorenvironment.MutatorEnvironment;
import org.eclipse.core.runtime.FileLocator;
import org.eclipse.core.runtime.Platform;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.osgi.framework.Bundle;
import wodel.utils.exceptions.ModelNotFoundException;
import wodel.utils.manager.ModelManager;

/**
 * @author Pablo Gomez-Abajo - eduTest code generator.
 * 
 * Generates the javascript and html code for the
 * test exercises application
 */
@SuppressWarnings("all")
public class EduTestQuestionWriterGenerator extends EduTestSuperGenerator {
  private String fileName;

  private String pageName;

  private List<EObject> blocks;

  private List<EObject> mutators;

  private List<EPackage> metamodel;

  private List<EClass> roots;

  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    try {
      try {
        int i = 0;
        String _replaceAll = resource.getURI().lastSegment().replaceAll(".test", ".model");
        String xmiFileName = ((((this.projectPath + "/") + this.outputFolder) + "/") + _replaceAll);
        final Bundle bundle = Platform.getBundle("wodel.models");
        final URL fileURL = bundle.getEntry("/model/MutatorEnvironment.ecore");
        final String mutatorecore = FileLocator.resolve(fileURL).getFile();
        final List<EPackage> mutatorpackages = ModelManager.loadMetaModel(mutatorecore);
        final Resource mutatormodel = ModelManager.loadModel(mutatorpackages, xmiFileName);
        this.blocks = ModelManager.getObjectsOfType("Block", mutatormodel);
        this.mutators = ModelManager.getObjectsOfType("Mutator", mutatormodel);
        Iterable<Program> _filter = Iterables.<Program>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), Program.class);
        for (final Program p : _filter) {
          {
            if ((i == 0)) {
              String _replaceAll_1 = resource.getURI().lastSegment().replaceAll(".test", "");
              String _plus = ("xml/" + _replaceAll_1);
              String _plus_1 = (_plus + ".xml");
              this.fileName = _plus_1;
              String _replaceAll_2 = resource.getURI().lastSegment().replaceAll(".test", "");
              String _plus_2 = (_replaceAll_2 + ".xml");
              this.pageName = _plus_2;
            } else {
              String _replaceAll_3 = resource.getURI().lastSegment().replaceAll(".test", "");
              String _plus_3 = ("xml/" + _replaceAll_3);
              String _plus_4 = (_plus_3 + Integer.valueOf(i));
              String _plus_5 = (_plus_4 + ".xml");
              this.fileName = _plus_5;
              String _replaceAll_4 = resource.getURI().lastSegment().replaceAll(".test", "");
              String _plus_6 = (_replaceAll_4 + Integer.valueOf(i));
              String _plus_7 = (_plus_6 + ".xml");
              this.pageName = _plus_7;
            }
            ArrayList<EPackage> _arrayList = new ArrayList<EPackage>();
            this.metamodel = _arrayList;
            this.metamodel.addAll(ModelManager.loadMetaModel(p.getMetamodel()));
            ArrayList<EClass> _arrayList_1 = new ArrayList<EClass>();
            this.roots = _arrayList_1;
            this.roots.addAll(ModelManager.getRootEClasses(this.metamodel));
            fsa.generateFile(this.fileName, this.compile(p, resource));
            i++;
          }
        }
      } catch (final Throwable _t) {
        if (_t instanceof ModelNotFoundException) {
        } else {
          throw Exceptions.sneakyThrow(_t);
        }
      }
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }

  public CharSequence compile(final Program program, final Resource resource) {
    try {
      StringConcatenation _builder = new StringConcatenation();
      String _xblockexpression = null;
      {
        this.buildOptions(program, resource, this.blocks, this.roots, program.getClass());
        _xblockexpression = "";
      }
      _builder.append(_xblockexpression);
      _builder.newLineIfNotEmpty();
      _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
      _builder.newLine();
      _builder.append("<!--");
      EObject main = null;
      _builder.append("-->");
      _builder.newLineIfNotEmpty();
      {
        int _size = this.blocks.size();
        boolean _greaterThan = (_size > 0);
        if (_greaterThan) {
          String _xblockexpression_1 = null;
          {
            main = this.blocks.get(0);
            _xblockexpression_1 = "";
          }
          _builder.append(_xblockexpression_1);
          _builder.newLineIfNotEmpty();
        } else {
          {
            int _size_1 = this.mutators.size();
            boolean _greaterThan_1 = (_size_1 > 0);
            if (_greaterThan_1) {
              String _xblockexpression_2 = null;
              {
                main = this.mutators.get(0);
                _xblockexpression_2 = "";
              }
              _builder.append(_xblockexpression_2);
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
      _builder.append("<!--");
      EObject _eContainer = main.eContainer();
      List<EPackage> packages = ModelManager.loadMetaModel(((MutatorEnvironment) _eContainer).getDefinition().getMetamodel());
      _builder.append("-->");
      _builder.newLineIfNotEmpty();
      _builder.append("<!--");
      String domain = packages.get(0).getNsURI().replace("http://", "");
      _builder.append("-->");
      _builder.newLineIfNotEmpty();
      _builder.append("<!--");
      _builder.append(domain = domain.substring(0, domain.lastIndexOf("/")).replace("/", ""));
      _builder.append("-->");
      _builder.newLineIfNotEmpty();
      _builder.newLine();
      _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>");
      _builder.newLine();
      _builder.append("<Root softver=\"5.0.8237.18157\">");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("<Structure>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<Node id=\"1669984843\" Name=\"Style\" Type=\"ExternalReference\">");
      _builder.newLine();
      _builder.append("      ");
      _builder.append("<Nodes>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<Node id=\"1669984843-1\" Type=\"AssessmentNode\" NID=\"1\">");
      _builder.newLine();
      _builder.append("          ");
      _builder.append("<Nodes>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Node id=\"1669984843-2\" NID=\"45\" Type=\"QEMultipleChoiceQuestion\">");
      _builder.newLine();
      _builder.append("              ");
      _builder.append("<Nodes>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<Node id=\"1669984843-7\" NID=\"11\" Type=\"OptionNode\">");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("<Nodes>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Node id=\"1669984843-11\" NID=\"14\" Type=\"ImageNode\">");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("<Nodes />");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("<Properties>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<Property Name=\"ImageAlignment\" value=\"Left\" />");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<Property Name=\"ImageFileName\" value=\"exercise_1f08fe77-91ed-4ca6-878d-be461b847edd.png\" />");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<Property Name=\"Size\" value=\"True;True;1,102;162;147;162;147\" />");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("</Properties>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("</Node>");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("</Nodes>");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("<Properties>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Property Name=\"QEPropsPointsOption\" value=\"0\" />");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Property Name=\"QEQPropsOptionCorrect\" value=\"false\" />");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("</Properties>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</Node>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<Node id=\"1669984843-8\" NID=\"11\" Type=\"OptionNode\">");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("<Nodes>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Node id=\"1669984843-12\" NID=\"14\" Type=\"ImageNode\">");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("<Nodes />");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("<Properties>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<Property Name=\"ImageAlignment\" value=\"Left\" />");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<Property Name=\"ImageFileName\" value=\"exercise_370fe4c6-f82b-41b3-9aa2-be58c0c679e4.png\" />");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<Property Name=\"Size\" value=\"True;True;1,034;152;147;152;147\" />");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("</Properties>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("</Node>");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("</Nodes>");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("<Properties>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Property Name=\"QEPropsPointsOption\" value=\"10\" />");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Property Name=\"QEQPropsOptionCorrect\" value=\"True\" />");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("</Properties>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</Node>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<Node id=\"1669984843-9\" NID=\"11\" Type=\"OptionNode\">");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("<Nodes>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Node id=\"1669984843-13\" NID=\"14\" Type=\"ImageNode\">");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("<Nodes />");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("<Properties>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<Property Name=\"ImageAlignment\" value=\"Left\" />");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<Property Name=\"ImageFileName\" value=\"exercise_6aa17f7a-e02e-412d-a7e9-4f7a4e9eb14a.png\" />");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<Property Name=\"Size\" value=\"True;True;1,102;162;147;162;147\" />");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("</Properties>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("</Node>");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("</Nodes>");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("<Properties>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Property Name=\"QEPropsPointsOption\" value=\"0\" />");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Property Name=\"QEQPropsOptionCorrect\" value=\"false\" />");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("</Properties>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</Node>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<Node id=\"1669984843-10\" NID=\"11\" Type=\"OptionNode\">");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("<Nodes>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Node id=\"1669984843-14\" NID=\"14\" Type=\"ImageNode\">");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("<Nodes />");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("<Properties>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<Property Name=\"ImageAlignment\" value=\"Left\" />");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<Property Name=\"ImageFileName\" value=\"exercise_d57cede2-ed29-46a1-89ee-1c314da39ebc.png\" />");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<Property Name=\"Size\" value=\"True;True;1,1769;173;147;173;147\" />");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("</Properties>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("</Node>");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("</Nodes>");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("<Properties>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Property Name=\"QEPropsPointsOption\" value=\"0\" />");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Property Name=\"QEQPropsOptionCorrect\" value=\"false\" />");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("</Properties>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</Node>");
      _builder.newLine();
      _builder.append("              ");
      _builder.append("</Nodes>");
      _builder.newLine();
      _builder.append("              ");
      _builder.append("<Properties>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<Property Name=\"QEPropsPoints\" value=\"3\" />");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<Property Name=\"QEPropsFeedback\" value=\"true;Correcto;Incorrecto \" />");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<Property Name=\"QEPropsQuestion\" value=\"Select+which+of+the+following+object+diagrams+is+a+valid+instance+of+the+class+diagram+shown+below\" />");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<Property Name=\"QEPropsImageControl\" value=\"exercise_1b845f62-af7e-4987-a76a-a21ff151c76b.png\" />");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<Property Name=\"QEPropsMultipleChoice\" value=\"False\" />");
      _builder.newLine();
      _builder.append("              ");
      _builder.append("</Properties>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("</Node>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Node id=\"1669984843-25\" NID=\"46\" Type=\"QEMultipleResponseQuestion\">");
      _builder.newLine();
      _builder.append("              ");
      _builder.append("<Nodes>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<Node id=\"1669984843-26\" NID=\"11\" Type=\"OptionNode\">");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("<Nodes>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Node id=\"1669984843-20\" NID=\"14\" Type=\"ImageNode\">");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("<Nodes />");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("<Properties>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<Property Name=\"ImageAlignment\" value=\"Left\" />");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<Property Name=\"ImageFileName\" value=\"exercise_c009a06c-4832-4f93-82bf-3832b766e9e1.png\" />");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<Property Name=\"Size\" value=\"True;True;0,6871;101;147;101;147\" />");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("</Properties>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("</Node>");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("</Nodes>");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("<Properties>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Property Name=\"QEPropsPointsOption\" value=\"0\" />");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Property Name=\"QEQPropsOptionCorrect\" value=\"false\" />");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("</Properties>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</Node>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<Node id=\"1669984843-27\" NID=\"11\" Type=\"OptionNode\">");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("<Nodes>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Node id=\"1669984843-21\" NID=\"14\" Type=\"ImageNode\">");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("<Nodes />");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("<Properties>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<Property Name=\"ImageAlignment\" value=\"Left\" />");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<Property Name=\"ImageFileName\" value=\"exercise_890f39b7-44cc-48c8-9142-8985a11ef28c.png\" />");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<Property Name=\"Size\" value=\"True;True;3,7755;185;49;185;49\" />");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("</Properties>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("</Node>");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("</Nodes>");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("<Properties>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Property Name=\"QEPropsPointsOption\" value=\"0\" />");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Property Name=\"QEQPropsOptionCorrect\" value=\"false\" />");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("</Properties>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</Node>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<Node id=\"1669984843-28\" NID=\"11\" Type=\"OptionNode\">");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("<Nodes>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Node id=\"1669984843-22\" NID=\"14\" Type=\"ImageNode\">");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("<Nodes />");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("<Properties>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<Property Name=\"ImageAlignment\" value=\"Left\" />");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<Property Name=\"ImageFileName\" value=\"exercise_e28e1c93-dc69-45ad-8cfc-adbb0c8e238d.png\" />");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<Property Name=\"Size\" value=\"True;True;0,6871;101;147;101;147\" />");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("</Properties>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("</Node>");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("</Nodes>");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("<Properties>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Property Name=\"QEPropsPointsOption\" value=\"0\" />");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Property Name=\"QEQPropsOptionCorrect\" value=\"True\" />");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("</Properties>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</Node>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<Node id=\"1669984843-29\" NID=\"11\" Type=\"OptionNode\">");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("<Nodes>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Node id=\"1669984843-23\" NID=\"14\" Type=\"ImageNode\">");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("<Nodes />");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("<Properties>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<Property Name=\"ImageAlignment\" value=\"Left\" />");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<Property Name=\"Size\" value=\"True;True;0,6259;92;147;92;147\" />");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<Property Name=\"ImageFileName\" value=\"exercise_85768811-78a4-4225-b016-520851d1d376.png\" />");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("</Properties>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("</Node>");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("</Nodes>");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("<Properties>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Property Name=\"QEPropsPointsOption\" value=\"0\" />");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Property Name=\"QEQPropsOptionCorrect\" value=\"True\" />");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("</Properties>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</Node>");
      _builder.newLine();
      _builder.append("              ");
      _builder.append("</Nodes>");
      _builder.newLine();
      _builder.append("              ");
      _builder.append("<Properties>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<Property Name=\"QEPropsPoints\" value=\"3\" />");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<Property Name=\"QEPropsFeedback\" value=\"true;Correcto;Incorrecto \" />");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<Property Name=\"QEPropsQuestion\" value=\"Select+which+of+the+following+object+diagrams+are+valid+instances+of+the+class+diagram+shown+below\" />");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<Property Name=\"QEPropsImageControl\" value=\"exercise_a28b6398-2463-4711-adbc-1b24cb670035.png\" />");
      _builder.newLine();
      _builder.append("              ");
      _builder.append("</Properties>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("</Node>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Node id=\"1669984843-30\" NID=\"46\" Type=\"QEMultipleResponseQuestion\">");
      _builder.newLine();
      _builder.append("              ");
      _builder.append("<Nodes>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<Node id=\"1669984843-32\" NID=\"11\" Type=\"OptionNode\">");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("<Nodes>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Node id=\"1669984843-37\" NID=\"15\" Type=\"TextNode\">");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("<Nodes />");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("<Properties>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<Property Name=\"QEText\" value=\"Change+abstract+Person+to+concrete+Professor\" />");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("</Properties>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("</Node>");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("</Nodes>");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("<Properties>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Property Name=\"QEPropsPointsOption\" value=\"0\" />");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Property Name=\"QEQPropsOptionCorrect\" value=\"True\" />");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("</Properties>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</Node>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<Node id=\"1669984843-34\" NID=\"11\" Type=\"OptionNode\">");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("<Nodes>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Node id=\"1669984843-39\" NID=\"15\" Type=\"TextNode\">");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("<Nodes />");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("<Properties>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<Property Name=\"QEText\" value=\"Change+abstract+Person+to+concrete+Student\" />");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("</Properties>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("</Node>");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("</Nodes>");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("<Properties>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Property Name=\"QEPropsPointsOption\" value=\"0\" />");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Property Name=\"QEQPropsOptionCorrect\" value=\"True\" />");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("</Properties>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</Node>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<Node id=\"1669984843-35\" NID=\"11\" Type=\"OptionNode\">");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("<Nodes>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Node id=\"1669984843-40\" NID=\"15\" Type=\"TextNode\">");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("<Nodes />");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("<Properties>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<Property Name=\"QEText\" value=\"Change+concrete+Student+to+abstract+Person\" />");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("</Properties>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("</Node>");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("</Nodes>");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("<Properties>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Property Name=\"QEPropsPointsOption\" value=\"0\" />");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Property Name=\"QEQPropsOptionCorrect\" value=\"false\" />");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("</Properties>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</Node>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<Node id=\"1669984843-41\" NID=\"52\" Type=\"Content\">");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("<Nodes>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("<Node id=\"1669984843-43\" NID=\"14\" Type=\"ImageNode\">");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("<Nodes />");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("<Properties>");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<Property Name=\"ImageAlignment\" value=\"Left\" />");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<Property Name=\"ImageFileName\" value=\"exercise_67248954-b075-4ed3-801e-0a7420453b14.png\" />");
      _builder.newLine();
      _builder.append("                        ");
      _builder.append("<Property Name=\"Size\" value=\"True;True;1,6136;355;220;355;220\" />");
      _builder.newLine();
      _builder.append("                      ");
      _builder.append("</Properties>");
      _builder.newLine();
      _builder.append("                    ");
      _builder.append("</Node>");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("</Nodes>");
      _builder.newLine();
      _builder.append("                  ");
      _builder.append("<Properties />");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("</Node>");
      _builder.newLine();
      _builder.append("              ");
      _builder.append("</Nodes>");
      _builder.newLine();
      _builder.append("              ");
      _builder.append("<Properties>");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<Property Name=\"QEPropsPoints\" value=\"4\" />");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<Property Name=\"QEPropsFeedback\" value=\"true;Correcto;Incorrecto \" />");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<Property Name=\"QEPropsQuestion\" value=\"Which+changes+shall+be+applied+to+this+object+diagram+to+match+the+class+diagram+shown+below\" />");
      _builder.newLine();
      _builder.append("                ");
      _builder.append("<Property Name=\"QEPropsImageControl\" value=\"exercise_bee49e39-dd30-48c3-9e3d-8942a0e50889.png\" />");
      _builder.newLine();
      _builder.append("              ");
      _builder.append("</Properties>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("</Node>");
      _builder.newLine();
      _builder.append("          ");
      _builder.append("</Nodes>");
      _builder.newLine();
      _builder.append("          ");
      _builder.append("<Properties>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"CSSTheme\" value=\"\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"AssessmentTitle\" value=\"Cuestionario+sobre+UML+Class+Diagrams\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsTimeLimit\" value=\"False;;Minutes\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsPassScore\" value=\"80\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsRandomize\" value=\"false;10\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsFeedbackLevel\" value=\"End Of Quiz\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsAlternates\" value=\"5\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsFeedbackIncorrectOnly\" value=\"false\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsUseSeed\" value=\"false;1234\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"PropsAssessmentDescription\" value=\"Sin descripción\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"PropsAssessmentVersion\" value=\"1.0\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"PropsAssessmentISBN\" value=\"NA\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"PhonegapID\" value=\"com.yourcompany.yourapp\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"PhonegapVersionCode\" value=\"1\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"PhonegapVersion\" value=\"1.0.0\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"PhonegapHREF\" value=\"http://www.questionwriter.com\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"PhonegapEmail\" value=\"your@email.com\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"PhonegapAuthor\" value=\"Your Name\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"PropsAssessmentServerURL\" value=\"false;your@email.com\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"PropsAssessmentNextURL\" value=\"false;http://\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsMaximizeInBrowser\" value=\"true\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsSendBeforeFeedback\" value=\"true\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEPropsMainServerURLHTML5\" value=\"false;https://www.questionwritertracker.com/collator/qwhtml5.php\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEPropsBackupServerURLHTML5\" value=\"false;https://www.xquestion.com/results/qwhtml5.php\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsPowercutRecovery\" value=\"false\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsURLProtection\" value=\"false;www.questionwritertracker.com/\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"DisplayRestartButton\" value=\"false\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsPromptOnExit\" value=\"true\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsDisplayPassingScore\" value=\"true\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsDisplayPassFail\" value=\"true;Aprobado;Reprobado\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsPrint\" value=\"true\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsEmail\" value=\"False;your@email.com\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsShowPercentage\" value=\"true\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsShowPoints\" value=\"true\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsShowResult\" value=\"true\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsShowTotalPossible\" value=\"true\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsDisplayReport\" value=\"true\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsReportAfterFeedback\" value=\"false\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsDisplayDateTime\" value=\"false\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelLoading\" value=\"Iniciando . . .\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelSending\" value=\"Enviando respuestas . . .\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelFinished\" value=\"Finalizado\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelFIBPrompt\" value=\"Escriba su respuesta:\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelClickEnlarge\" value=\"Click To Enlarge\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelYouAnswered\" value=\"Su respuesta:\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelAllowableAnswers\" value=\"Respuestas permitidas\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelPoints\" value=\"puntos\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelQuestionOf1\" value=\"Pregunta\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelQuestionOf2\" value=\"de\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelQuizFinished\" value=\"Ha llegado al final del cuestionario. Todavía puede regresar y cambiar sus respuestas. Pulse siguiente cuando se sienta seguro de continuar.\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelQuizAuthor\" value=\"Autor del cuestionario\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelPC1\" value=\"De una posibilidad\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelPC2\" value=\",acertó\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelEssayFeedback\" value=\"Pregunta de redacción no marcada automáticamente\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelNamePrompt\" value=\"Nombre o ID de usuario:\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelNextButton\" value=\"siguiente\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelBackButton\" value=\"atrás\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelNextForFeedback\" value=\"Pulse en siguiente para ver reportes y realimentación.\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsEssayFeedback\" value=\"true\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelAskSecond\" value=\"Correo Electrónico:\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelAskThird\" value=\"Dirección:\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelAskFourth\" value=\"ID:\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelAskFifth\" value=\"Teléfono:\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelRestart\" value=\"restart\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelRestartSure\" value=\"Are you sure you want to restart? You will lose any responses.\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelExit\" value=\"Are you sure you want to exit this test? Your responses may be lost.\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelReportString\" value=\"Resumen del informe\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelYourScore\" value=\"Su puntuación\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelYourScorePercentage\" value=\"Su puntuación (porcentaje)\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelTotalPossiblePoints\" value=\"Puntuación total posible (puntos)\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelPassingScore\" value=\"Puntuación para pasar\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelTestStatus\" value=\"Estado del cuestionario\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelPassStatus\" value=\"Aprobado\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelFailStatus\" value=\"Reprobado\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelMessageText\" value=\"Mensaje\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelQuizCandidate\" value=\"Persona examinada\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelPrintString\" value=\"Imprimir\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelEmailString\" value=\"Email\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQLabelDisplayDateTime\" value=\"Fecha y Hora del Sistema\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsNumbering\" value=\"true\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsDisplayPointValue\" value=\"true\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsUseImageZoom\" value=\"true\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsDisplayTitle\" value=\"true\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsRandomizeOptions\" value=\"false\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsSequencingPartialCredit\" value=\"true\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsPCOverallNegative\" value=\"false\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsFIBCloseEnough\" value=\"false;30\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsFIBPartialCredit\" value=\"false\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsQuizNegative\" value=\"false\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsRemoveBackButton\" value=\"false\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsForceAttempt\" value=\"false\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsInstructions\" value=\"true;El cuestionario iniciará cuando pulse el botón siguiente. Responda correctamente cada pregunta lo mejor que pueda.\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsAskForName\" value=\"false\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsAskSecond\" value=\"false\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsAskThird\" value=\"false\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsAskFourth\" value=\"false\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsAskFifth\" value=\"false\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsAskLength\" value=\"60\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsAsksReq\" value=\"false\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsFontOverrideTitle\" value=\"false;Elegir fuente\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsFontOverride\" value=\"false;Elegir fuente \" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsFontSizeOverride\" value=\"false;24\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsFontSizeOverrideTitle\" value=\"false;32\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QERespectWhitespace\" value=\"false\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEQPropsTextRTL\" value=\"false\" />");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<Property Name=\"QEPropsMathJax\" value=\"false;https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML\" />");
      _builder.newLine();
      _builder.append("          ");
      _builder.append("</Properties>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("</Node>");
      _builder.newLine();
      _builder.append("      ");
      _builder.append("</Nodes>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("</Node>");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("</Structure>");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("<Resources>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<pair name=\"exercise_1b845f62-af7e-4987-a76a-a21ff151c76b.png\" value=\"\" />");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<pair name=\"exercise_1f08fe77-91ed-4ca6-878d-be461b847edd.png\" value=\"iVBORw0KGgoAAAANSUhEUgAAAKIAAACTCAIAAACCtlVEAAAAKnRFWHRjb3B5bGVmdABHZW5lcmF0ZWQgYnkgaHR0cHM6Ly9wbGFudHVtbC5jb212zsofAAABDWlUWHRwbGFudHVtbAABAAAAeJxVjstuwjAQRff+ihErWECT0GeEEIWkUtNEReWxN84UXJIxssdI7ddjVLWI5cy59+pMHEvLvm2E22s6SCtbUI107pnZ6o1nfFWGFvoHIRJm84WKoQPpyI9n0o5u/LgD0kHEu2u4xp1WDf4HYsfXganeX2hCtZgg1WcNMW8k8aoq4YjWaUMQD5IoGQ7iYbcKV4YK4hjipzSJ0rsHmOVLOPOe6ObzEpzxViHU2v3qh4GeKORRwocn1i2m8H5AKrK3vwfkdNTWUIvEolhXl8D9bX+qGRZogwqsK5Hhp/QNh4YytaZtCqvlS/9RlJK2Xm7DNjoxM2HXfqeQL8QJK2hvb1W5jhwAAAdGSURBVHhe7Z3LSxZfGMdfg8TSElTSahNWZKat7LIoXBSRLYKIykV7qZUSlBQplGJkZRcpJEKToiCCLtgNrIiK2tiijEyw0PJSeOkv6Pf9dfgdT+d19PfOzPvO6PP9LOR5n+fMmTnzOXPmzMrIbyKAiJ0gMxFqFgE1i4CaRUDNIqBmEUymuaampjYEnDp1yr6y+HDixAn73NMWjMUc2mSa0fpXCEikZvvc0xZqdoSag4SaXUDNjlBzkFCzC6jZEWr+v/T29u7bt2/x4sVz5sxZvXp1a2ur3SJ2wqn5+/fvy5YtGxoasvI/f/5cunTply9frLwmEonYqT845RWTV6OJo+b+/v5Vq1bV19d//vx5cHDw7t27ixYtunLlit0uRsKpGZSXl58/f95KXrx4sayszEqaxCpMEetRPms2T3/o0KGjR48axV/37t1bu3atijs6OrZt2wbxycnJK1asuHHjhsqjh4cPHy5YsGDDhg3jRxqETbMecldXF6b12NiYLiEuLCx8//69+llZWZmZmZmdnY0JMTw8rJI4/Ny5c8uXL581a9bs2bOvX7+u8yr48eNHaWnp3Llz8/Pznz9/blV/OXRr4bNmk5UrV7569cpK6ruANfz06dMDAwPfvn2rqqrKyclReQxgz549yH/8+HH8MIOwaTbZu3fvzZs39c9bt27t2rVLxU1NTQ0NDVjVenp6GhsbEas8xrtx48Z3794hvnbtGkzrvArwtFy6dAmvAywVMG1Vnbq1iKNmvI/xxrKzE4EJm5SUpGIM4PXr13/X/yLMmt++fWsuQvCnJ3pRUVFfX58umcKwsOm89qeDvLw880CFrjp1axFHzVhnsAGxswZPnjw5ePDgjh07lixZYg4veiNjEmbNYOvWrc+ePUOABXbz5s06n56eHjFISUlRecQjIyO6mXkfVICWZgOFrjp1axFHzeZrSYFNWXNzs4ovXLiQm5uLhai9vf3Dhw/Rw3Mi5JofPHiAiYsAf+/fv6/zaWlpE05fa7zR9yE1NXV0dHS8xR901albizhqxpMKJWYGUouLi1WMTdanT59U/ObNm+jhORFyzWDdunVPnz5ds2aNmcSk7+zsNDOKKTVj0cbjMd7iD7rq1K1FHDXjoxmfknV1dd3d3dhnXb58OSMjAwu1quJRxvYBM/HFixcFBQXRw3Mi/JpbW1sXLlx49epVM4nNUXV1NYRhr4Qtp57uU2o+cuQIOsSNwkKInbxVderWwmfN1kVjNd65c2dWVhbe0+vXr29ra9MlfDVhK45tGhxjBkQPz4mwaY6+YKyxmzZtslZa/KyoqMBExyJcUlKCry+Vn1IzdtHbt2/HSxffJi9fvrSqTt1a+Kw5AYRN87SAmh2h5qmJ+ITdb1g129cdKPbFxU9z/Ain5pATm2Zs9moDpaWlJZGaAx+vL+CmxabZniRBkEjN9rmnLdTsCDUHCTW7gJodoeYgoWYXULMj1Bwk1OwCanaEmoOEml1AzY5Qc5BQswuo2RFqDhJqdgE1O0LNQULNLohBc104SJjmkydP2ueetmAs5tAm00xmDNQsAmoWATWLgJpFQM0ioGYRULMIqFkE1CwCahYBNYuAmkVAzSKgZhFQswioWQTULAJqFgE1i4CaRUDNIqBmEVCzCKhZBNQsAmoWATWLgJpFQM0ioGYRULMIqFkE1CwCahYBNYuAmkVAzSKgZhFQswioWQTULAJqFgE1i4CaRUDNIqBmEVCzCKhZBNQsAmoWATWLgJpFQM0ioGYRULMIqFkE1CwCahYBNYtgYs01NTW1ISNh/xB0RjKx5tpw/EtfE2r2AjWLgJpFQM0ioGYRULMI/NEcMZg3b96WLVs6Ojp0yQrcQc1e8E2zCkZHR79+/VpeXl5QUPB3E2oOEveaTW2WwsHBwfnz51sls82dO3cqKytVjCAzMzM7OxuTY3h4WLexoGYvuNdsohWOjY319vYePnz42LFjVkkHbW1tZWVlKm5qampoaMC06OnpaWxsRKzy0VCzF3zTbJKUlAR/umQGjx8/Li0tHRkZUcmioqK+vj4Vg/z8fB1bULMXfNOsAvU019fX5+XlWSUE7e3tyB8/flxlQHp6ujk/UlJSdMmCmr3gs2bFwMBAcnKyVUJw5swZPLu5ubldXV0qmZaWNjQ0pOLJoWYvxEVzd3d3Tk6OVdLB2bNnd+/ereLCwsLOzk4VTw41e8F/zdhMHThwYP/+/VZJB3gx4x386NEjxNhzVVdX9/f346iqqqri4mLVJhpq9oJ7zaba/96t/26+srKy4BibZ6uZ2f727dv4sIZvfGdXVFRkZGSkpqaWlJToxTwaavaCe80Jhpq9QM0i8EGzXrF9xD4HNXvDB82JgZq94Ki5ubm5NjS0tLRQsxccNdtPU9BQsxeoWQTULAJqFgE1i4CaRUDNIqBmEVCzCKhZBNQsAmoWATWLgJpFQM0imFhzXfigZi9MrJnMMKhZBNQsAmoWwT/Op7lUy8wY6wAAAABJRU5ErkJggg==\" />");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<pair name=\"exercise_6aa17f7a-e02e-412d-a7e9-4f7a4e9eb14a.png\" value=\"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\" />");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<pair name=\"exercise_370fe4c6-f82b-41b3-9aa2-be58c0c679e4.png\" value=\"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\" />");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<pair name=\"exercise_d57cede2-ed29-46a1-89ee-1c314da39ebc.png\" value=\"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\" />");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<pair name=\"exercise_a28b6398-2463-4711-adbc-1b24cb670035.png\" value=\"\" />");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<pair name=\"exercise_c009a06c-4832-4f93-82bf-3832b766e9e1.png\" value=\"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\" />");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<pair name=\"exercise_890f39b7-44cc-48c8-9142-8985a11ef28c.png\" value=\"iVBORw0KGgoAAAANSUhEUgAAALkAAAAxCAIAAAAJLJ++AAAAKnRFWHRjb3B5bGVmdABHZW5lcmF0ZWQgYnkgaHR0cHM6Ly9wbGFudHVtbC5jb212zsofAAABCGlUWHRwbGFudHVtbAABAAAAeJxVjstOwzAQRff+ilFX7aIlTnlGVVVIgkRJREXa7l1nCIbEjuxxBHx9XSFALGfunTNn5UhY8l3L3LvSvbCiA9kK526JrDp4wgdpdKW+ECJmDm8oCUaQLPwybRVqWpz55QiEg4he/+f5R2/ROfPb4I7YCnV9esY2rdC0KwsY0DplNPBZHMXzGZ+PyzBlKIFz4DdJHCUXV5DmWzjlEzbONwU4461EqJX7lgyACVuLQcCz16Q6TOCpR73OHn8WkOtBWaO74MzW+/KvcHk+vVMEFdqgAvuSZfgifEvhQppa6SaB3fZ+es0KoRsvmsBGx1ITuPYzgbxiR0RoaHLtTHOhAAAFM0lEQVR4Xu2YyS8sXRjGO0LMMc9hIRZmEUMshA0LscLCxspCwsawwAYRfVkQUyQiIi2CRIKERIRYEcLCxhjjwjzTf8H9nvSJ89U91d2pr0r56rjnt3rrrbdOVz311DnvadNvgUAZJjYhEDhAeEWgFOEVgVKEVwRKEV4RKEV4RaAU+14xm82/+KGnp4d9AH3gSxbtMMLa9wrqrPzwbV7hSxbtCK+ohy9ZtCO8oh6+ZNGO8Ip6+JJFO8Ir6uFLFu1w6ZWNjQ02JUF4RSf08srV1VV1dXVUVJSnp2dqaurExAQ9ZTKZmOC/4u7uzqYkGNYrJnuwRQZGF6/c3d0lJSV1d3efnp4+PDwsLCxERkaOjY2Rs9oFcj6Ckb3Cprjiy7wiFaKpqamlpUVy0rq4uJidnU1iWim9pLm5OSgoKCwsrK6u7vX1lRYMDAzExMS4uLi4ublNTU2RJIVeLsVQXpHepKMbLi4unp2dJfH09HRBQYHVVjw4OBgSEhIQEFBVVfX09EQKkF9eXg4NDc3NzSUZu9JNTk5CMQ8Pj8zMTNQ7Sb6/vzc2NoaHh2MFyMvLOzg4IHk5X+YVKQkJCZubm0zy4+ODBFQyGoyMjPT19WEGury8HBoaQkwLoMju7i6uJc/JXGgXQ3lFiqPbPjo6Sk9Pf3l5wXyMD2N7e9tqK46Pj9/Z2bm/v8e7xIJOipEvLy9HEldZHUsHraDY29sbVv/Y2FgnSbPZ3NnZ+WCjo6OjoqKC5OXo4hU49Pb2ls1+IvcKbH59fU0LEhMTaQERjh4ygV2M7BU55BTeVnt7OzxRWVlJi+fm5kh8fHyMz4/mt7a2SGx1LB1mmuHhYZp3ksTI8BmJz8/Po6Oj/zz/L7p4xcvL6/n5mc1+QgWigZ+fn1Q+TJK0QDqO/EK7GNkrbOoTfOt46/7+/nhbJINi7A9IDBF8fHxo/vHxkcRWx9LNzMzgEF0j+gEM7iSJjQJduRDQEeTo4pWUlJT9/X1pBrOrxWIhMZWMBhBC+vwUWsAcMnkGTr1SWFiIdeHi4oJkUAzRSIxmBVM1zZOA4Eg6gOkHbVBOTk5NTY2TpK+vL/UKTInWkBYz6OIVzKUYV5pBm5afn09i+SuHtw4PD0ks5e/xCtag/v7+3t5e6Rq0srJCYogTERFB8yQgOJKOsr6+Lv9daTItLU26Bjn5P0IXr2DyjIuL6+rqOjs7u7m5GR0dDQwMXF1dJWflrxwdWVtbGz4j3HRra6vcVcwhPgU0ffQJGbjzCtqRrKysNxtYIGhvm5GRgekZsjQ0NJSUlJBiZhBH0qEvHh8fx4SBzSPdE9hNwqPS3hY3QPJyvswrzDNg61VWVhYcHIzeBTPe0tISPSX3CrZt9fX18JO3t3dRUdHJyQlTwByiDUQlRpaepRjKK9JHMNnDatszz8/Pkxr0s3TPjG8szAY2QXQ9IpdQHEm3traWnJzs6upK9j5OkhihtrYWfQ+6pdLS0r29PZKX82VeMQ6G8opqGE8YAeEV9egqy1/hlT+nWN1hf172SPphZFm0wz6ATNgv8Mr/jjG98gNQ6hWLxfKLB9Dnf6dXeJFFO3JhHXqF9ZiB+U6vsL/9oxFeUQ9fsmhHeEU9fMmiHeEV9fAli3aEV9TDlyzaEV5RD1+yaEd4RT18yaId4RX18CWLdoRX1MOXLNoRXlEPX7JoR3hFPXzJoh3hFfXwJYt2hFfUw5cs2hFeUQ9fsmhHeEU9fMmiHUVe6eKKb/MK+8M/HUVeEQjkCK8IlCK8IlCK8IpAKf8AfS/bpPRm+CIAAAAASUVORK5CYII=\" />");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<pair name=\"exercise_e28e1c93-dc69-45ad-8cfc-adbb0c8e238d.png\" value=\"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\" />");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<pair name=\"exercise_85768811-78a4-4225-b016-520851d1d376.png\" value=\"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\" />");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<pair name=\"exercise_bee49e39-dd30-48c3-9e3d-8942a0e50889.png\" value=\"\" />");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<pair name=\"exercise_da2e5d23-8117-4d71-a65e-8532cdda534b.png\" value=\"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\" />");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<pair name=\"exercise_a070d622-46f1-45e4-a54c-8b5f53c5c8f4.png\" value=\"\" />");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<pair name=\"exercise_67248954-b075-4ed3-801e-0a7420453b14.png\" value=\"\" />");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("</Resources>");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("<References>");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("</References>");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("<FontReferences>");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("</FontReferences>");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("<Settings>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<NextID>44</NextID>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<UniqueID>1669984843</UniqueID>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<StructureUpdates>");
      _builder.newLine();
      _builder.append("      ");
      _builder.append("<ScoreReference>true</ScoreReference>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("</StructureUpdates>");
      _builder.newLine();
      _builder.append("  ");
      _builder.append("</Settings>");
      _builder.newLine();
      _builder.append("</Root>\t\t");
      _builder.newLine();
      _builder.append("    \t");
      int i = 0;
      _builder.newLineIfNotEmpty();
      {
        EList<MutatorTests> _exercises = program.getExercises();
        for(final MutatorTests exercise : _exercises) {
          {
            if ((exercise instanceof AlternativeResponse)) {
              _builder.append("       \t");
              _builder.append("<!-- ");
              EClass answersClass = null;
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              _builder.append("       \t");
              _builder.append("<!-- ");
              EClass statementClass = null;
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              {
                for(final EClass root : this.roots) {
                  {
                    EClass _answers = ((AlternativeResponse)exercise).getConfig().getAnswers();
                    boolean _tripleNotEquals = (_answers != null);
                    if (_tripleNotEquals) {
                      {
                        boolean _equals = ((AlternativeResponse)exercise).getConfig().getAnswers().getName().equals(root.getName());
                        if (_equals) {
                          String _xblockexpression_3 = null;
                          {
                            answersClass = root;
                            _xblockexpression_3 = "";
                          }
                          _builder.append(_xblockexpression_3);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                  {
                    EClass _statement = ((AlternativeResponse)exercise).getConfig().getStatement();
                    boolean _tripleNotEquals_1 = (_statement != null);
                    if (_tripleNotEquals_1) {
                      {
                        boolean _equals_1 = ((AlternativeResponse)exercise).getConfig().getStatement().getName().equals(root.getName());
                        if (_equals_1) {
                          String _xblockexpression_4 = null;
                          {
                            statementClass = root;
                            _xblockexpression_4 = "";
                          }
                          _builder.append(_xblockexpression_4);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              {
                if ((answersClass == null)) {
                  String _xblockexpression_5 = null;
                  {
                    int _size_2 = this.roots.size();
                    int _minus = (_size_2 - 1);
                    answersClass = this.roots.get(_minus);
                    _xblockexpression_5 = "";
                  }
                  _builder.append(_xblockexpression_5);
                  _builder.newLineIfNotEmpty();
                }
              }
              {
                if ((statementClass == null)) {
                  {
                    int _size_2 = this.roots.size();
                    boolean _greaterThan_2 = (_size_2 > 1);
                    if (_greaterThan_2) {
                      String _xblockexpression_6 = null;
                      {
                        statementClass = this.roots.get(1);
                        _xblockexpression_6 = "";
                      }
                      _builder.append(_xblockexpression_6);
                      _builder.newLineIfNotEmpty();
                    } else {
                      String _xblockexpression_7 = null;
                      {
                        statementClass = this.roots.get(0);
                        _xblockexpression_7 = "";
                      }
                      _builder.append(_xblockexpression_7);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              {
                EList<Test> _tests = ((AlternativeResponse)exercise).getTests();
                for(final Test test : _tests) {
                  String _xifexpression = null;
                  List<String> _get = this.diagrams.get(exercise).get(test).get(answersClass);
                  boolean _tripleNotEquals_2 = (_get != null);
                  if (_tripleNotEquals_2) {
                    String _xifexpression_1 = null;
                    int _size_3 = this.diagrams.get(exercise).get(test).get(answersClass).size();
                    boolean _greaterThan_3 = (_size_3 > 0);
                    if (_greaterThan_3) {
                      _xifexpression_1 = this.diagrams.get(exercise).get(test).get(answersClass).get(0);
                    }
                    _xifexpression = _xifexpression_1;
                  }
                  String solution = _xifexpression;
                  _builder.newLineIfNotEmpty();
                  List<String> answers = new ArrayList<String>();
                  _builder.newLineIfNotEmpty();
                  Set<String> answersSet = new LinkedHashSet<String>();
                  _builder.newLineIfNotEmpty();
                  {
                    if (((this.diagrams.get(exercise).get(test).get(answersClass) != null) && (this.diagrams.get(exercise).get(test).get(answersClass).size() > 0))) {
                      _builder.append("        ");
                      String _xblockexpression_8 = null;
                      {
                        answersSet.addAll(this.diagrams.get(exercise).get(test).get(answersClass));
                        _xblockexpression_8 = "";
                      }
                      _builder.append(_xblockexpression_8, "        ");
                      _builder.newLineIfNotEmpty();
                      _builder.append("        ");
                      String _xblockexpression_9 = null;
                      {
                        answers.addAll(answersSet);
                        _xblockexpression_9 = "";
                      }
                      _builder.append(_xblockexpression_9, "        ");
                      _builder.newLineIfNotEmpty();
                      _builder.append("        ");
                      String _xblockexpression_10 = null;
                      {
                        Collections.shuffle(answers);
                        _xblockexpression_10 = "";
                      }
                      _builder.append(_xblockexpression_10, "        ");
                      _builder.newLineIfNotEmpty();
                      {
                        int _size_4 = answers.size();
                        boolean _greaterThan_4 = (_size_4 > 0);
                        if (_greaterThan_4) {
                          _builder.append("<!-- ");
                          String diagram = answers.get(0);
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("<!--");
                          String _replace = test.getSource().replace(".model", "");
                          String _plus = ((this.projectPath + "/src-gen/html/diagrams/") + _replace);
                          String _plus_1 = (_plus + "/");
                          String _plus_2 = (_plus_1 + diagram);
                          File file = new File(_plus_2);
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          {
                            if ((file.isFile() && file.exists())) {
                              _builder.append("          ");
                              _builder.append("<question type=\"truefalse\">");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("<name>");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<text><![CDATA[<p>");
                              String _replace_1 = test.getQuestion().replace("\"", "\'");
                              _builder.append(_replace_1, "    ");
                              _builder.append("<br></p>]]></text>");
                              _builder.newLineIfNotEmpty();
                              _builder.append("  ");
                              _builder.append("</name>");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("<questiontext format=\"html\">");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<!-- ");
                              UUID uuid = UUID.randomUUID();
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              _builder.append("    ");
                              _builder.append("<text><![CDATA[<p>");
                              String _replace_2 = test.getQuestion().replace("\"", "\'");
                              _builder.append(_replace_2, "    ");
                              _builder.append("<br></p><p><img src=\"@@PLUGINFILE@@/exercise_");
                              _builder.append(uuid, "    ");
                              _builder.append(".png\" alt=\"");
                              String _replace_3 = test.getQuestion().replace("\"", "\'");
                              _builder.append(_replace_3, "    ");
                              _builder.append("\" width=\"20%\" height=\"20%\" class=\"img-responsive atto_image_button_text-bottom\"><br></p>]]></text>");
                              _builder.newLineIfNotEmpty();
                              _builder.append("\t\t");
                              _builder.append("<file name=\"exercise_");
                              _builder.append(uuid, "\t\t");
                              _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                              String _replace_4 = test.getSource().replace(".model", "");
                              String _plus_3 = ("diagrams/" + _replace_4);
                              String _plus_4 = (_plus_3 + "/");
                              String _plus_5 = (_plus_4 + diagram);
                              String _stringBase64 = this.getStringBase64(_plus_5);
                              _builder.append(_stringBase64, "\t\t");
                              _builder.append("</file>");
                              _builder.newLineIfNotEmpty();
                              _builder.append("  ");
                              _builder.append("</questiontext>");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("<generalfeedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<text></text>");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("</generalfeedback>");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("<defaultgrade>1.0000000</defaultgrade>");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("<penalty>1.0000000</penalty>");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("<hidden>0</hidden>");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("<idnumber></idnumber>");
                              _builder.newLine();
                              {
                                boolean _equals_2 = diagram.equals(solution.replace(".model", ".png"));
                                if (_equals_2) {
                                  _builder.append("<answer fraction=\"100\" format=\"moodle_auto_format\">");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<text>true</text>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<feedback format=\"html\">");
                                  _builder.newLine();
                                  _builder.append("    ");
                                  _builder.append("<text></text>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("</feedback>");
                                  _builder.newLine();
                                  _builder.append("</answer>");
                                  _builder.newLine();
                                  _builder.append("<answer fraction=\"0\" format=\"moodle_auto_format\">");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<text>false</text>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<feedback format=\"html\">");
                                  _builder.newLine();
                                  _builder.append("    ");
                                  _builder.append("<text></text>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("</feedback>");
                                  _builder.newLine();
                                  _builder.append("</answer>");
                                  _builder.newLine();
                                } else {
                                  _builder.append("<answer fraction=\"0\" format=\"moodle_auto_format\">");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<text>true</text>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<feedback format=\"html\">");
                                  _builder.newLine();
                                  _builder.append("    ");
                                  _builder.append("<text></text>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("</feedback>");
                                  _builder.newLine();
                                  _builder.append("</answer>");
                                  _builder.newLine();
                                  _builder.append("<answer fraction=\"100\" format=\"moodle_auto_format\">");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<text>false</text>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<feedback format=\"html\">");
                                  _builder.newLine();
                                  _builder.append("    ");
                                  _builder.append("<text></text>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("</feedback>");
                                  _builder.newLine();
                                  _builder.append("</answer>");
                                  _builder.newLine();
                                }
                              }
                              _builder.append("</question>");
                              _builder.newLine();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          {
            if ((exercise instanceof MultiChoiceDiagram)) {
              _builder.append("        ");
              int min = Integer.MAX_VALUE;
              _builder.newLineIfNotEmpty();
              {
                EList<Test> _tests_1 = ((MultiChoiceDiagram)exercise).getTests();
                for(final Test test_1 : _tests_1) {
                  {
                    Set<EClass> _keySet = this.diagrams.get(exercise).get(test_1).keySet();
                    for(final EClass eclass : _keySet) {
                      int counter = this.diagrams.get(exercise).get(test_1).get(eclass).size();
                      _builder.newLineIfNotEmpty();
                      {
                        if ((min > counter)) {
                          String _xblockexpression_11 = null;
                          {
                            min = counter;
                            _xblockexpression_11 = "";
                          }
                          _builder.append(_xblockexpression_11);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              _builder.append("       \t");
              _builder.append("<!-- ");
              EClass answersClass_1 = null;
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              _builder.append("       \t");
              _builder.append("<!-- ");
              EClass statementClass_1 = null;
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              {
                for(final EClass root_1 : this.roots) {
                  {
                    EClass _answers_1 = ((MultiChoiceDiagram)exercise).getConfig().getAnswers();
                    boolean _tripleNotEquals_3 = (_answers_1 != null);
                    if (_tripleNotEquals_3) {
                      {
                        boolean _equals_3 = ((MultiChoiceDiagram)exercise).getConfig().getAnswers().getName().equals(root_1.getName());
                        if (_equals_3) {
                          String _xblockexpression_12 = null;
                          {
                            answersClass_1 = root_1;
                            _xblockexpression_12 = "";
                          }
                          _builder.append(_xblockexpression_12);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                  {
                    EClass _statement_1 = ((MultiChoiceDiagram)exercise).getConfig().getStatement();
                    boolean _tripleNotEquals_4 = (_statement_1 != null);
                    if (_tripleNotEquals_4) {
                      {
                        boolean _equals_4 = ((MultiChoiceDiagram)exercise).getConfig().getStatement().getName().equals(root_1.getName());
                        if (_equals_4) {
                          String _xblockexpression_13 = null;
                          {
                            statementClass_1 = root_1;
                            _xblockexpression_13 = "";
                          }
                          _builder.append(_xblockexpression_13);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              {
                if ((answersClass_1 == null)) {
                  String _xblockexpression_14 = null;
                  {
                    int _size_5 = this.roots.size();
                    int _minus = (_size_5 - 1);
                    answersClass_1 = this.roots.get(_minus);
                    _xblockexpression_14 = "";
                  }
                  _builder.append(_xblockexpression_14);
                  _builder.newLineIfNotEmpty();
                }
              }
              {
                if ((statementClass_1 == null)) {
                  {
                    int _size_5 = this.roots.size();
                    boolean _greaterThan_5 = (_size_5 > 1);
                    if (_greaterThan_5) {
                      String _xblockexpression_15 = null;
                      {
                        statementClass_1 = this.roots.get(1);
                        _xblockexpression_15 = "";
                      }
                      _builder.append(_xblockexpression_15);
                      _builder.newLineIfNotEmpty();
                    } else {
                      String _xblockexpression_16 = null;
                      {
                        statementClass_1 = this.roots.get(0);
                        _xblockexpression_16 = "";
                      }
                      _builder.append(_xblockexpression_16);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              {
                EList<Test> _tests_2 = ((MultiChoiceDiagram)exercise).getTests();
                for(final Test test_2 : _tests_2) {
                  String _xifexpression_2 = null;
                  List<String> _get_1 = this.diagrams.get(exercise).get(test_2).get(statementClass_1);
                  boolean _tripleNotEquals_5 = (_get_1 != null);
                  if (_tripleNotEquals_5) {
                    String _xifexpression_3 = null;
                    int _size_6 = this.diagrams.get(exercise).get(test_2).get(statementClass_1).size();
                    boolean _greaterThan_6 = (_size_6 > 0);
                    if (_greaterThan_6) {
                      _xifexpression_3 = this.diagrams.get(exercise).get(test_2).get(statementClass_1).get(0);
                    } else {
                      _xifexpression_3 = null;
                    }
                    _xifexpression_2 = _xifexpression_3;
                  } else {
                    _xifexpression_2 = null;
                  }
                  String statement = _xifexpression_2;
                  _builder.newLineIfNotEmpty();
                  String _xifexpression_4 = null;
                  List<String> _get_2 = this.diagrams.get(exercise).get(test_2).get(answersClass_1);
                  boolean _tripleNotEquals_6 = (_get_2 != null);
                  if (_tripleNotEquals_6) {
                    String _xifexpression_5 = null;
                    int _size_7 = this.diagrams.get(exercise).get(test_2).get(answersClass_1).size();
                    boolean _greaterThan_7 = (_size_7 > 0);
                    if (_greaterThan_7) {
                      _xifexpression_5 = this.diagrams.get(exercise).get(test_2).get(answersClass_1).get(0);
                    }
                    _xifexpression_4 = _xifexpression_5;
                  }
                  String solution_1 = _xifexpression_4;
                  _builder.newLineIfNotEmpty();
                  List<String> answers_1 = new ArrayList<String>();
                  _builder.newLineIfNotEmpty();
                  Set<String> answersSet_1 = new LinkedHashSet<String>();
                  _builder.newLineIfNotEmpty();
                  {
                    if (((this.diagrams.get(exercise).get(test_2).get(answersClass_1) != null) && (this.diagrams.get(exercise).get(test_2).get(answersClass_1).size() > 0))) {
                      String _xblockexpression_17 = null;
                      {
                        answersSet_1.addAll(this.diagrams.get(exercise).get(test_2).get(answersClass_1));
                        _xblockexpression_17 = "";
                      }
                      _builder.append(_xblockexpression_17);
                      _builder.newLineIfNotEmpty();
                      String _xblockexpression_18 = null;
                      {
                        answers_1.addAll(answersSet_1);
                        _xblockexpression_18 = "";
                      }
                      _builder.append(_xblockexpression_18);
                      _builder.newLineIfNotEmpty();
                      String _xblockexpression_19 = null;
                      {
                        Collections.shuffle(answers_1);
                        _xblockexpression_19 = "";
                      }
                      _builder.append(_xblockexpression_19);
                      _builder.newLineIfNotEmpty();
                      _builder.append("   ");
                      _builder.append("<!--");
                      String _replace_5 = test_2.getSource().replace(".model", "");
                      String _plus_6 = ((this.projectPath + "/src-gen/html/diagrams/") + _replace_5);
                      String _plus_7 = (_plus_6 + "/");
                      String _plus_8 = (_plus_7 + statement);
                      File file_1 = new File(_plus_8);
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      {
                        if ((file_1.isFile() && file_1.exists())) {
                          _builder.append("<question type=\"multichoice\">");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<name>");
                          _builder.newLine();
                          _builder.append("    ");
                          _builder.append("<text>Question ");
                          int _plusPlus = i++;
                          _builder.append(_plusPlus, "    ");
                          _builder.append("</text>");
                          _builder.newLineIfNotEmpty();
                          _builder.append("  ");
                          _builder.append("</name>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<!-- ");
                          UUID uuid_1 = UUID.randomUUID();
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("  ");
                          _builder.append("<questiontext format=\"html\">");
                          _builder.newLine();
                          {
                            if ((((((MultiChoiceDiagram)exercise).getConfig().getStatement() != null) && (this.roots.size() > 1)) && statementClass_1.getName().equals(this.roots.get(1).getName()))) {
                              _builder.append("  ");
                              _builder.append("<text><![CDATA[<p>");
                              String _replace_6 = test_2.getQuestion().replace("\"", "\'");
                              _builder.append(_replace_6, "  ");
                              _builder.append("<br></p><p><img src=\"@@PLUGINFILE@@/exercise_");
                              _builder.append(uuid_1, "  ");
                              _builder.append(".png\" alt=\"");
                              String _replace_7 = test_2.getQuestion().replace("\"", "\'");
                              _builder.append(_replace_7, "  ");
                              _builder.append("\" width=\"30%\" height=\"30%\" class=\"img-responsive atto_image_button_text-bottom\"><br></p>]]></text>");
                              _builder.newLineIfNotEmpty();
                              _builder.append("  ");
                              _builder.append("<file name=\"exercise_");
                              _builder.append(uuid_1, "  ");
                              _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                              String _replace_8 = test_2.getSource().replace(".model", "");
                              String _plus_9 = ("diagrams/" + _replace_8);
                              String _plus_10 = (_plus_9 + "/");
                              String _plus_11 = (_plus_10 + statement);
                              String _stringBase64_1 = this.getStringBase64(_plus_11);
                              _builder.append(_stringBase64_1, "  ");
                              _builder.append("</file>");
                              _builder.newLineIfNotEmpty();
                            } else {
                              _builder.append("  ");
                              _builder.append("<text><![CDATA[<p>");
                              String _replace_9 = test_2.getQuestion().replace("\"", "\'");
                              _builder.append(_replace_9, "  ");
                              _builder.append("</p>]]></text>");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                          _builder.append("  ");
                          _builder.append("</questiontext>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<generalfeedback format=\"html\">");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<text></text>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("</generalfeedback>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<defaultgrade>1.0000000</defaultgrade>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<penalty>1.0000000</penalty>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<hidden>0</hidden>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<idnumber></idnumber>");
                          _builder.newLine();
                          {
                            Mode _mode = ((MultiChoiceDiagram)exercise).getConfig().getMode();
                            boolean _tripleEquals = (_mode == Mode.RADIOBUTTON);
                            if (_tripleEquals) {
                              _builder.append("  ");
                              _builder.append("<single>true</single>");
                              _builder.newLine();
                            } else {
                              Mode _mode_1 = ((MultiChoiceDiagram)exercise).getConfig().getMode();
                              boolean _tripleEquals_1 = (_mode_1 == Mode.CHECKBOX);
                              if (_tripleEquals_1) {
                                _builder.append("  ");
                                _builder.append("<single>false</single>");
                                _builder.newLine();
                              }
                            }
                          }
                          _builder.append("  ");
                          _builder.append("<shuffleanswers>true</shuffleanswers>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<answernumbering>abc</answernumbering>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<correctfeedback format=\"html\">");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<!--<text>Respuesta correcta</text>-->");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<text>Right answer.</text>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("</correctfeedback>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<partiallycorrectfeedback format=\"html\">");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<!--<text>Respuesta parcialmente correcta.</text>-->");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<text>Partially right answer.</text>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("</partiallycorrectfeedback>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<incorrectfeedback format=\"html\">");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<!--<text>Respuesta incorrecta.</text>-->");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<text>Wrong answer.</text>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("</incorrectfeedback>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<shownumcorrect/>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<!--");
                          int counter_1 = 0;
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("  ");
                          _builder.append("<!--");
                          int solutions = 1;
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("  ");
                          _builder.append("<!--");
                          double fraction = (100.0 / solutions);
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("  ");
                          String _xblockexpression_20 = null;
                          {
                            counter_1 = 0;
                            _xblockexpression_20 = "";
                          }
                          _builder.append(_xblockexpression_20, "  ");
                          _builder.newLineIfNotEmpty();
                          {
                            for(final String diagram_1 : answers_1) {
                              _builder.append("  ");
                              _builder.append("<!--");
                              String _replace_10 = test_2.getSource().replace(".model", "");
                              String _plus_12 = ((this.projectPath + "/src-gen/html/diagrams/") + _replace_10);
                              String _plus_13 = (_plus_12 + "/");
                              String _plus_14 = (_plus_13 + diagram_1);
                              File _file = new File(_plus_14);
                              File _file_1 = file_1 = _file;
                              _builder.append(_file_1, "  ");
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              {
                                if ((file_1.isFile() && file_1.exists())) {
                                  _builder.append("<!-- ");
                                  _builder.append(uuid_1 = UUID.randomUUID());
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  {
                                    if (((diagram_1.startsWith(answersClass_1.getName()) || diagram_1.contains(("/" + answersClass_1.getName()))) || diagram_1.contains(("\\" + answersClass_1.getName())))) {
                                      _builder.append("<!--");
                                      boolean s = false;
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                      {
                                        List<String> _get_3 = this.solutionsMap.get(exercise);
                                        for(final String sol : _get_3) {
                                          {
                                            if ((((diagram_1.startsWith((sol + "/")) || diagram_1.startsWith((sol + "\\"))) || diagram_1.contains((((sol + "/") + answersClass_1.getName()) + "_"))) || diagram_1.contains((((sol + "\\") + answersClass_1.getName()) + "_")))) {
                                              String _xblockexpression_21 = null;
                                              {
                                                s = true;
                                                _xblockexpression_21 = "";
                                              }
                                              _builder.append(_xblockexpression_21);
                                              _builder.newLineIfNotEmpty();
                                            }
                                          }
                                        }
                                      }
                                      {
                                        if ((s == true)) {
                                          {
                                            if ((counter_1 < (min - 1))) {
                                              String _xblockexpression_22 = null;
                                              {
                                                counter_1++;
                                                _xblockexpression_22 = "";
                                              }
                                              _builder.append(_xblockexpression_22);
                                              _builder.newLineIfNotEmpty();
                                              String _xblockexpression_23 = null;
                                              {
                                                solutions++;
                                                _xblockexpression_23 = "";
                                              }
                                              _builder.append(_xblockexpression_23);
                                              _builder.newLineIfNotEmpty();
                                            }
                                          }
                                        }
                                      }
                                      {
                                        if ((s || diagram_1.equals(solution_1))) {
                                          {
                                            if (((100 % solutions) == 0)) {
                                              _builder.append("<answer fraction=\"");
                                              _builder.append((100 / solutions));
                                              _builder.append("\" format=\"html\">");
                                              _builder.newLineIfNotEmpty();
                                            } else {
                                              _builder.append("<!--");
                                              NumberFormat _numberInstance = NumberFormat.getNumberInstance(Locale.ENGLISH);
                                              DecimalFormat formatter = ((DecimalFormat) _numberInstance);
                                              _builder.append("-->");
                                              _builder.newLineIfNotEmpty();
                                              String _xblockexpression_24 = null;
                                              {
                                                formatter.applyPattern("###.#####");
                                                _xblockexpression_24 = "";
                                              }
                                              _builder.append(_xblockexpression_24);
                                              _builder.newLineIfNotEmpty();
                                              _builder.append("<answer fraction=\"");
                                              String _format = formatter.format(fraction);
                                              _builder.append(_format);
                                              _builder.append("\" format=\"html\">");
                                              _builder.newLineIfNotEmpty();
                                            }
                                          }
                                          _builder.append(" ");
                                          _builder.append("<!--");
                                          String size = "60";
                                          _builder.append("-->");
                                          _builder.newLineIfNotEmpty();
                                          _builder.append(" ");
                                          _builder.append("<text><![CDATA[<p><img src=\"@@PLUGINFILE@@/exercise_");
                                          _builder.append(uuid_1, " ");
                                          _builder.append(".png\" alt=\"\" width=\"");
                                          _builder.append(size, " ");
                                          _builder.append("%\" height=\"");
                                          _builder.append(size, " ");
                                          _builder.append("%\" role=\"presentation\" class=\"img-responsive atto_image_button_text-bottom\"><br></p>]]></text>");
                                          _builder.newLineIfNotEmpty();
                                          _builder.append(" ");
                                          _builder.append("<file name=\"exercise_");
                                          _builder.append(uuid_1, " ");
                                          _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                                          String _replace_11 = test_2.getSource().replace(".model", "");
                                          String _plus_15 = ("diagrams/" + _replace_11);
                                          String _plus_16 = (_plus_15 + "/");
                                          String _plus_17 = (_plus_16 + diagram_1);
                                          String _stringBase64_2 = this.getStringBase64(_plus_17);
                                          _builder.append(_stringBase64_2, " ");
                                          _builder.append("</file>");
                                          _builder.newLineIfNotEmpty();
                                          _builder.append(" ");
                                          _builder.append("<feedback format=\"html\">");
                                          _builder.newLine();
                                          _builder.append(" ");
                                          _builder.append("<text></text>");
                                          _builder.newLine();
                                          _builder.append(" ");
                                          _builder.append("</feedback>");
                                          _builder.newLine();
                                          _builder.append(" ");
                                          _builder.append("</answer>");
                                          _builder.newLine();
                                        } else {
                                          {
                                            if ((counter_1 < (min - 1))) {
                                              _builder.append(" ");
                                              String _xblockexpression_25 = null;
                                              {
                                                counter_1++;
                                                _xblockexpression_25 = "";
                                              }
                                              _builder.append(_xblockexpression_25, " ");
                                              _builder.newLineIfNotEmpty();
                                              _builder.append(" ");
                                              _builder.append("<!--");
                                              _builder.append(s = false, " ");
                                              _builder.append("-->");
                                              _builder.newLineIfNotEmpty();
                                              {
                                                List<String> _get_4 = this.solutionsMap.get(exercise);
                                                for(final String sol_1 : _get_4) {
                                                  {
                                                    if ((((diagram_1.startsWith((sol_1 + "/")) || diagram_1.startsWith((sol_1 + "\\"))) || diagram_1.contains((((sol_1 + "/") + answersClass_1.getName()) + "_"))) || diagram_1.contains((((sol_1 + "\\") + answersClass_1.getName()) + "_")))) {
                                                      _builder.append(" ");
                                                      String _xblockexpression_26 = null;
                                                      {
                                                        s = true;
                                                        _xblockexpression_26 = "";
                                                      }
                                                      _builder.append(_xblockexpression_26, " ");
                                                      _builder.newLineIfNotEmpty();
                                                    }
                                                  }
                                                }
                                              }
                                              {
                                                if ((s || diagram_1.equals(solution_1))) {
                                                  {
                                                    if (((100 % solutions) == 0)) {
                                                      _builder.append("<answer fraction=\"");
                                                      _builder.append((100 / solutions));
                                                      _builder.append("\" format=\"html\">");
                                                      _builder.newLineIfNotEmpty();
                                                    } else {
                                                      _builder.append("<!--");
                                                      NumberFormat _numberInstance_1 = NumberFormat.getNumberInstance(Locale.ENGLISH);
                                                      DecimalFormat formatter_1 = ((DecimalFormat) _numberInstance_1);
                                                      _builder.append("-->");
                                                      _builder.newLineIfNotEmpty();
                                                      String _xblockexpression_27 = null;
                                                      {
                                                        formatter_1.applyPattern("###.#####");
                                                        _xblockexpression_27 = "";
                                                      }
                                                      _builder.append(_xblockexpression_27);
                                                      _builder.newLineIfNotEmpty();
                                                      _builder.append("<answer fraction=\"");
                                                      String _format_1 = formatter_1.format(fraction);
                                                      _builder.append(_format_1);
                                                      _builder.append("\" format=\"html\">");
                                                      _builder.newLineIfNotEmpty();
                                                    }
                                                  }
                                                } else {
                                                  _builder.append("<answer fraction=\"0\" format=\"html\">");
                                                  _builder.newLine();
                                                }
                                              }
                                              _builder.append(" ");
                                              _builder.append("<!--");
                                              String size_1 = "60";
                                              _builder.append("-->");
                                              _builder.newLineIfNotEmpty();
                                              _builder.append(" ");
                                              _builder.append("<text><![CDATA[<p><img src=\"@@PLUGINFILE@@/exercise_");
                                              _builder.append(uuid_1, " ");
                                              _builder.append(".png\" alt=\"\" width=\"");
                                              _builder.append(size_1, " ");
                                              _builder.append("%\" height=\"");
                                              _builder.append(size_1, " ");
                                              _builder.append("%\" role=\"presentation\" class=\"img-responsive atto_image_button_text-bottom\"><br></p>]]></text>");
                                              _builder.newLineIfNotEmpty();
                                              _builder.append(" ");
                                              _builder.append("<file name=\"exercise_");
                                              _builder.append(uuid_1, " ");
                                              _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                                              String _replace_12 = test_2.getSource().replace(".model", "");
                                              String _plus_18 = ("diagrams/" + _replace_12);
                                              String _plus_19 = (_plus_18 + "/");
                                              String _plus_20 = (_plus_19 + diagram_1);
                                              String _stringBase64_3 = this.getStringBase64(_plus_20);
                                              _builder.append(_stringBase64_3, " ");
                                              _builder.append("</file>");
                                              _builder.newLineIfNotEmpty();
                                              _builder.append(" ");
                                              _builder.append("<feedback format=\"html\">");
                                              _builder.newLine();
                                              _builder.append(" ");
                                              _builder.append("<text></text>");
                                              _builder.newLine();
                                              _builder.append(" ");
                                              _builder.append("</feedback>");
                                              _builder.newLine();
                                              _builder.append(" ");
                                              _builder.append("</answer>");
                                              _builder.newLine();
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          _builder.append("</question>");
                          _builder.newLine();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          Map<Test, List<AbstractMap.SimpleEntry<String, Boolean>>> mapTextOptions = new HashMap<Test, List<AbstractMap.SimpleEntry<String, Boolean>>>();
          _builder.newLineIfNotEmpty();
          {
            if ((exercise instanceof MultiChoiceEmendation)) {
              _builder.append("        ");
              int min_1 = Integer.MAX_VALUE;
              _builder.newLineIfNotEmpty();
              _builder.append("        ");
              int rndIndex = (-1);
              _builder.newLineIfNotEmpty();
              {
                EList<Test> _tests_3 = ((MultiChoiceEmendation)exercise).getTests();
                for(final Test test_3 : _tests_3) {
                  Test t = test_3;
                  _builder.newLineIfNotEmpty();
                  {
                    if (((this.options.get(exercise) != null) && (this.options.get(exercise).get(test_3) != null))) {
                      int counter_2 = 0;
                      _builder.newLineIfNotEmpty();
                      String _xblockexpression_28 = null;
                      {
                        rndIndex = ModelManager.getRandomIndex(this.options.get(exercise).get(test_3));
                        _xblockexpression_28 = "";
                      }
                      _builder.append(_xblockexpression_28);
                      _builder.newLineIfNotEmpty();
                      List<AbstractMap.SimpleEntry<String, Boolean>> textOptions = new ArrayList<AbstractMap.SimpleEntry<String, Boolean>>();
                      _builder.newLineIfNotEmpty();
                      {
                        int _size_8 = this.options.get(exercise).get(test_3).size();
                        boolean _greaterThan_8 = (_size_8 > 0);
                        if (_greaterThan_8) {
                          {
                            List<EduTestSuperGenerator.TestOption> _get_5 = this.options.get(exercise).get(test_3).get(rndIndex);
                            for(final EduTestSuperGenerator.TestOption opt : _get_5) {
                              {
                                Set<String> _keySet_1 = opt.text.keySet();
                                for(final String key : _keySet_1) {
                                  {
                                    List<String> _get_6 = opt.text.get(key);
                                    for(final String text : _get_6) {
                                      boolean found = false;
                                      _builder.newLineIfNotEmpty();
                                      {
                                        for(final AbstractMap.SimpleEntry<String, Boolean> entry : textOptions) {
                                          {
                                            boolean _equals_5 = entry.getKey().equals(text);
                                            if (_equals_5) {
                                              String _xblockexpression_29 = null;
                                              {
                                                found = true;
                                                _xblockexpression_29 = "";
                                              }
                                              _builder.append(_xblockexpression_29);
                                              _builder.newLineIfNotEmpty();
                                            }
                                          }
                                        }
                                      }
                                      {
                                        if ((found == false)) {
                                          String _xblockexpression_30 = null;
                                          {
                                            counter_2++;
                                            _xblockexpression_30 = "";
                                          }
                                          _builder.append(_xblockexpression_30);
                                          _builder.newLineIfNotEmpty();
                                          String _xblockexpression_31 = null;
                                          {
                                            AbstractMap.SimpleEntry<String, Boolean> _simpleEntry = new AbstractMap.SimpleEntry<String, Boolean>(text, Boolean.valueOf(false));
                                            textOptions.add(_simpleEntry);
                                            _xblockexpression_31 = "";
                                          }
                                          _builder.append(_xblockexpression_31);
                                          _builder.newLineIfNotEmpty();
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          String _xblockexpression_32 = null;
                          {
                            mapTextOptions.put(test_3, textOptions);
                            _xblockexpression_32 = "";
                          }
                          _builder.append(_xblockexpression_32);
                          _builder.newLineIfNotEmpty();
                          {
                            if ((min_1 > counter_2)) {
                              String _xblockexpression_33 = null;
                              {
                                min_1 = counter_2;
                                _xblockexpression_33 = "";
                              }
                              _builder.append(_xblockexpression_33);
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                    }
                  }
                  _builder.append("       \t");
                  _builder.append("<!-- ");
                  EClass answersClass_2 = null;
                  _builder.append("-->");
                  _builder.newLineIfNotEmpty();
                  _builder.append("       \t");
                  _builder.append("<!-- ");
                  EClass statementClass_2 = null;
                  _builder.append("-->");
                  _builder.newLineIfNotEmpty();
                  {
                    for(final EClass root_2 : this.roots) {
                      {
                        EClass _answers_2 = ((MultiChoiceEmendation)exercise).getConfig().getAnswers();
                        boolean _tripleNotEquals_7 = (_answers_2 != null);
                        if (_tripleNotEquals_7) {
                          {
                            boolean _equals_6 = ((MultiChoiceEmendation)exercise).getConfig().getAnswers().getName().equals(root_2.getName());
                            if (_equals_6) {
                              String _xblockexpression_34 = null;
                              {
                                answersClass_2 = root_2;
                                _xblockexpression_34 = "";
                              }
                              _builder.append(_xblockexpression_34);
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                      {
                        EClass _statement_2 = ((MultiChoiceEmendation)exercise).getConfig().getStatement();
                        boolean _tripleNotEquals_8 = (_statement_2 != null);
                        if (_tripleNotEquals_8) {
                          {
                            boolean _equals_7 = ((MultiChoiceEmendation)exercise).getConfig().getStatement().getName().equals(root_2.getName());
                            if (_equals_7) {
                              String _xblockexpression_35 = null;
                              {
                                statementClass_2 = root_2;
                                _xblockexpression_35 = "";
                              }
                              _builder.append(_xblockexpression_35);
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                    }
                  }
                  {
                    if ((answersClass_2 == null)) {
                      String _xblockexpression_36 = null;
                      {
                        int _size_9 = this.roots.size();
                        int _minus = (_size_9 - 1);
                        answersClass_2 = this.roots.get(_minus);
                        _xblockexpression_36 = "";
                      }
                      _builder.append(_xblockexpression_36);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                  {
                    if ((statementClass_2 == null)) {
                      {
                        int _size_9 = this.roots.size();
                        boolean _greaterThan_9 = (_size_9 > 1);
                        if (_greaterThan_9) {
                          String _xblockexpression_37 = null;
                          {
                            statementClass_2 = this.roots.get(1);
                            _xblockexpression_37 = "";
                          }
                          _builder.append(_xblockexpression_37);
                          _builder.newLineIfNotEmpty();
                        } else {
                          String _xblockexpression_38 = null;
                          {
                            statementClass_2 = this.roots.get(0);
                            _xblockexpression_38 = "";
                          }
                          _builder.append(_xblockexpression_38);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                  {
                    if (((this.options.get(exercise) != null) && (this.options.get(exercise).get(t) != null))) {
                      _builder.append("<!--");
                      List<String> diagrams = new ArrayList<String>();
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      _builder.append("<!--");
                      List<EduTestSuperGenerator.TestOption> answersOptions = new ArrayList<EduTestSuperGenerator.TestOption>();
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      {
                        List<List<EduTestSuperGenerator.TestOption>> _get_7 = this.options.get(exercise).get(t);
                        boolean _tripleNotEquals_9 = (_get_7 != null);
                        if (_tripleNotEquals_9) {
                          {
                            int _size_10 = this.options.get(exercise).get(t).size();
                            boolean _greaterThan_10 = (_size_10 > 0);
                            if (_greaterThan_10) {
                              {
                                List<EduTestSuperGenerator.TestOption> _get_8 = this.options.get(exercise).get(t).get(rndIndex);
                                for(final EduTestSuperGenerator.TestOption opt_1 : _get_8) {
                                  {
                                    int _size_11 = opt_1.text.size();
                                    boolean _greaterThan_11 = (_size_11 > 0);
                                    if (_greaterThan_11) {
                                      {
                                        if ((opt_1.solution == true)) {
                                          _builder.append("<!--");
                                          boolean _add = diagrams.add(opt_1.path);
                                          _builder.append(_add);
                                          _builder.append("-->");
                                          _builder.newLineIfNotEmpty();
                                          _builder.append("<!--");
                                          boolean _add_1 = answersOptions.add(opt_1);
                                          _builder.append(_add_1);
                                          _builder.append("-->");
                                          _builder.newLineIfNotEmpty();
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      {
                        int _size_12 = diagrams.size();
                        boolean _greaterThan_12 = (_size_12 > 0);
                        if (_greaterThan_12) {
                          _builder.append("<!--");
                          int rndSolution = (-1);
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          String _xblockexpression_39 = null;
                          {
                            rndSolution = ModelManager.getRandomIndex(diagrams);
                            _xblockexpression_39 = "";
                          }
                          _builder.append(_xblockexpression_39);
                          _builder.newLineIfNotEmpty();
                          _builder.append("            ");
                          _builder.append("<!--");
                          String diagram_2 = diagrams.get(rndSolution);
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          {
                            int _length = diagram_2.length();
                            boolean _greaterThan_13 = (_length > 0);
                            if (_greaterThan_13) {
                              _builder.append("<!--");
                              int _indexOf = diagram_2.indexOf("/data/out/");
                              int _length_1 = "/data/out/".length();
                              int _plus_21 = (_indexOf + _length_1);
                              String data = diagram_2.substring(_plus_21, diagram_2.lastIndexOf("/"));
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              _builder.append("<!--");
                              String model = data.substring(0, data.lastIndexOf("/"));
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              _builder.append("<!--");
                              int _indexOf_1 = data.indexOf((model + "/"));
                              int _length_2 = (model + "/").length();
                              int _plus_22 = (_indexOf_1 + _length_2);
                              String mutOperator = data.substring(_plus_22, data.length());
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              _builder.append("<!--");
                              String _name = statementClass_2.getName();
                              String _plus_23 = ((((("diagrams/" + model) + "/") + mutOperator) + "/") + _name);
                              String _plus_24 = (_plus_23 + "_");
                              int _lastIndexOf = diagram_2.lastIndexOf("/");
                              int _plus_25 = (_lastIndexOf + 1);
                              String _substring = diagram_2.substring(_plus_25, diagram_2.length());
                              String _plus_26 = (_plus_24 + _substring);
                              _builder.append(diagram_2 = _plus_26);
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              _builder.append("           ");
                              _builder.append("<!--");
                              File file_2 = new File(((this.projectPath + "/src-gen/html/") + diagram_2));
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              {
                                if ((file_2.isFile() && file_2.exists())) {
                                  _builder.append("<question type=\"multichoice\">");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<name>");
                                  _builder.newLine();
                                  _builder.append("     ");
                                  _builder.append("<text>Question ");
                                  int _plusPlus_1 = i++;
                                  _builder.append(_plusPlus_1, "     ");
                                  _builder.append("</text>");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("  ");
                                  _builder.append("</name>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<questiontext format=\"html\">");
                                  _builder.newLine();
                                  _builder.append("    ");
                                  _builder.append("<!-- ");
                                  UUID uuidStatement = UUID.randomUUID();
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("    ");
                                  _builder.append("<!-- ");
                                  UUID uuidAnswers = UUID.randomUUID();
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  {
                                    if (((statementClass_2 != null) && (answersClass_2 == null))) {
                                      _builder.append("<text><![CDATA[<p>");
                                      String _replace_13 = t.getQuestion().replace("\"", "\'");
                                      _builder.append(_replace_13);
                                      _builder.append("<br><br><img src=\"@@PLUGINFILE@@/exercise_");
                                      _builder.append(uuidStatement);
                                      _builder.append(".png\" alt=\"multiple choice\" width=\"20%\" height=\"20%\" class=\"img-responsive atto_image_button_text-bottom\"><br></p>]]></text>");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("            ");
                                      _builder.append("<file name=\"exercise_");
                                      _builder.append(uuidStatement, "            ");
                                      _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                                      String _stringBase64_4 = this.getStringBase64(diagram_2);
                                      _builder.append(_stringBase64_4, "            ");
                                      _builder.append("</file>");
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                  {
                                    if (((statementClass_2 != null) && (answersClass_2 != null))) {
                                      _builder.append("<text><![CDATA[<p>");
                                      String _replace_14 = t.getQuestion().replace("\"", "\'");
                                      _builder.append(_replace_14);
                                      _builder.append("<br><br><img src=\"@@PLUGINFILE@@/exercise_");
                                      _builder.append(uuidStatement);
                                      _builder.append(".png\" alt=\"multiple choice\" width=\"20%\" height=\"20%\" class=\"img-responsive atto_image_button_text-bottom\"><br><br><img src=\"@@PLUGINFILE@@/exercise_");
                                      _builder.append(uuidAnswers);
                                      _builder.append(".png\" alt=\"multiple choice\" width=\"20%\" height=\"20%\" class=\"img-responsive atto_image_button_text-bottom\"><br></p>]]></text>");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("            ");
                                      _builder.append("<file name=\"exercise_");
                                      _builder.append(uuidStatement, "            ");
                                      _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                                      String _stringBase64_5 = this.getStringBase64(diagram_2);
                                      _builder.append(_stringBase64_5, "            ");
                                      _builder.append("</file>");
                                      _builder.newLineIfNotEmpty();
                                      String _xblockexpression_40 = null;
                                      {
                                        String _get_9 = diagrams.get(rndSolution);
                                        int _indexOf_2 = diagrams.get(rndSolution).indexOf("/data/out/");
                                        int _length_3 = "/data/out/".length();
                                        int _plus_27 = (_indexOf_2 + _length_3);
                                        data = _get_9.substring(_plus_27, diagrams.get(rndSolution).lastIndexOf("/"));
                                        _xblockexpression_40 = "";
                                      }
                                      _builder.append(_xblockexpression_40);
                                      _builder.newLineIfNotEmpty();
                                      _builder.append(model = data.substring(0, data.lastIndexOf("/")));
                                      _builder.newLineIfNotEmpty();
                                      String _xblockexpression_41 = null;
                                      {
                                        int _indexOf_2 = data.indexOf((model + "/"));
                                        int _length_3 = (model + "/").length();
                                        int _plus_27 = (_indexOf_2 + _length_3);
                                        mutOperator = data.substring(_plus_27, data.length());
                                        _xblockexpression_41 = "";
                                      }
                                      _builder.append(_xblockexpression_41);
                                      _builder.newLineIfNotEmpty();
                                      String _xblockexpression_42 = null;
                                      {
                                        String _name_1 = answersClass_2.getName();
                                        String _plus_27 = ((((("diagrams/" + model) + "/") + mutOperator) + "/") + _name_1);
                                        String _plus_28 = (_plus_27 + "_");
                                        String _get_9 = diagrams.get(rndSolution);
                                        int _lastIndexOf_1 = diagrams.get(rndSolution).lastIndexOf("/");
                                        int _plus_29 = (_lastIndexOf_1 + 1);
                                        String _substring_1 = _get_9.substring(_plus_29, diagrams.get(rndSolution).length());
                                        String _plus_30 = (_plus_28 + _substring_1);
                                        diagram_2 = _plus_30;
                                        _xblockexpression_42 = "";
                                      }
                                      _builder.append(_xblockexpression_42);
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("            ");
                                      File _file_2 = new File(((this.projectPath + "/src-gen/html/") + diagram_2));
                                      _builder.append(file_2 = _file_2, "            ");
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                      {
                                        if ((file_2.isFile() && file_2.exists())) {
                                          _builder.append("            ");
                                          _builder.append("<file name=\"exercise_");
                                          _builder.append(uuidAnswers, "            ");
                                          _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                                          String _stringBase64_6 = this.getStringBase64(diagram_2);
                                          _builder.append(_stringBase64_6, "            ");
                                          _builder.append("</file>");
                                          _builder.newLineIfNotEmpty();
                                        }
                                      }
                                    }
                                  }
                                  _builder.append("  ");
                                  _builder.append("</questiontext>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<generalfeedback format=\"html\">");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<text></text>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("</generalfeedback>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<defaultgrade>1.0000000</defaultgrade>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<penalty>0.3333333</penalty>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<hidden>0</hidden>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<idnumber></idnumber>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<single>false</single>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<shuffleanswers>true</shuffleanswers>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<answernumbering>abc");
                                  _builder.append("</answernumbering>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<correctfeedback format=\"html\">");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<!--<text>Respuesta correcta</text>-->");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<text>Right answer.</text>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("</correctfeedback>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<partiallycorrectfeedback format=\"html\">");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<!--<text>Respuesta parcialmente correcta.</text>-->");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<text>Partially right answer.</text>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("</partiallycorrectfeedback>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<incorrectfeedback format=\"html\">");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<!--<text>Respuesta incorrecta.</text>-->");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<text>Wrong answer.</text>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("</incorrectfeedback>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  _builder.append("<shownumcorrect/>");
                                  _builder.newLine();
                                  _builder.append("  ");
                                  int solutions_1 = 0;
                                  _builder.newLineIfNotEmpty();
                                  {
                                    List<List<EduTestSuperGenerator.TestOption>> _get_9 = this.options.get(exercise).get(t);
                                    boolean _tripleNotEquals_10 = (_get_9 != null);
                                    if (_tripleNotEquals_10) {
                                      {
                                        int _size_13 = this.options.get(exercise).get(t).size();
                                        boolean _greaterThan_14 = (_size_13 > 0);
                                        if (_greaterThan_14) {
                                          {
                                            for(final EduTestSuperGenerator.TestOption opt_2 : answersOptions) {
                                              _builder.append("  ");
                                              List<String> textOptions_1 = new ArrayList<String>();
                                              _builder.newLineIfNotEmpty();
                                              {
                                                int _size_14 = opt_2.text.size();
                                                boolean _greaterThan_15 = (_size_14 > 0);
                                                if (_greaterThan_15) {
                                                  {
                                                    if ((opt_2.solution == true)) {
                                                      {
                                                        Set<String> _keySet_2 = opt_2.text.keySet();
                                                        for(final String key_1 : _keySet_2) {
                                                          {
                                                            List<String> _get_10 = opt_2.text.get(key_1);
                                                            for(final String text_1 : _get_10) {
                                                              {
                                                                boolean _contains = textOptions_1.contains(text_1);
                                                                boolean _not = (!_contains);
                                                                if (_not) {
                                                                  _builder.append("  ");
                                                                  String _xblockexpression_43 = null;
                                                                  {
                                                                    solutions_1++;
                                                                    _xblockexpression_43 = "";
                                                                  }
                                                                  _builder.append(_xblockexpression_43, "  ");
                                                                  _builder.newLineIfNotEmpty();
                                                                  _builder.append("  ");
                                                                  String _xblockexpression_44 = null;
                                                                  {
                                                                    textOptions_1.add(text_1);
                                                                    _xblockexpression_44 = "";
                                                                  }
                                                                  _builder.append(_xblockexpression_44, "  ");
                                                                  _builder.newLineIfNotEmpty();
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    } else {
                                                      {
                                                        Set<String> _keySet_3 = opt_2.text.keySet();
                                                        for(final String key_2 : _keySet_3) {
                                                          {
                                                            List<String> _get_11 = opt_2.text.get(key_2);
                                                            for(final String text_2 : _get_11) {
                                                              {
                                                                boolean _contains_1 = textOptions_1.contains(text_2);
                                                                boolean _not_1 = (!_contains_1);
                                                                if (_not_1) {
                                                                  _builder.append("  ");
                                                                  String _xblockexpression_45 = null;
                                                                  {
                                                                    textOptions_1.add(text_2);
                                                                    _xblockexpression_45 = "";
                                                                  }
                                                                  _builder.append(_xblockexpression_45, "  ");
                                                                  _builder.newLineIfNotEmpty();
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                      {
                                        int _size_15 = this.options.get(exercise).get(t).size();
                                        boolean _greaterThan_16 = (_size_15 > 0);
                                        if (_greaterThan_16) {
                                          {
                                            for(final EduTestSuperGenerator.TestOption opt_3 : answersOptions) {
                                              {
                                                if ((opt_3.solution == true)) {
                                                  {
                                                    int _size_16 = opt_3.text.size();
                                                    boolean _greaterThan_17 = (_size_16 > 0);
                                                    if (_greaterThan_17) {
                                                      {
                                                        Set<String> _keySet_4 = opt_3.text.keySet();
                                                        for(final String key_3 : _keySet_4) {
                                                          {
                                                            List<String> _get_12 = opt_3.text.get(key_3);
                                                            for(final String text_3 : _get_12) {
                                                              _builder.append("  ");
                                                              boolean found_1 = false;
                                                              _builder.newLineIfNotEmpty();
                                                              {
                                                                List<AbstractMap.SimpleEntry<String, Boolean>> _get_13 = mapTextOptions.get(t);
                                                                for(final AbstractMap.SimpleEntry<String, Boolean> entry_1 : _get_13) {
                                                                  {
                                                                    if ((entry_1.getKey().equals(text_3) && (!(entry_1.getValue()).booleanValue()))) {
                                                                      _builder.append("  ");
                                                                      String _xblockexpression_46 = null;
                                                                      {
                                                                        found_1 = true;
                                                                        _xblockexpression_46 = "";
                                                                      }
                                                                      _builder.append(_xblockexpression_46, "  ");
                                                                      _builder.newLineIfNotEmpty();
                                                                      _builder.append("  ");
                                                                      String _xblockexpression_47 = null;
                                                                      {
                                                                        entry_1.setValue(Boolean.valueOf(true));
                                                                        _xblockexpression_47 = "";
                                                                      }
                                                                      _builder.append(_xblockexpression_47, "  ");
                                                                      _builder.newLineIfNotEmpty();
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                              {
                                                                if ((found_1 == true)) {
                                                                  _builder.append("  ");
                                                                  _builder.append("<!--");
                                                                  double fraction_1 = (100.0 / solutions_1);
                                                                  _builder.append("-->");
                                                                  _builder.newLineIfNotEmpty();
                                                                  {
                                                                    if (((100 % solutions_1) == 0)) {
                                                                      _builder.append("  ");
                                                                      _builder.append("<answer fraction=\"");
                                                                      _builder.append((100 / solutions_1), "  ");
                                                                      _builder.append("\" format=\"html\">");
                                                                      _builder.newLineIfNotEmpty();
                                                                      _builder.append("  ");
                                                                      _builder.append("<text><![CDATA[<p>");
                                                                      String _trim = text_3.trim();
                                                                      _builder.append(_trim, "  ");
                                                                      _builder.append("<br></p>]]></text>");
                                                                      _builder.newLineIfNotEmpty();
                                                                      _builder.append("  ");
                                                                      _builder.append("<feedback format=\"html\">");
                                                                      _builder.newLine();
                                                                      _builder.append("  ");
                                                                      _builder.append("<text></text>");
                                                                      _builder.newLine();
                                                                      _builder.append("  ");
                                                                      _builder.append("</feedback>");
                                                                      _builder.newLine();
                                                                      _builder.append("  ");
                                                                      _builder.append("</answer>");
                                                                      _builder.newLine();
                                                                    } else {
                                                                      _builder.append("  ");
                                                                      _builder.append("<!--");
                                                                      NumberFormat _numberInstance_2 = NumberFormat.getNumberInstance(Locale.ENGLISH);
                                                                      DecimalFormat formatter_2 = ((DecimalFormat) _numberInstance_2);
                                                                      _builder.append("-->");
                                                                      _builder.newLineIfNotEmpty();
                                                                      _builder.append("  ");
                                                                      String _xblockexpression_48 = null;
                                                                      {
                                                                        formatter_2.applyPattern("###.#####");
                                                                        _xblockexpression_48 = "";
                                                                      }
                                                                      _builder.append(_xblockexpression_48, "  ");
                                                                      _builder.newLineIfNotEmpty();
                                                                      _builder.append("  ");
                                                                      _builder.append("<answer fraction=\"");
                                                                      String _format_2 = formatter_2.format(fraction_1);
                                                                      _builder.append(_format_2, "  ");
                                                                      _builder.append("\" format=\"html\">");
                                                                      _builder.newLineIfNotEmpty();
                                                                      _builder.append("  ");
                                                                      _builder.append("<text><![CDATA[<p>");
                                                                      String _trim_1 = text_3.trim();
                                                                      _builder.append(_trim_1, "  ");
                                                                      _builder.append("<br></p>]]></text>");
                                                                      _builder.newLineIfNotEmpty();
                                                                      _builder.append("  ");
                                                                      _builder.append("<feedback format=\"html\">");
                                                                      _builder.newLine();
                                                                      _builder.append("  ");
                                                                      _builder.append("<text></text>");
                                                                      _builder.newLine();
                                                                      _builder.append("  ");
                                                                      _builder.append("</feedback>");
                                                                      _builder.newLine();
                                                                      _builder.append("  ");
                                                                      _builder.append("</answer>");
                                                                      _builder.newLine();
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                      {
                                        int _size_17 = this.options.get(exercise).get(t).size();
                                        boolean _greaterThan_18 = (_size_17 > 0);
                                        if (_greaterThan_18) {
                                          {
                                            List<EduTestSuperGenerator.TestOption> _get_14 = this.options.get(exercise).get(t).get(rndIndex);
                                            for(final EduTestSuperGenerator.TestOption opt_4 : _get_14) {
                                              {
                                                if ((opt_4.solution == false)) {
                                                  _builder.append("  ");
                                                  int counter_3 = 0;
                                                  _builder.newLineIfNotEmpty();
                                                  {
                                                    int _size_18 = opt_4.text.size();
                                                    boolean _greaterThan_19 = (_size_18 > 0);
                                                    if (_greaterThan_19) {
                                                      {
                                                        Set<String> _keySet_5 = opt_4.text.keySet();
                                                        for(final String key_4 : _keySet_5) {
                                                          {
                                                            List<String> _get_15 = opt_4.text.get(key_4);
                                                            for(final String text_4 : _get_15) {
                                                              _builder.append("  ");
                                                              boolean found_2 = false;
                                                              _builder.newLineIfNotEmpty();
                                                              {
                                                                List<AbstractMap.SimpleEntry<String, Boolean>> _get_16 = mapTextOptions.get(t);
                                                                for(final AbstractMap.SimpleEntry<String, Boolean> entry_2 : _get_16) {
                                                                  {
                                                                    if ((entry_2.getKey().equals(text_4) && (!(entry_2.getValue()).booleanValue()))) {
                                                                      _builder.append("  ");
                                                                      String _xblockexpression_49 = null;
                                                                      {
                                                                        found_2 = true;
                                                                        _xblockexpression_49 = "";
                                                                      }
                                                                      _builder.append(_xblockexpression_49, "  ");
                                                                      _builder.newLineIfNotEmpty();
                                                                      _builder.append("  ");
                                                                      String _xblockexpression_50 = null;
                                                                      {
                                                                        entry_2.setValue(Boolean.valueOf(true));
                                                                        _xblockexpression_50 = "";
                                                                      }
                                                                      _builder.append(_xblockexpression_50, "  ");
                                                                      _builder.newLineIfNotEmpty();
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                              {
                                                                if ((found_2 == true)) {
                                                                  {
                                                                    if ((counter_3 < ((min_1 - solutions_1) + 1))) {
                                                                      _builder.append("  ");
                                                                      _builder.append("<answer fraction=\"0\" format=\"html\">");
                                                                      _builder.newLine();
                                                                      _builder.append("  ");
                                                                      _builder.append("<text><![CDATA[<p>");
                                                                      String _trim_2 = text_4.trim();
                                                                      _builder.append(_trim_2, "  ");
                                                                      _builder.append("<br></p>]]></text>");
                                                                      _builder.newLineIfNotEmpty();
                                                                      _builder.append("  ");
                                                                      _builder.append("<feedback format=\"html\">");
                                                                      _builder.newLine();
                                                                      _builder.append("  ");
                                                                      _builder.append("<text></text>");
                                                                      _builder.newLine();
                                                                      _builder.append("  ");
                                                                      _builder.append("</feedback>");
                                                                      _builder.newLine();
                                                                      _builder.append("  ");
                                                                      _builder.append("</answer>");
                                                                      _builder.newLine();
                                                                      _builder.append("  ");
                                                                      String _xblockexpression_51 = null;
                                                                      {
                                                                        counter_3++;
                                                                        _xblockexpression_51 = "";
                                                                      }
                                                                      _builder.append(_xblockexpression_51, "  ");
                                                                      _builder.newLineIfNotEmpty();
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                  _builder.append("</question>");
                                  _builder.newLine();
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          {
            if ((exercise instanceof MatchPairs)) {
              _builder.append("        ");
              int min_2 = Integer.MAX_VALUE;
              _builder.newLineIfNotEmpty();
              _builder.append("        ");
              int index = 0;
              _builder.newLineIfNotEmpty();
              _builder.append("        ");
              int max = Integer.MIN_VALUE;
              _builder.newLineIfNotEmpty();
              {
                EList<Test> _tests_4 = ((MatchPairs)exercise).getTests();
                for(final Test test_4 : _tests_4) {
                  {
                    if (((this.options.get(exercise) != null) && (this.options.get(exercise).get(test_4) != null))) {
                      List<String> textOptions_2 = new ArrayList<String>();
                      _builder.newLineIfNotEmpty();
                      int k = 0;
                      _builder.newLineIfNotEmpty();
                      int counter_4 = 0;
                      _builder.newLineIfNotEmpty();
                      int rndIndex_1 = ModelManager.getRandomIndex(this.options.get(exercise).get(test_4));
                      _builder.newLineIfNotEmpty();
                      {
                        int _size_19 = this.options.get(exercise).get(test_4).size();
                        boolean _greaterThan_20 = (_size_19 > 0);
                        if (_greaterThan_20) {
                          {
                            List<EduTestSuperGenerator.TestOption> _get_17 = this.options.get(exercise).get(test_4).get(rndIndex_1);
                            for(final EduTestSuperGenerator.TestOption opt_5 : _get_17) {
                              {
                                Set<String> _keySet_6 = opt_5.text.keySet();
                                for(final String key_5 : _keySet_6) {
                                  {
                                    List<String> _get_18 = opt_5.text.get(key_5);
                                    for(final String text_5 : _get_18) {
                                      {
                                        boolean _contains_2 = textOptions_2.contains(text_5);
                                        boolean _not_2 = (!_contains_2);
                                        if (_not_2) {
                                          String _xblockexpression_52 = null;
                                          {
                                            counter_4++;
                                            _xblockexpression_52 = "";
                                          }
                                          _builder.append(_xblockexpression_52);
                                          _builder.newLineIfNotEmpty();
                                          String _xblockexpression_53 = null;
                                          {
                                            textOptions_2.add(text_5);
                                            _xblockexpression_53 = "";
                                          }
                                          _builder.append(_xblockexpression_53);
                                          _builder.newLineIfNotEmpty();
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          {
                            if ((counter_4 > max)) {
                              String _xblockexpression_54 = null;
                              {
                                max = counter_4;
                                _xblockexpression_54 = "";
                              }
                              _builder.append(_xblockexpression_54);
                              _builder.newLineIfNotEmpty();
                              String _xblockexpression_55 = null;
                              {
                                index = k;
                                _xblockexpression_55 = "";
                              }
                              _builder.append(_xblockexpression_55);
                              _builder.newLineIfNotEmpty();
                            }
                          }
                          String _xblockexpression_56 = null;
                          {
                            k++;
                            _xblockexpression_56 = "";
                          }
                          _builder.append(_xblockexpression_56);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              _builder.append("        ");
              _builder.append("<!--");
              Map<Test, Map<EduTestSuperGenerator.TestOption, String>> mapPairOptions = new HashMap<Test, Map<EduTestSuperGenerator.TestOption, String>>();
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              {
                EList<Test> _tests_5 = ((MatchPairs)exercise).getTests();
                for(final Test test_5 : _tests_5) {
                  {
                    if (((this.options.get(exercise) != null) && (this.options.get(exercise).get(test_5) != null))) {
                      int k_1 = 0;
                      _builder.newLineIfNotEmpty();
                      int counter_5 = 0;
                      _builder.newLineIfNotEmpty();
                      _builder.append("<!--");
                      Map<EduTestSuperGenerator.TestOption, String> mapOptions = new HashMap<EduTestSuperGenerator.TestOption, String>();
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      int rndIndex_2 = ModelManager.getRandomIndex(this.options.get(exercise).get(test_5));
                      _builder.newLineIfNotEmpty();
                      {
                        int _size_20 = this.options.get(exercise).get(test_5).size();
                        boolean _greaterThan_21 = (_size_20 > 0);
                        if (_greaterThan_21) {
                          {
                            List<EduTestSuperGenerator.TestOption> _get_19 = this.options.get(exercise).get(test_5).get(rndIndex_2);
                            for(final EduTestSuperGenerator.TestOption opt_6 : _get_19) {
                              List<String> textOptions_3 = new ArrayList<String>();
                              _builder.newLineIfNotEmpty();
                              {
                                Set<String> _keySet_7 = opt_6.text.keySet();
                                for(final String key_6 : _keySet_7) {
                                  _builder.append("<!--");
                                  String text_6 = opt_6.text.get(key_6).get(0);
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  {
                                    boolean _contains_3 = textOptions_3.contains(text_6);
                                    boolean _not_3 = (!_contains_3);
                                    if (_not_3) {
                                      String _xblockexpression_57 = null;
                                      {
                                        counter_5++;
                                        _xblockexpression_57 = "";
                                      }
                                      _builder.append(_xblockexpression_57);
                                      _builder.newLineIfNotEmpty();
                                      String _xblockexpression_58 = null;
                                      {
                                        textOptions_3.add(text_6);
                                        _xblockexpression_58 = "";
                                      }
                                      _builder.append(_xblockexpression_58);
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                }
                              }
                              String pairOptions = "";
                              _builder.newLineIfNotEmpty();
                              {
                                for(final String textOption : textOptions_3) {
                                  _builder.append("<!--");
                                  String _pairOptions = pairOptions;
                                  String _trim_3 = textOption.trim();
                                  String _plus_27 = (_trim_3 + ".<br>");
                                  String _plus_28 = pairOptions = (_pairOptions + _plus_27);
                                  _builder.append(_plus_28);
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                }
                              }
                              _builder.append(mapOptions.put(opt_6, pairOptions));
                              _builder.newLineIfNotEmpty();
                            }
                          }
                          _builder.append(mapPairOptions.put(test_5, mapOptions));
                          _builder.newLineIfNotEmpty();
                          {
                            if ((min_2 > counter_5)) {
                              String _xblockexpression_59 = null;
                              {
                                min_2 = counter_5;
                                _xblockexpression_59 = "";
                              }
                              _builder.append(_xblockexpression_59);
                              _builder.newLineIfNotEmpty();
                            }
                          }
                          String _xblockexpression_60 = null;
                          {
                            k_1++;
                            _xblockexpression_60 = "";
                          }
                          _builder.append(_xblockexpression_60);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              _builder.append("       \t");
              _builder.append("<!-- ");
              EClass answersClass_3 = null;
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              _builder.append("       \t");
              _builder.append("<!-- ");
              EClass statementClass_3 = null;
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              {
                for(final EClass root_3 : this.roots) {
                  {
                    EClass _answers_3 = ((MatchPairs)exercise).getConfig().getAnswers();
                    boolean _tripleNotEquals_11 = (_answers_3 != null);
                    if (_tripleNotEquals_11) {
                      {
                        boolean _equals_8 = ((MatchPairs)exercise).getConfig().getAnswers().getName().equals(root_3.getName());
                        if (_equals_8) {
                          String _xblockexpression_61 = null;
                          {
                            answersClass_3 = root_3;
                            _xblockexpression_61 = "";
                          }
                          _builder.append(_xblockexpression_61);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                  {
                    EClass _statement_3 = ((MatchPairs)exercise).getConfig().getStatement();
                    boolean _tripleNotEquals_12 = (_statement_3 != null);
                    if (_tripleNotEquals_12) {
                      {
                        boolean _equals_9 = ((MatchPairs)exercise).getConfig().getStatement().getName().equals(root_3.getName());
                        if (_equals_9) {
                          String _xblockexpression_62 = null;
                          {
                            statementClass_3 = root_3;
                            _xblockexpression_62 = "";
                          }
                          _builder.append(_xblockexpression_62);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              {
                if ((answersClass_3 == null)) {
                  String _xblockexpression_63 = null;
                  {
                    int _size_21 = this.roots.size();
                    int _minus = (_size_21 - 1);
                    answersClass_3 = this.roots.get(_minus);
                    _xblockexpression_63 = "";
                  }
                  _builder.append(_xblockexpression_63);
                  _builder.newLineIfNotEmpty();
                }
              }
              {
                if ((statementClass_3 == null)) {
                  {
                    int _size_21 = this.roots.size();
                    boolean _greaterThan_22 = (_size_21 > 1);
                    if (_greaterThan_22) {
                      String _xblockexpression_64 = null;
                      {
                        statementClass_3 = this.roots.get(1);
                        _xblockexpression_64 = "";
                      }
                      _builder.append(_xblockexpression_64);
                      _builder.newLineIfNotEmpty();
                    } else {
                      String _xblockexpression_65 = null;
                      {
                        statementClass_3 = this.roots.get(0);
                        _xblockexpression_65 = "";
                      }
                      _builder.append(_xblockexpression_65);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              _builder.append("        ");
              int k_2 = 0;
              _builder.newLineIfNotEmpty();
              {
                EList<Test> _tests_6 = ((MatchPairs)exercise).getTests();
                for(final Test test_6 : _tests_6) {
                  _builder.append("        ");
                  _builder.append("<!--");
                  EduTestSuperGenerator.TestOption opt_7 = null;
                  _builder.append("-->");
                  _builder.newLineIfNotEmpty();
                  _builder.append("        ");
                  int rndIndex_3 = ModelManager.getRandomIndex(this.options.get(exercise).get(test_6));
                  _builder.newLineIfNotEmpty();
                  {
                    int _size_22 = this.options.get(exercise).get(test_6).size();
                    boolean _greaterThan_23 = (_size_22 > 0);
                    if (_greaterThan_23) {
                      {
                        if (((this.options.get(exercise).get(test_6) != null) && (this.options.get(exercise).get(test_6).get(rndIndex_3).size() > index))) {
                          _builder.append("        ");
                          _builder.append("<!--");
                          _builder.append(opt_7 = this.options.get(exercise).get(test_6).get(rndIndex_3).get(index), "        ");
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                      {
                        if ((opt_7 != null)) {
                          _builder.append("        ");
                          _builder.append("<!--");
                          String seed = "";
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("        ");
                          _builder.append("<!--");
                          _builder.append(seed = opt_7.path, "        ");
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("        ");
                          int _lastIndexOf_1 = seed.lastIndexOf("/");
                          int _plus_29 = (_lastIndexOf_1 + 1);
                          String _substring_1 = seed.substring(0, _plus_29);
                          String _name_1 = answersClass_3.getName();
                          String _plus_30 = (_substring_1 + _name_1);
                          String _plus_31 = (_plus_30 + "_");
                          int _lastIndexOf_2 = seed.lastIndexOf("/");
                          int _plus_32 = (_lastIndexOf_2 + 1);
                          String _substring_2 = seed.substring(_plus_32, seed.length());
                          String _plus_33 = (_plus_31 + _substring_2);
                          _builder.append(seed = _plus_33, "        ");
                          _builder.newLineIfNotEmpty();
                          _builder.append("        ");
                          _builder.append("<!--");
                          File file_3 = new File(((this.projectPath + "/src-gen/html/") + seed));
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          {
                            if ((file_3.isFile() && file_3.exists())) {
                              _builder.append("        ");
                              _builder.append("<question type=\"matching\">");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<name>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("     ");
                              _builder.append("<text>Question ");
                              int _plusPlus_2 = i++;
                              _builder.append(_plusPlus_2, "             ");
                              _builder.append("</text>");
                              _builder.newLineIfNotEmpty();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("</name>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<questiontext format=\"html\">");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<!--");
                              String question = test_6.getQuestion().replace("\"", "\'");
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<!-- ");
                              UUID uuid_2 = UUID.randomUUID();
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<text><![CDATA[<p>");
                              String _trim_4 = question.trim();
                              _builder.append(_trim_4, "          ");
                              _builder.append("<br><img src=\"@@PLUGINFILE@@/exercise_");
                              _builder.append(uuid_2, "          ");
                              _builder.append(".png\" alt=\"\" width=\"20%\" height=\"20%\" role=\"presentation\" class=\"img-responsive atto_image_button_text-bottom\"><br></p>]]></text>");
                              _builder.newLineIfNotEmpty();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<!--<text><![CDATA[<p>Empareja cada uno de los enunciados de la izquierda con la opci&#243;n correcta de la derecha<br><img src=\"@@PLUGINFILE@@/exercise_");
                              _builder.append(uuid_2, "          ");
                              _builder.append(".png\" alt=\"\" width=\"20%\" height=\"20%\" role=\"presentation\" class=\"img-responsive atto_image_button_text-bottom\"><br></p>]]></text>-->");
                              _builder.newLineIfNotEmpty();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<file name=\"exercise_");
                              _builder.append(uuid_2, "          ");
                              _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                              String _stringBase64_7 = this.getStringBase64(seed);
                              _builder.append(_stringBase64_7, "          ");
                              _builder.append("</file>");
                              _builder.newLineIfNotEmpty();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("</questiontext>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<generalfeedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<text></text>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("</generalfeedback>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<defaultgrade>1.0000000</defaultgrade>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<penalty>0.3333333</penalty>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<hidden>0</hidden>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<idnumber></idnumber>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<shuffleanswers>true</shuffleanswers>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<correctfeedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<!--<text>Respuesta correcta</text>-->");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<text>Right answer.</text>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("</correctfeedback>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<partiallycorrectfeedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<!--<text>Respuesta parcialmente correcta.</text>-->");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<text>Partially right answer.</text>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("</partiallycorrectfeedback>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<incorrectfeedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<!--<text>Respuesta incorrecta.</text>-->");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<text>Wrong answer.</text>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("</incorrectfeedback>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<shownumcorrect/>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<!--");
                              TreeMap<Integer, AbstractMap.SimpleEntry<String, String>> entries = new TreeMap<Integer, AbstractMap.SimpleEntry<String, String>>();
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<!--");
                              int keyCounter = 0;
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              {
                                List<EduTestSuperGenerator.TestOption> _get_20 = this.options.get(exercise).get(test_6).get(rndIndex_3);
                                for(final EduTestSuperGenerator.TestOption op : _get_20) {
                                  _builder.append("        ");
                                  _builder.append("  ");
                                  String key_7 = this.getText(((MatchPairs) exercise).getConfig().getIdentifier(), op.entry.getKey().getURI().toFileString(), resource);
                                  _builder.newLineIfNotEmpty();
                                  {
                                    int _length_3 = key_7.length();
                                    boolean _lessEqualsThan = (_length_3 <= 127);
                                    if (_lessEqualsThan) {
                                      _builder.append("        ");
                                      _builder.append("  ");
                                      boolean found_3 = false;
                                      _builder.newLineIfNotEmpty();
                                      {
                                        Set<Integer> _keySet_8 = entries.keySet();
                                        for(final int entryKey : _keySet_8) {
                                          _builder.append("        ");
                                          _builder.append("  ");
                                          AbstractMap.SimpleEntry<String, String> entry_3 = entries.get(Integer.valueOf(entryKey));
                                          _builder.newLineIfNotEmpty();
                                          {
                                            boolean _equals_10 = entry_3.getKey().equals(key_7);
                                            if (_equals_10) {
                                              _builder.append("        ");
                                              _builder.append("  ");
                                              String _xblockexpression_66 = null;
                                              {
                                                found_3 = true;
                                                _xblockexpression_66 = "";
                                              }
                                              _builder.append(_xblockexpression_66, "          ");
                                              _builder.newLineIfNotEmpty();
                                            }
                                          }
                                        }
                                      }
                                      {
                                        if ((found_3 == false)) {
                                          _builder.append("        ");
                                          _builder.append("  ");
                                          String _trim_5 = mapPairOptions.get(test_6).get(op).trim();
                                          AbstractMap.SimpleEntry<String, String> entry_4 = new AbstractMap.SimpleEntry<String, String>(key_7, _trim_5);
                                          _builder.newLineIfNotEmpty();
                                          _builder.append("        ");
                                          _builder.append("  ");
                                          String _xblockexpression_67 = null;
                                          {
                                            int _plusPlus_3 = keyCounter++;
                                            entries.put(Integer.valueOf(_plusPlus_3), entry_4);
                                            _xblockexpression_67 = "";
                                          }
                                          _builder.append(_xblockexpression_67, "          ");
                                          _builder.newLineIfNotEmpty();
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              _builder.append("        ");
                              _builder.append("  ");
                              int counter_6 = 0;
                              _builder.newLineIfNotEmpty();
                              {
                                Set<Integer> _keySet_9 = entries.keySet();
                                for(final int key_8 : _keySet_9) {
                                  {
                                    if ((counter_6 < min_2)) {
                                      _builder.append("          ");
                                      AbstractMap.SimpleEntry<String, String> entry_5 = entries.get(Integer.valueOf(key_8));
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("          ");
                                      _builder.append("<subquestion format=\"html\">");
                                      _builder.newLine();
                                      _builder.append("<text><![CDATA[<p>");
                                      String _key = entry_5.getKey();
                                      _builder.append(_key);
                                      _builder.append("<br></p>]]></text>");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("          ");
                                      _builder.append("<answer>");
                                      _builder.newLine();
                                      _builder.append("          ");
                                      _builder.append("<text><![CDATA[<p>");
                                      String _value = entry_5.getValue();
                                      _builder.append(_value, "          ");
                                      _builder.append("<br></p>]]></text>");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("          ");
                                      _builder.append("</answer>");
                                      _builder.newLine();
                                      _builder.append("          ");
                                      _builder.append("</subquestion>");
                                      _builder.newLine();
                                      _builder.append("          ");
                                      String _xblockexpression_68 = null;
                                      {
                                        counter_6++;
                                        _xblockexpression_68 = "";
                                      }
                                      _builder.append(_xblockexpression_68, "          ");
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                }
                              }
                            }
                          }
                          _builder.append("        ");
                          _builder.append("</question>");
                          _builder.newLine();
                          _builder.append("        ");
                          String _xblockexpression_69 = null;
                          {
                            k_2++;
                            _xblockexpression_69 = "";
                          }
                          _builder.append(_xblockexpression_69, "        ");
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          {
            if ((exercise instanceof MissingWords)) {
              {
                EList<Test> _tests_7 = ((MissingWords)exercise).getTests();
                for(final Test test_7 : _tests_7) {
                  _builder.append("        ");
                  _builder.append("<!-- ");
                  int k_3 = 0;
                  _builder.append("-->");
                  _builder.newLineIfNotEmpty();
                  _builder.append("        ");
                  _builder.append("<!-- ");
                  int solution_2 = 0;
                  _builder.append("-->");
                  _builder.newLineIfNotEmpty();
                  _builder.append("        ");
                  _builder.append("<!-- ");
                  String textWithGaps = "";
                  _builder.append("-->");
                  _builder.newLineIfNotEmpty();
                  _builder.append("        ");
                  _builder.append("<!-- ");
                  EduTestSuperGenerator.TestOption op_1 = null;
                  _builder.append("-->");
                  _builder.newLineIfNotEmpty();
                  {
                    int _size_23 = this.options.get(exercise).get(test_7).size();
                    boolean _greaterThan_24 = (_size_23 > 0);
                    if (_greaterThan_24) {
                      _builder.append("        ");
                      int rndIndex_4 = ModelManager.getRandomIndex(this.options.get(exercise).get(test_7));
                      _builder.newLineIfNotEmpty();
                      {
                        List<EduTestSuperGenerator.TestOption> _get_21 = this.options.get(exercise).get(test_7).get(rndIndex_4);
                        for(final EduTestSuperGenerator.TestOption opt_8 : _get_21) {
                          {
                            boolean _contains_4 = opt_8.path.contains(((MissingWords)exercise).getMarkedBlocks().get(0).getBlock().getName());
                            if (_contains_4) {
                              _builder.append("        ");
                              _builder.append("<!--");
                              _builder.append(op_1 = opt_8, "        ");
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                      _builder.append("       \t");
                      _builder.append("<!-- ");
                      EClass answersClass_4 = null;
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      _builder.append("       \t");
                      _builder.append("<!-- ");
                      EClass statementClass_4 = null;
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      {
                        for(final EClass root_4 : this.roots) {
                          {
                            EClass _answers_4 = ((MissingWords)exercise).getConfig().getAnswers();
                            boolean _tripleNotEquals_13 = (_answers_4 != null);
                            if (_tripleNotEquals_13) {
                              {
                                boolean _equals_11 = ((MissingWords)exercise).getConfig().getAnswers().getName().equals(root_4.getName());
                                if (_equals_11) {
                                  String _xblockexpression_70 = null;
                                  {
                                    answersClass_4 = root_4;
                                    _xblockexpression_70 = "";
                                  }
                                  _builder.append(_xblockexpression_70);
                                  _builder.newLineIfNotEmpty();
                                }
                              }
                            }
                          }
                          {
                            EClass _statement_4 = ((MissingWords)exercise).getConfig().getStatement();
                            boolean _tripleNotEquals_14 = (_statement_4 != null);
                            if (_tripleNotEquals_14) {
                              {
                                boolean _equals_12 = ((MissingWords)exercise).getConfig().getStatement().getName().equals(root_4.getName());
                                if (_equals_12) {
                                  String _xblockexpression_71 = null;
                                  {
                                    statementClass_4 = root_4;
                                    _xblockexpression_71 = "";
                                  }
                                  _builder.append(_xblockexpression_71);
                                  _builder.newLineIfNotEmpty();
                                }
                              }
                            }
                          }
                        }
                      }
                      {
                        if ((answersClass_4 == null)) {
                          String _xblockexpression_72 = null;
                          {
                            int _size_24 = this.roots.size();
                            int _minus = (_size_24 - 1);
                            answersClass_4 = this.roots.get(_minus);
                            _xblockexpression_72 = "";
                          }
                          _builder.append(_xblockexpression_72);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                      {
                        if ((statementClass_4 == null)) {
                          {
                            int _size_24 = this.roots.size();
                            boolean _greaterThan_25 = (_size_24 > 1);
                            if (_greaterThan_25) {
                              String _xblockexpression_73 = null;
                              {
                                statementClass_4 = this.roots.get(1);
                                _xblockexpression_73 = "";
                              }
                              _builder.append(_xblockexpression_73);
                              _builder.newLineIfNotEmpty();
                            } else {
                              String _xblockexpression_74 = null;
                              {
                                statementClass_4 = this.roots.get(0);
                                _xblockexpression_74 = "";
                              }
                              _builder.append(_xblockexpression_74);
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                      {
                        if ((op_1 != null)) {
                          _builder.append("        ");
                          _builder.append("<!-- ");
                          String diagram_3 = op_1.path;
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("        ");
                          _builder.append("<!-- ");
                          UUID uuid_3 = UUID.randomUUID();
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          {
                            if ((op_1.options != null)) {
                              {
                                Set<String> _keySet_10 = op_1.options.keySet();
                                for(final String key_9 : _keySet_10) {
                                  _builder.append("<!-- ");
                                  int tmp = k_3;
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("        ");
                                  _builder.append("<!--");
                                  String opWithGaps = "";
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  {
                                    List<String> _get_22 = op_1.text.get(key_9);
                                    for(final String text_7 : _get_22) {
                                      _builder.append("        ");
                                      _builder.append("<!--");
                                      int _plusPlus_3 = k_3++;
                                      _builder.append(_plusPlus_3, "        ");
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("        ");
                                      _builder.append("<!--");
                                      String _opWithGaps = opWithGaps;
                                      String _plus_34 = opWithGaps = (_opWithGaps + (((text_7 + "%") + Integer.valueOf(k_3)) + " "));
                                      _builder.append(_plus_34, "        ");
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                  _builder.append("        ");
                                  _builder.append("<!-- ");
                                  _builder.append(k_3 = tmp, "        ");
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("        ");
                                  _builder.append("<!-- ");
                                  List<EduTestSuperGenerator.ComparableSimpleEntry<String, AbstractMap.SimpleEntry<EClass, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry<Integer, Boolean>>>>> entries_1 = op_1.options.get(key_9);
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  {
                                    for(final EduTestSuperGenerator.ComparableSimpleEntry<String, AbstractMap.SimpleEntry<EClass, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry<Integer, Boolean>>>> entry_6 : entries_1) {
                                      _builder.append("        ");
                                      _builder.append("<!--");
                                      int _plusPlus_4 = solution_2++;
                                      _builder.append(_plusPlus_4, "        ");
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                      {
                                        Boolean _value_1 = entry_6.getValue().getValue().getValue().getValue();
                                        boolean _equals_13 = ((_value_1).booleanValue() == true);
                                        if (_equals_13) {
                                          _builder.append("        ");
                                          _builder.append("<!-- ");
                                          int _plusPlus_5 = k_3++;
                                          _builder.append(_plusPlus_5, "        ");
                                          _builder.append("-->");
                                          _builder.newLineIfNotEmpty();
                                          _builder.append("        ");
                                          _builder.append("<!-- ");
                                          _builder.append(opWithGaps = opWithGaps.replace(("%" + Integer.valueOf(k_3)), (("[[" + Integer.valueOf(solution_2)) + "]]")), "        ");
                                          _builder.append("-->");
                                          _builder.newLineIfNotEmpty();
                                        }
                                      }
                                    }
                                  }
                                  _builder.append("        ");
                                  _builder.append("<!-- ");
                                  int _plusPlus_6 = k_3++;
                                  _builder.append(_plusPlus_6, "        ");
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("        ");
                                  _builder.append("<!-- ");
                                  _builder.append(opWithGaps = opWithGaps.replace((" %" + Integer.valueOf(k_3)), ""), "        ");
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("<!-- ");
                                  String _textWithGaps = textWithGaps;
                                  String _trim_6 = opWithGaps.trim();
                                  String _plus_35 = (_trim_6 + ".<br>");
                                  String _plus_36 = textWithGaps = (_textWithGaps + _plus_35);
                                  _builder.append(_plus_36);
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                }
                              }
                              {
                                int _length_4 = diagram_3.length();
                                boolean _greaterThan_26 = (_length_4 > 0);
                                if (_greaterThan_26) {
                                  _builder.append("<!--");
                                  int _indexOf_2 = diagram_3.indexOf("/data/out/");
                                  int _length_5 = "/data/out/".length();
                                  int _plus_37 = (_indexOf_2 + _length_5);
                                  String data_1 = diagram_3.substring(_plus_37, diagram_3.lastIndexOf("/"));
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("<!--");
                                  String model_1 = data_1.substring(0, data_1.lastIndexOf("/"));
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("<!--");
                                  int _indexOf_3 = data_1.indexOf((model_1 + "/"));
                                  int _length_6 = (model_1 + "/").length();
                                  int _plus_38 = (_indexOf_3 + _length_6);
                                  String mutOperator_1 = data_1.substring(_plus_38, data_1.length());
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("<!--");
                                  String _name_2 = statementClass_4.getName();
                                  String _plus_39 = ((((("diagrams/" + model_1) + "/") + mutOperator_1) + "/") + _name_2);
                                  String _plus_40 = (_plus_39 + "_");
                                  int _lastIndexOf_3 = diagram_3.lastIndexOf("/");
                                  int _plus_41 = (_lastIndexOf_3 + 1);
                                  String _substring_3 = diagram_3.substring(_plus_41, diagram_3.length());
                                  String _plus_42 = (_plus_40 + _substring_3);
                                  _builder.append(diagram_3 = _plus_42);
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("        ");
                                  _builder.append("<!--");
                                  File file_4 = new File(((this.projectPath + "/src-gen/html/") + diagram_3));
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  {
                                    if ((file_4.isFile() && file_4.exists())) {
                                      _builder.append("        ");
                                      _builder.append("<question type=\"gapselect\">");
                                      _builder.newLine();
                                      _builder.append("        ");
                                      _builder.append("  ");
                                      _builder.append("<name>");
                                      _builder.newLine();
                                      _builder.append("        ");
                                      _builder.append("     ");
                                      _builder.append("<text><![CDATA[<p>");
                                      String _replace_15 = test_7.getQuestion().replace("\"", "\'");
                                      _builder.append(_replace_15, "             ");
                                      _builder.append("<br></p>]]></text>");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("        ");
                                      _builder.append("  ");
                                      _builder.append("</name>");
                                      _builder.newLine();
                                      _builder.append("        ");
                                      _builder.append("  ");
                                      _builder.append("<questiontext format=\"html\">");
                                      _builder.newLine();
                                      _builder.append("        ");
                                      _builder.append("  ");
                                      _builder.append("<text><![CDATA[<p>");
                                      String _replace_16 = test_7.getQuestion().replace("\"", "\'");
                                      _builder.append(_replace_16, "          ");
                                      _builder.append("<br><img src=\"@@PLUGINFILE@@/exercise_");
                                      _builder.append(uuid_3, "          ");
                                      _builder.append(".png\" alt=\"\" width=\"20%\" height=\"20%\" role=\"presentation\" class=\"img-responsive atto_image_button_text-bottom\"><br><br></p><p>");
                                      String _trim_7 = textWithGaps.trim();
                                      _builder.append(_trim_7, "          ");
                                      _builder.append("<br></p>]]></text>");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("        ");
                                      _builder.append("  ");
                                      _builder.append("<file name=\"exercise_");
                                      _builder.append(uuid_3, "          ");
                                      _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                                      String _stringBase64_8 = this.getStringBase64(diagram_3);
                                      _builder.append(_stringBase64_8, "          ");
                                      _builder.append("</file>");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("    ");
                                      _builder.append("</questiontext>");
                                      _builder.newLine();
                                      _builder.append("    ");
                                      _builder.append("<generalfeedback format=\"html\">");
                                      _builder.newLine();
                                      _builder.append("      ");
                                      _builder.append("<text></text>");
                                      _builder.newLine();
                                      _builder.append("    ");
                                      _builder.append("</generalfeedback>");
                                      _builder.newLine();
                                      _builder.append("    ");
                                      _builder.append("<defaultgrade>1.0000000</defaultgrade>");
                                      _builder.newLine();
                                      _builder.append("    ");
                                      _builder.append("<penalty>0.3333333</penalty>");
                                      _builder.newLine();
                                      _builder.append("    ");
                                      _builder.append("<hidden>0</hidden>");
                                      _builder.newLine();
                                      _builder.append("    ");
                                      _builder.append("<idnumber></idnumber>");
                                      _builder.newLine();
                                      _builder.append("    ");
                                      _builder.append("<shuffleanswers>0</shuffleanswers>");
                                      _builder.newLine();
                                      _builder.append("    ");
                                      _builder.append("<correctfeedback format=\"html\">");
                                      _builder.newLine();
                                      _builder.append("      ");
                                      _builder.append("<!--<text>Respuesta correcta</text>-->");
                                      _builder.newLine();
                                      _builder.append("      ");
                                      _builder.append("<text>Right answer.</text>");
                                      _builder.newLine();
                                      _builder.append("    ");
                                      _builder.append("</correctfeedback>");
                                      _builder.newLine();
                                      _builder.append("    ");
                                      _builder.append("<partiallycorrectfeedback format=\"html\">");
                                      _builder.newLine();
                                      _builder.append("      ");
                                      _builder.append("<!--<text>Respuesta parcialmente correcta.</text>-->");
                                      _builder.newLine();
                                      _builder.append("      ");
                                      _builder.append("<text>Partially right answer.</text>");
                                      _builder.newLine();
                                      _builder.append("    ");
                                      _builder.append("</partiallycorrectfeedback>");
                                      _builder.newLine();
                                      _builder.append("    ");
                                      _builder.append("<incorrectfeedback format=\"html\">");
                                      _builder.newLine();
                                      _builder.append("      ");
                                      _builder.append("<!--<text>Respuesta incorrecta.</text>-->");
                                      _builder.newLine();
                                      _builder.append("      ");
                                      _builder.append("<text>Wrong answer.</text>");
                                      _builder.newLine();
                                      _builder.append("    ");
                                      _builder.append("</incorrectfeedback>");
                                      _builder.newLine();
                                      _builder.append("    ");
                                      _builder.append("<shownumcorrect/>");
                                      _builder.newLine();
                                      {
                                        Set<String> _keySet_11 = op_1.options.keySet();
                                        for(final String key_10 : _keySet_11) {
                                          _builder.append("        ");
                                          _builder.append("<!-- ");
                                          List<EduTestSuperGenerator.ComparableSimpleEntry<String, AbstractMap.SimpleEntry<EClass, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry<Integer, Boolean>>>>> entries_2 = op_1.options.get(key_10);
                                          _builder.append("-->");
                                          _builder.newLineIfNotEmpty();
                                          {
                                            for(final EduTestSuperGenerator.ComparableSimpleEntry<String, AbstractMap.SimpleEntry<EClass, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry<Integer, Boolean>>>> entry_7 : entries_2) {
                                              _builder.append("        ");
                                              _builder.append("<selectoption>");
                                              _builder.newLine();
                                              _builder.append("        ");
                                              _builder.append("<text>");
                                              String _trim_8 = entry_7.getKey().trim();
                                              _builder.append(_trim_8, "        ");
                                              _builder.append("</text>");
                                              _builder.newLineIfNotEmpty();
                                              _builder.append("        ");
                                              _builder.append("<group>");
                                              Integer _key_1 = entry_7.getValue().getValue().getValue().getKey();
                                              _builder.append(_key_1, "        ");
                                              _builder.append("</group>");
                                              _builder.newLineIfNotEmpty();
                                              _builder.append("        ");
                                              _builder.append("</selectoption>");
                                              _builder.newLine();
                                            }
                                          }
                                        }
                                      }
                                      _builder.append("        ");
                                      _builder.append("</question>");
                                      _builder.newLine();
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          {
            if ((exercise instanceof MultiChoiceText)) {
              _builder.append("        ");
              int min_3 = Integer.MAX_VALUE;
              _builder.newLineIfNotEmpty();
              {
                EList<Test> _tests_8 = ((MultiChoiceText)exercise).getTests();
                for(final Test test_8 : _tests_8) {
                  {
                    Set<EClass> _keySet_12 = this.diagrams.get(exercise).get(test_8).keySet();
                    for(final EClass eclass_1 : _keySet_12) {
                      int counter_7 = this.diagrams.get(exercise).get(test_8).get(eclass_1).size();
                      _builder.newLineIfNotEmpty();
                      {
                        if ((min_3 > counter_7)) {
                          String _xblockexpression_75 = null;
                          {
                            min_3 = counter_7;
                            _xblockexpression_75 = "";
                          }
                          _builder.append(_xblockexpression_75);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              _builder.append("       \t");
              _builder.append("<!-- ");
              EClass answersClass_5 = null;
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              _builder.append("       \t");
              _builder.append("<!-- ");
              EClass statementClass_5 = null;
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              {
                for(final EClass root_5 : this.roots) {
                  {
                    EClass _answers_5 = ((MultiChoiceText)exercise).getConfig().getAnswers();
                    boolean _tripleNotEquals_15 = (_answers_5 != null);
                    if (_tripleNotEquals_15) {
                      {
                        boolean _equals_14 = ((MultiChoiceText)exercise).getConfig().getAnswers().getName().equals(root_5.getName());
                        if (_equals_14) {
                          String _xblockexpression_76 = null;
                          {
                            answersClass_5 = root_5;
                            _xblockexpression_76 = "";
                          }
                          _builder.append(_xblockexpression_76);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                  {
                    EClass _statement_5 = ((MultiChoiceText)exercise).getConfig().getStatement();
                    boolean _tripleNotEquals_16 = (_statement_5 != null);
                    if (_tripleNotEquals_16) {
                      {
                        boolean _equals_15 = ((MultiChoiceText)exercise).getConfig().getStatement().getName().equals(root_5.getName());
                        if (_equals_15) {
                          String _xblockexpression_77 = null;
                          {
                            statementClass_5 = root_5;
                            _xblockexpression_77 = "";
                          }
                          _builder.append(_xblockexpression_77);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              {
                if ((answersClass_5 == null)) {
                  String _xblockexpression_78 = null;
                  {
                    int _size_25 = this.roots.size();
                    int _minus = (_size_25 - 1);
                    answersClass_5 = this.roots.get(_minus);
                    _xblockexpression_78 = "";
                  }
                  _builder.append(_xblockexpression_78);
                  _builder.newLineIfNotEmpty();
                }
              }
              {
                if ((statementClass_5 == null)) {
                  {
                    int _size_25 = this.roots.size();
                    boolean _greaterThan_27 = (_size_25 > 1);
                    if (_greaterThan_27) {
                      String _xblockexpression_79 = null;
                      {
                        statementClass_5 = this.roots.get(1);
                        _xblockexpression_79 = "";
                      }
                      _builder.append(_xblockexpression_79);
                      _builder.newLineIfNotEmpty();
                    } else {
                      String _xblockexpression_80 = null;
                      {
                        statementClass_5 = this.roots.get(0);
                        _xblockexpression_80 = "";
                      }
                      _builder.append(_xblockexpression_80);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              {
                EList<Test> _tests_9 = ((MultiChoiceText)exercise).getTests();
                for(final Test test_9 : _tests_9) {
                  String _xifexpression_6 = null;
                  List<String> _get_23 = this.diagrams.get(exercise).get(test_9).get(statementClass_5);
                  boolean _tripleNotEquals_17 = (_get_23 != null);
                  if (_tripleNotEquals_17) {
                    String _xifexpression_7 = null;
                    int _size_26 = this.diagrams.get(exercise).get(test_9).get(statementClass_5).size();
                    boolean _greaterThan_28 = (_size_26 > 0);
                    if (_greaterThan_28) {
                      _xifexpression_7 = this.diagrams.get(exercise).get(test_9).get(statementClass_5).get(0);
                    } else {
                      _xifexpression_7 = null;
                    }
                    _xifexpression_6 = _xifexpression_7;
                  } else {
                    _xifexpression_6 = null;
                  }
                  String statement_1 = _xifexpression_6;
                  _builder.newLineIfNotEmpty();
                  String _xifexpression_8 = null;
                  List<String> _get_24 = this.diagrams.get(exercise).get(test_9).get(answersClass_5);
                  boolean _tripleNotEquals_18 = (_get_24 != null);
                  if (_tripleNotEquals_18) {
                    String _xifexpression_9 = null;
                    int _size_27 = this.diagrams.get(exercise).get(test_9).get(answersClass_5).size();
                    boolean _greaterThan_29 = (_size_27 > 0);
                    if (_greaterThan_29) {
                      _xifexpression_9 = this.diagrams.get(exercise).get(test_9).get(answersClass_5).get(0);
                    }
                    _xifexpression_8 = _xifexpression_9;
                  }
                  String solution_3 = _xifexpression_8;
                  _builder.newLineIfNotEmpty();
                  List<String> answers_2 = new ArrayList<String>();
                  _builder.newLineIfNotEmpty();
                  Set<String> answersSet_2 = new LinkedHashSet<String>();
                  _builder.newLineIfNotEmpty();
                  {
                    if (((this.diagrams.get(exercise).get(test_9).get(answersClass_5) != null) && (this.diagrams.get(exercise).get(test_9).get(answersClass_5).size() > 0))) {
                      String _xblockexpression_81 = null;
                      {
                        answersSet_2.addAll(this.diagrams.get(exercise).get(test_9).get(answersClass_5));
                        _xblockexpression_81 = "";
                      }
                      _builder.append(_xblockexpression_81);
                      _builder.newLineIfNotEmpty();
                      String _xblockexpression_82 = null;
                      {
                        answers_2.addAll(answersSet_2);
                        _xblockexpression_82 = "";
                      }
                      _builder.append(_xblockexpression_82);
                      _builder.newLineIfNotEmpty();
                      String _xblockexpression_83 = null;
                      {
                        Collections.shuffle(answers_2);
                        _xblockexpression_83 = "";
                      }
                      _builder.append(_xblockexpression_83);
                      _builder.newLineIfNotEmpty();
                      _builder.append("<!--");
                      String _replace_17 = test_9.getSource().replace(".model", "");
                      String _plus_43 = ((this.projectPath + "/src-gen/html/diagrams/") + _replace_17);
                      String _plus_44 = (_plus_43 + "/");
                      String diagram_4 = (_plus_44 + statement_1);
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      {
                        int _length_7 = diagram_4.length();
                        boolean _greaterThan_30 = (_length_7 > 0);
                        if (_greaterThan_30) {
                          _builder.append("<!--");
                          File file_5 = new File(diagram_4);
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          {
                            if ((file_5.isFile() && file_5.exists())) {
                              String _xblockexpression_84 = null;
                              {
                                int _indexOf_4 = diagram_4.indexOf("/src-gen/html/");
                                int _length_8 = "/src-gen/html/".length();
                                int _plus_45 = (_indexOf_4 + _length_8);
                                diagram_4 = diagram_4.substring(_plus_45, diagram_4.length());
                                _xblockexpression_84 = "";
                              }
                              _builder.append(_xblockexpression_84);
                              _builder.newLineIfNotEmpty();
                              _builder.append(" ");
                              _builder.append("<question type=\"multichoice\">");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<name>");
                              _builder.newLine();
                              _builder.append("     ");
                              _builder.append("<text>Question ");
                              int _plusPlus_7 = i++;
                              _builder.append(_plusPlus_7, "     ");
                              _builder.append("</text>");
                              _builder.newLineIfNotEmpty();
                              _builder.append("   ");
                              _builder.append("</name>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<questiontext format=\"html\">");
                              _builder.newLine();
                              _builder.append("\t\t   ");
                              _builder.append("<!-- ");
                              UUID uuid_4 = UUID.randomUUID();
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              _builder.append("   ");
                              _builder.append("<text><![CDATA[<p>");
                              String _replace_18 = test_9.getQuestion().replace("\"", "\'");
                              _builder.append(_replace_18, "   ");
                              _builder.append("<br><img src=\"@@PLUGINFILE@@/exercise_");
                              _builder.append(uuid_4, "   ");
                              _builder.append(".png\" alt=\"\" width=\"30%\" height=\"30%\" role=\"presentation\" class=\"img-responsive atto_image_button_text-bottom\"><br></p>]]></text>");
                              _builder.newLineIfNotEmpty();
                              _builder.append("   ");
                              _builder.append("<file name=\"exercise_");
                              _builder.append(uuid_4, "   ");
                              _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                              String _stringBase64_9 = this.getStringBase64(diagram_4);
                              _builder.append(_stringBase64_9, "   ");
                              _builder.append("</file>");
                              _builder.newLineIfNotEmpty();
                              _builder.append("   ");
                              _builder.append("</questiontext>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<generalfeedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<text></text>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("</generalfeedback>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<defaultgrade>1.0000000</defaultgrade>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<penalty>1.0000000</penalty>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<hidden>0</hidden>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<idnumber></idnumber>");
                              _builder.newLine();
                              {
                                Mode _mode_2 = ((MultiChoiceText)exercise).getConfig().getMode();
                                boolean _tripleEquals_2 = (_mode_2 == Mode.RADIOBUTTON);
                                if (_tripleEquals_2) {
                                  _builder.append("   ");
                                  _builder.append("<single>true</single>");
                                  _builder.newLine();
                                } else {
                                  Mode _mode_3 = ((MultiChoiceText)exercise).getConfig().getMode();
                                  boolean _tripleEquals_3 = (_mode_3 == Mode.CHECKBOX);
                                  if (_tripleEquals_3) {
                                    _builder.append("   ");
                                    _builder.append("<single>false</single>");
                                    _builder.newLine();
                                  }
                                }
                              }
                              _builder.append("   ");
                              _builder.append("<shuffleanswers>true</shuffleanswers>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<answernumbering>abc</answernumbering>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<correctfeedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<!--<text>Respuesta correcta</text>-->");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<text>Right answer.</text>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("</correctfeedback>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<partiallycorrectfeedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<!--<text>Respuesta parcialmente correcta.</text>-->");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<text>Partially right answer.</text>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("</partiallycorrectfeedback>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<incorrectfeedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<!--<text>Respuesta incorrecta.</text>-->");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<text>Wrong answer.</text>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("</incorrectfeedback>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<shownumcorrect/>");
                              _builder.newLine();
                              _builder.append("   ");
                              _builder.append("<!--");
                              int counter_8 = 0;
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              _builder.append("   ");
                              _builder.append("<!--");
                              int solutions_2 = 1;
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              _builder.append("   ");
                              _builder.append("<!--");
                              double fraction_2 = (100.0 / solutions_2);
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              _builder.append("   ");
                              String _xblockexpression_85 = null;
                              {
                                counter_8 = 0;
                                _xblockexpression_85 = "";
                              }
                              _builder.append(_xblockexpression_85, "   ");
                              _builder.newLineIfNotEmpty();
                              {
                                for(final String answer : answers_2) {
                                  _builder.append("           ");
                                  _builder.append("<!--");
                                  boolean s_1 = false;
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  {
                                    List<String> _get_25 = this.solutionsMap.get(exercise);
                                    for(final String sol_2 : _get_25) {
                                      {
                                        if ((((answer.startsWith((sol_2 + "/")) || answer.startsWith((sol_2 + "\\"))) || answer.contains((((sol_2 + "/") + answersClass_5.getName()) + "_"))) || answer.contains((((sol_2 + "\\") + answersClass_5.getName()) + "_")))) {
                                          _builder.append("           ");
                                          String _xblockexpression_86 = null;
                                          {
                                            s_1 = true;
                                            _xblockexpression_86 = "";
                                          }
                                          _builder.append(_xblockexpression_86, "           ");
                                          _builder.newLineIfNotEmpty();
                                        }
                                      }
                                    }
                                  }
                                  {
                                    if ((s_1 == true)) {
                                      {
                                        if ((counter_8 < (min_3 - 1))) {
                                          _builder.append("           ");
                                          String _xblockexpression_87 = null;
                                          {
                                            counter_8++;
                                            _xblockexpression_87 = "";
                                          }
                                          _builder.append(_xblockexpression_87, "           ");
                                          _builder.newLineIfNotEmpty();
                                          _builder.append("           ");
                                          String _xblockexpression_88 = null;
                                          {
                                            solutions_2++;
                                            _xblockexpression_88 = "";
                                          }
                                          _builder.append(_xblockexpression_88, "           ");
                                          _builder.newLineIfNotEmpty();
                                        }
                                      }
                                    }
                                  }
                                  _builder.append("<!-- ");
                                  _builder.append(uuid_4 = UUID.randomUUID());
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  {
                                    if ((s_1 || answer.equals(solution_3))) {
                                      _builder.append(" ");
                                      String _identifier = ((MultiChoiceText) exercise).getConfig().getIdentifier();
                                      String _metaModelPath = ModelManager.getMetaModelPath();
                                      String _plus_45 = (_metaModelPath + "/");
                                      String _source = test_9.getSource();
                                      String _plus_46 = (_plus_45 + _source);
                                      String text_8 = this.getText(_identifier, _plus_46, resource);
                                      _builder.newLineIfNotEmpty();
                                      {
                                        if (((100 % solutions_2) == 0)) {
                                          _builder.append("<answer fraction=\"");
                                          _builder.append((100 / solutions_2));
                                          _builder.append("\" format=\"html\">");
                                          _builder.newLineIfNotEmpty();
                                        } else {
                                          _builder.append("<!--");
                                          NumberFormat _numberInstance_3 = NumberFormat.getNumberInstance(Locale.ENGLISH);
                                          DecimalFormat formatter_3 = ((DecimalFormat) _numberInstance_3);
                                          _builder.append("-->");
                                          _builder.newLineIfNotEmpty();
                                          String _xblockexpression_89 = null;
                                          {
                                            formatter_3.applyPattern("###.#####");
                                            _xblockexpression_89 = "";
                                          }
                                          _builder.append(_xblockexpression_89);
                                          _builder.newLineIfNotEmpty();
                                          _builder.append("<answer fraction=\"");
                                          String _format_3 = formatter_3.format(fraction_2);
                                          _builder.append(_format_3);
                                          _builder.append("\" format=\"html\">");
                                          _builder.newLineIfNotEmpty();
                                        }
                                      }
                                      _builder.append(" ");
                                      _builder.append("<text><![CDATA[<p>");
                                      _builder.append(text_8, " ");
                                      _builder.append("<br></p>]]></text>");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append(" ");
                                      _builder.append("<!--<text><![CDATA[<p>");
                                      _builder.append(text_8, " ");
                                      _builder.append("<img src=\"@@PLUGINFILE@@/exercise_");
                                      _builder.append(uuid_4, " ");
                                      _builder.append(".png\" alt=\"\" width=\"15%\" height=\"15%\" role=\"presentation\" class=\"img-responsive atto_image_button_text-bottom\"><br></p>]]></text>");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append(" ");
                                      _builder.append("<file name=\"exercise_");
                                      _builder.append(uuid_4, " ");
                                      _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                                      String _replace_19 = test_9.getSource().replace(".model", "");
                                      String _plus_47 = ("diagrams/" + _replace_19);
                                      String _plus_48 = (_plus_47 + "/");
                                      String _plus_49 = (_plus_48 + answer);
                                      String _stringBase64_10 = this.getStringBase64(_plus_49);
                                      _builder.append(_stringBase64_10, " ");
                                      _builder.append("</file>-->");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append(" ");
                                      _builder.append("<feedback format=\"html\">");
                                      _builder.newLine();
                                      _builder.append(" ");
                                      _builder.append("<text></text>");
                                      _builder.newLine();
                                      _builder.append(" ");
                                      _builder.append("</feedback>");
                                      _builder.newLine();
                                      _builder.append(" ");
                                      _builder.append("</answer>");
                                      _builder.newLine();
                                    } else {
                                      {
                                        if ((counter_8 < (min_3 - 1))) {
                                          _builder.append("           ");
                                          String _xblockexpression_90 = null;
                                          {
                                            counter_8++;
                                            _xblockexpression_90 = "";
                                          }
                                          _builder.append(_xblockexpression_90, "           ");
                                          _builder.newLineIfNotEmpty();
                                          _builder.append("           ");
                                          String _identifier_1 = ((MultiChoiceText) exercise).getConfig().getIdentifier();
                                          String _outputPath = ModelManager.getOutputPath();
                                          String _plus_50 = (_outputPath + "/");
                                          String _replace_20 = test_9.getSource().replace(".model", "");
                                          String _plus_51 = (_plus_50 + _replace_20);
                                          String _plus_52 = (_plus_51 + "/");
                                          String _name_3 = answersClass_5.getName();
                                          String _plus_53 = (_name_3 + "_");
                                          String _replace_21 = diagram_4.replace(_plus_53, "");
                                          String _name_4 = answersClass_5.getName();
                                          String _plus_54 = (_name_4 + "_");
                                          String _replace_22 = _replace_21.replace(_plus_54, "").replace(".png", ".model");
                                          String _plus_55 = (_plus_52 + _replace_22);
                                          String text_9 = this.getText(_identifier_1, _plus_55, resource);
                                          _builder.newLineIfNotEmpty();
                                          _builder.append("           ");
                                          _builder.append("<answer fraction=\"0\" format=\"html\">");
                                          _builder.newLine();
                                          _builder.append("           ");
                                          _builder.append("<text><![CDATA[<p>");
                                          _builder.append(text_9, "           ");
                                          _builder.append("<br></p>]]></text>");
                                          _builder.newLineIfNotEmpty();
                                          _builder.append("           ");
                                          _builder.append("<!--<text><![CDATA[<p>");
                                          _builder.append(text_9, "           ");
                                          _builder.append("<img src=\"@@PLUGINFILE@@/exercise_");
                                          _builder.append(uuid_4, "           ");
                                          _builder.append(".png\" alt=\"\" width=\"15%\" height=\"15%\" role=\"presentation\" class=\"img-responsive atto_image_button_text-bottom\"><br></p>]]></text>");
                                          _builder.newLineIfNotEmpty();
                                          _builder.append("           ");
                                          _builder.append("<file name=\"exercise_");
                                          _builder.append(uuid_4, "           ");
                                          _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                                          String _replace_23 = test_9.getSource().replace(".model", "");
                                          String _plus_56 = ("diagrams/" + _replace_23);
                                          String _plus_57 = (_plus_56 + "/");
                                          String _plus_58 = (_plus_57 + answer);
                                          String _stringBase64_11 = this.getStringBase64(_plus_58);
                                          _builder.append(_stringBase64_11, "           ");
                                          _builder.append("</file>-->");
                                          _builder.newLineIfNotEmpty();
                                          _builder.append("           ");
                                          _builder.append("<feedback format=\"html\">");
                                          _builder.newLine();
                                          _builder.append("           ");
                                          _builder.append("<text></text>");
                                          _builder.newLine();
                                          _builder.append("           ");
                                          _builder.append("</feedback>");
                                          _builder.newLine();
                                          _builder.append("           ");
                                          _builder.append("</answer>");
                                          _builder.newLine();
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                          _builder.append(" ");
                          _builder.append("</question>");
                          _builder.newLine();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          {
            if ((exercise instanceof AlternativeText)) {
              _builder.append("       \t");
              _builder.append("<!-- ");
              EClass answersClass_6 = null;
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              _builder.append("       \t");
              _builder.append("<!-- ");
              EClass statementClass_6 = null;
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              {
                for(final EClass root_6 : this.roots) {
                  {
                    EClass _answers_6 = ((AlternativeText)exercise).getConfig().getAnswers();
                    boolean _tripleNotEquals_19 = (_answers_6 != null);
                    if (_tripleNotEquals_19) {
                      {
                        boolean _equals_16 = ((AlternativeText)exercise).getConfig().getAnswers().getName().equals(root_6.getName());
                        if (_equals_16) {
                          String _xblockexpression_91 = null;
                          {
                            answersClass_6 = root_6;
                            _xblockexpression_91 = "";
                          }
                          _builder.append(_xblockexpression_91);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                  {
                    EClass _statement_6 = ((AlternativeText)exercise).getConfig().getStatement();
                    boolean _tripleNotEquals_20 = (_statement_6 != null);
                    if (_tripleNotEquals_20) {
                      {
                        boolean _equals_17 = ((AlternativeText)exercise).getConfig().getStatement().getName().equals(root_6.getName());
                        if (_equals_17) {
                          String _xblockexpression_92 = null;
                          {
                            statementClass_6 = root_6;
                            _xblockexpression_92 = "";
                          }
                          _builder.append(_xblockexpression_92);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              {
                if ((answersClass_6 == null)) {
                  String _xblockexpression_93 = null;
                  {
                    int _size_28 = this.roots.size();
                    int _minus = (_size_28 - 1);
                    answersClass_6 = this.roots.get(_minus);
                    _xblockexpression_93 = "";
                  }
                  _builder.append(_xblockexpression_93);
                  _builder.newLineIfNotEmpty();
                }
              }
              {
                if ((statementClass_6 == null)) {
                  {
                    int _size_28 = this.roots.size();
                    boolean _greaterThan_31 = (_size_28 > 1);
                    if (_greaterThan_31) {
                      String _xblockexpression_94 = null;
                      {
                        statementClass_6 = this.roots.get(1);
                        _xblockexpression_94 = "";
                      }
                      _builder.append(_xblockexpression_94);
                      _builder.newLineIfNotEmpty();
                    } else {
                      String _xblockexpression_95 = null;
                      {
                        statementClass_6 = this.roots.get(0);
                        _xblockexpression_95 = "";
                      }
                      _builder.append(_xblockexpression_95);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              {
                EList<Test> _tests_10 = ((AlternativeText)exercise).getTests();
                for(final Test test_10 : _tests_10) {
                  String _xifexpression_10 = null;
                  List<String> _get_26 = this.diagrams.get(exercise).get(test_10).get(answersClass_6);
                  boolean _tripleNotEquals_21 = (_get_26 != null);
                  if (_tripleNotEquals_21) {
                    String _xifexpression_11 = null;
                    int _size_29 = this.diagrams.get(exercise).get(test_10).get(answersClass_6).size();
                    boolean _greaterThan_32 = (_size_29 > 0);
                    if (_greaterThan_32) {
                      _xifexpression_11 = this.diagrams.get(exercise).get(test_10).get(answersClass_6).get(0);
                    }
                    _xifexpression_10 = _xifexpression_11;
                  }
                  String solution_4 = _xifexpression_10;
                  _builder.newLineIfNotEmpty();
                  List<String> answers_3 = new ArrayList<String>();
                  _builder.newLineIfNotEmpty();
                  Set<String> answersSet_3 = new LinkedHashSet<String>();
                  _builder.newLineIfNotEmpty();
                  {
                    if (((this.diagrams.get(exercise).get(test_10).get(answersClass_6) != null) && (this.diagrams.get(exercise).get(test_10).get(answersClass_6).size() > 0))) {
                      String _xblockexpression_96 = null;
                      {
                        answersSet_3.addAll(this.diagrams.get(exercise).get(test_10).get(answersClass_6));
                        _xblockexpression_96 = "";
                      }
                      _builder.append(_xblockexpression_96);
                      _builder.newLineIfNotEmpty();
                      String _xblockexpression_97 = null;
                      {
                        answers_3.addAll(answersSet_3);
                        _xblockexpression_97 = "";
                      }
                      _builder.append(_xblockexpression_97);
                      _builder.newLineIfNotEmpty();
                      String _xblockexpression_98 = null;
                      {
                        Collections.shuffle(answers_3);
                        _xblockexpression_98 = "";
                      }
                      _builder.append(_xblockexpression_98);
                      _builder.newLineIfNotEmpty();
                      _builder.append("<!-- ");
                      String diagram_5 = answers_3.get(0);
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      _builder.append("<!--");
                      String _replace_24 = test_10.getSource().replace(".model", "");
                      String _plus_59 = ((this.projectPath + "/src-gen/html/diagrams/") + _replace_24);
                      String _plus_60 = (_plus_59 + "/");
                      String _plus_61 = (_plus_60 + diagram_5);
                      File file_6 = new File(_plus_61);
                      _builder.append("-->");
                      _builder.newLineIfNotEmpty();
                      {
                        if ((file_6.isFile() && file_6.exists())) {
                          _builder.append("          ");
                          _builder.append("<question type=\"truefalse\">");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<name>");
                          _builder.newLine();
                          _builder.append("    ");
                          _builder.append("<text><![CDATA[<p>");
                          String _replace_25 = test_10.getQuestion().replace("\"", "\'");
                          _builder.append(_replace_25, "    ");
                          _builder.append("<br></p>]]></text>");
                          _builder.newLineIfNotEmpty();
                          _builder.append("  ");
                          _builder.append("</name>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<questiontext format=\"html\">");
                          _builder.newLine();
                          _builder.append("    ");
                          _builder.append("<!-- ");
                          UUID uuid_5 = UUID.randomUUID();
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("    ");
                          _builder.append("<!-- ");
                          String text_10 = "";
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("    ");
                          _builder.newLine();
                          _builder.append("    ");
                          _builder.append("<!--");
                          String _identifier_2 = ((AlternativeText) exercise).getConfig().getIdentifier();
                          String _metaModelPath_1 = ModelManager.getMetaModelPath();
                          String _plus_62 = (_metaModelPath_1 + "/");
                          String _source_1 = test_10.getSource();
                          String _plus_63 = (_plus_62 + _source_1);
                          _builder.append(text_10 = this.getText(_identifier_2, _plus_63, resource), "    ");
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("    ");
                          _builder.newLine();
                          _builder.append("    ");
                          _builder.append("<!--");
                          _builder.append("-->");
                          _builder.newLine();
                          _builder.append("    ");
                          _builder.newLine();
                          _builder.append("    ");
                          _builder.append("<text><![CDATA[<p>");
                          String _replace_26 = test_10.getQuestion().replace("\"", "\'");
                          _builder.append(_replace_26, "    ");
                          _builder.append("<br></p><p><img src=\"@@PLUGINFILE@@/exercise_");
                          _builder.append(uuid_5, "    ");
                          _builder.append(".png\" alt=\"");
                          String _replace_27 = test_10.getQuestion().replace("\"", "\'");
                          _builder.append(_replace_27, "    ");
                          _builder.append("\" width=\"20%\" height=\"20%\" class=\"img-responsive atto_image_button_text-bottom\"><br></p><p>");
                          _builder.append(text_10, "    ");
                          _builder.append("<br></p>]]></text>");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t\t\t  ");
                          _builder.append("<file name=\"exercise_");
                          _builder.append(uuid_5, "\t\t\t  ");
                          _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                          String _replace_28 = test_10.getSource().replace(".model", "");
                          String _plus_64 = ("diagrams/" + _replace_28);
                          String _plus_65 = (_plus_64 + "/");
                          String _plus_66 = (_plus_65 + diagram_5);
                          String _stringBase64_12 = this.getStringBase64(_plus_66);
                          _builder.append(_stringBase64_12, "\t\t\t  ");
                          _builder.append("</file>");
                          _builder.newLineIfNotEmpty();
                          _builder.append("  ");
                          _builder.append("</questiontext>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<generalfeedback format=\"html\">");
                          _builder.newLine();
                          _builder.append("    ");
                          _builder.append("<text></text>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("</generalfeedback>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<defaultgrade>1.0000000</defaultgrade>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<penalty>1.0000000</penalty>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<hidden>0</hidden>");
                          _builder.newLine();
                          _builder.append("  ");
                          _builder.append("<idnumber></idnumber>");
                          _builder.newLine();
                          {
                            boolean _equals_18 = diagram_5.equals(solution_4.replace(".model", ".png"));
                            if (_equals_18) {
                              _builder.append("<answer fraction=\"100\" format=\"moodle_auto_format\">");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("<text>true</text>");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("<feedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<text></text>");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("</feedback>");
                              _builder.newLine();
                              _builder.append("</answer>");
                              _builder.newLine();
                              _builder.append("<answer fraction=\"0\" format=\"moodle_auto_format\">");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("<text>false</text>");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("<feedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<text></text>");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("</feedback>");
                              _builder.newLine();
                              _builder.append("</answer>");
                              _builder.newLine();
                            } else {
                              _builder.append("<answer fraction=\"0\" format=\"moodle_auto_format\">");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("<text>true</text>");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("<feedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<text></text>");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("</feedback>");
                              _builder.newLine();
                              _builder.append("</answer>");
                              _builder.newLine();
                              _builder.append("<answer fraction=\"100\" format=\"moodle_auto_format\">");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("<text>false</text>");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("<feedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<text></text>");
                              _builder.newLine();
                              _builder.append("  ");
                              _builder.append("</feedback>");
                              _builder.newLine();
                              _builder.append("</answer>");
                              _builder.newLine();
                            }
                          }
                          _builder.append("</question>");
                          _builder.newLine();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          {
            if ((exercise instanceof DragAndDropText)) {
              _builder.append("        ");
              _builder.append("<!-- ");
              Map<Test, Map<String, Map<String, Map<String, Integer>>>> groups = new HashMap<Test, Map<String, Map<String, Map<String, Integer>>>>();
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              _builder.append("        ");
              _builder.append("<!-- ");
              Map<String, Integer> indexes = new TreeMap<String, Integer>();
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              _builder.append("       \t");
              _builder.append("<!-- ");
              EClass answersClass_7 = null;
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              _builder.append("       \t");
              _builder.append("<!-- ");
              EClass statementClass_7 = null;
              _builder.append("-->");
              _builder.newLineIfNotEmpty();
              {
                for(final EClass root_7 : this.roots) {
                  {
                    EClass _answers_7 = ((DragAndDropText)exercise).getConfig().getAnswers();
                    boolean _tripleNotEquals_22 = (_answers_7 != null);
                    if (_tripleNotEquals_22) {
                      {
                        boolean _equals_19 = ((DragAndDropText)exercise).getConfig().getAnswers().getName().equals(root_7.getName());
                        if (_equals_19) {
                          String _xblockexpression_99 = null;
                          {
                            answersClass_7 = root_7;
                            _xblockexpression_99 = "";
                          }
                          _builder.append(_xblockexpression_99);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                  {
                    EClass _statement_7 = ((DragAndDropText)exercise).getConfig().getStatement();
                    boolean _tripleNotEquals_23 = (_statement_7 != null);
                    if (_tripleNotEquals_23) {
                      {
                        boolean _equals_20 = ((DragAndDropText)exercise).getConfig().getStatement().getName().equals(root_7.getName());
                        if (_equals_20) {
                          String _xblockexpression_100 = null;
                          {
                            statementClass_7 = root_7;
                            _xblockexpression_100 = "";
                          }
                          _builder.append(_xblockexpression_100);
                          _builder.newLineIfNotEmpty();
                        }
                      }
                    }
                  }
                }
              }
              {
                if ((answersClass_7 == null)) {
                  String _xblockexpression_101 = null;
                  {
                    int _size_30 = this.roots.size();
                    int _minus = (_size_30 - 1);
                    answersClass_7 = this.roots.get(_minus);
                    _xblockexpression_101 = "";
                  }
                  _builder.append(_xblockexpression_101);
                  _builder.newLineIfNotEmpty();
                }
              }
              {
                if ((statementClass_7 == null)) {
                  {
                    int _size_30 = this.roots.size();
                    boolean _greaterThan_33 = (_size_30 > 1);
                    if (_greaterThan_33) {
                      String _xblockexpression_102 = null;
                      {
                        statementClass_7 = this.roots.get(1);
                        _xblockexpression_102 = "";
                      }
                      _builder.append(_xblockexpression_102);
                      _builder.newLineIfNotEmpty();
                    } else {
                      String _xblockexpression_103 = null;
                      {
                        statementClass_7 = this.roots.get(0);
                        _xblockexpression_103 = "";
                      }
                      _builder.append(_xblockexpression_103);
                      _builder.newLineIfNotEmpty();
                    }
                  }
                }
              }
              {
                EList<Test> _tests_11 = ((DragAndDropText)exercise).getTests();
                for(final Test test_11 : _tests_11) {
                  _builder.append("        ");
                  _builder.append("<!-- ");
                  int k_4 = 0;
                  _builder.append("-->");
                  _builder.newLineIfNotEmpty();
                  _builder.append("        ");
                  _builder.append("<!-- ");
                  String textWithGaps_1 = "";
                  _builder.append("-->");
                  _builder.newLineIfNotEmpty();
                  _builder.append("        ");
                  _builder.append("<!-- ");
                  Map<String, Map<String, Map<String, Integer>>> group = new TreeMap<String, Map<String, Map<String, Integer>>>();
                  _builder.append(" -->");
                  _builder.newLineIfNotEmpty();
                  _builder.append("        ");
                  _builder.append("<!-- ");
                  EduTestSuperGenerator.TestOption op_2 = null;
                  _builder.append("-->");
                  _builder.newLineIfNotEmpty();
                  {
                    int _size_31 = this.options.get(exercise).get(test_11).size();
                    boolean _greaterThan_34 = (_size_31 > 0);
                    if (_greaterThan_34) {
                      _builder.append("        ");
                      int rndIndex_5 = ModelManager.getRandomIndex(this.options.get(exercise).get(test_11));
                      _builder.newLineIfNotEmpty();
                      {
                        List<EduTestSuperGenerator.TestOption> _get_27 = this.options.get(exercise).get(test_11).get(rndIndex_5);
                        for(final EduTestSuperGenerator.TestOption opt_9 : _get_27) {
                          {
                            boolean _contains_5 = opt_9.path.contains(((DragAndDropText)exercise).getMarkedBlocks().get(0).getBlock().getName());
                            if (_contains_5) {
                              _builder.append("        ");
                              _builder.append("<!--");
                              _builder.append(op_2 = opt_9, "        ");
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                        }
                      }
                      {
                        if ((op_2 != null)) {
                          _builder.append("        ");
                          _builder.append("<!-- ");
                          String diagram_6 = op_2.path;
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("        ");
                          _builder.append("<!-- ");
                          UUID uuid_6 = UUID.randomUUID();
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("        ");
                          _builder.append("<!-- ");
                          Map<String, Integer> solutions_3 = new HashMap<String, Integer>();
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t\t");
                          _builder.append("<!-- ");
                          int tmp_1 = k_4;
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("        ");
                          _builder.append("<!--");
                          String opWithGaps_1 = "";
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          {
                            Set<String> _keySet_13 = op_2.options.keySet();
                            for(final String key_11 : _keySet_13) {
                              {
                                List<String> _get_28 = op_2.text.get(key_11);
                                for(final String text_11 : _get_28) {
                                  _builder.append("        ");
                                  _builder.append("<!--");
                                  int _plusPlus_8 = k_4++;
                                  _builder.append(_plusPlus_8, "        ");
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("        ");
                                  _builder.append("<!--");
                                  String _opWithGaps_1 = opWithGaps_1;
                                  String _plus_67 = opWithGaps_1 = (_opWithGaps_1 + (((text_11 + "%") + Integer.valueOf(k_4)) + " "));
                                  _builder.append(_plus_67, "        ");
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                }
                              }
                              _builder.append("        ");
                              _builder.append("<!--");
                              String _trim_9 = opWithGaps_1.trim();
                              String _plus_68 = (_trim_9 + ".<br>");
                              String _opWithGaps_2 = opWithGaps_1 = _plus_68;
                              _builder.append(_opWithGaps_2, "        ");
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                            }
                          }
                          {
                            Set<String> _keySet_14 = op_2.sortedOptions.keySet();
                            for(final String key_12 : _keySet_14) {
                              _builder.append("        ");
                              _builder.append("<!-- ");
                              List<EduTestSuperGenerator.ComparableSimpleEntry<String, AbstractMap.SimpleEntry<EClass, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry<Integer, Boolean>>>>> entries_3 = op_2.sortedOptions.get(key_12);
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              {
                                for(final EduTestSuperGenerator.ComparableSimpleEntry<String, AbstractMap.SimpleEntry<EClass, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry<Integer, Boolean>>>> entry_8 : entries_3) {
                                  _builder.append("        ");
                                  _builder.append("<!-- ");
                                  Map<String, Map<String, Integer>> value = null;
                                  _builder.append(" -->");
                                  _builder.newLineIfNotEmpty();
                                  {
                                    Set<String> _keySet_15 = group.keySet();
                                    for(final String typeName : _keySet_15) {
                                      {
                                        boolean _equals_21 = typeName.equals(entry_8.getValue().getKey().getName());
                                        if (_equals_21) {
                                          _builder.append("        ");
                                          _builder.append("<!-- ");
                                          _builder.append(value = group.get(typeName), "        ");
                                          _builder.append(" -->");
                                          _builder.newLineIfNotEmpty();
                                        }
                                      }
                                    }
                                  }
                                  {
                                    if ((value == null)) {
                                      _builder.append("        ");
                                      _builder.append("<!-- ");
                                      TreeMap<String, Map<String, Integer>> _treeMap = new TreeMap<String, Map<String, Integer>>();
                                      Map<String, Map<String, Integer>> _value_2 = value = _treeMap;
                                      _builder.append(_value_2, "        ");
                                      _builder.append(" -->");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("        ");
                                      _builder.append("<!-- ");
                                      Map<String, Map<String, Integer>> _put = group.put(entry_8.getValue().getKey().getName(), value);
                                      _builder.append(_put, "        ");
                                      _builder.append(" -->");
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                  {
                                    boolean _containsKey = indexes.containsKey(entry_8.getKey());
                                    boolean _not_4 = (!_containsKey);
                                    if (_not_4) {
                                      _builder.append("        ");
                                      _builder.append("<!-- ");
                                      Integer _put_1 = indexes.put(entry_8.getKey(), Integer.valueOf(0));
                                      _builder.append(_put_1, "        ");
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                  _builder.append("        ");
                                  _builder.append("<!-- ");
                                  Map<String, Integer> localIndexes = null;
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  {
                                    boolean _containsKey_1 = value.containsKey(entry_8.getValue().getValue().getKey());
                                    boolean _not_5 = (!_containsKey_1);
                                    if (_not_5) {
                                      _builder.append("<!-- ");
                                      TreeMap<String, Integer> _treeMap_1 = new TreeMap<String, Integer>();
                                      Map<String, Integer> _localIndexes = localIndexes = _treeMap_1;
                                      _builder.append(_localIndexes);
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                    } else {
                                      _builder.append("<!-- ");
                                      _builder.append(localIndexes = value.get(entry_8.getValue().getValue().getKey()));
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                  _builder.append("        ");
                                  _builder.append("<!-- ");
                                  Integer _put_2 = localIndexes.put(entry_8.getKey(), Integer.valueOf(0));
                                  _builder.append(_put_2, "        ");
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  _builder.append("        ");
                                  _builder.append("<!--");
                                  Map<String, Integer> _put_3 = value.put(entry_8.getValue().getValue().getKey(), localIndexes);
                                  _builder.append(_put_3, "        ");
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                }
                              }
                            }
                          }
                          _builder.append("        ");
                          _builder.append("<!-- ");
                          int localIndex = 0;
                          _builder.append(" -->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("        ");
                          _builder.append("<!-- ");
                          int index_1 = 0;
                          _builder.append(" -->");
                          _builder.newLineIfNotEmpty();
                          {
                            Set<String> _keySet_16 = group.keySet();
                            for(final String typeName_1 : _keySet_16) {
                              {
                                Set<String> _keySet_17 = group.get(typeName_1).keySet();
                                for(final String attName : _keySet_17) {
                                  _builder.append("        ");
                                  _builder.append("<!-- ");
                                  int _plusPlus_9 = localIndex++;
                                  _builder.append(_plusPlus_9, "        ");
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  {
                                    Set<String> _keySet_18 = group.get(typeName_1).get(attName).keySet();
                                    for(final String name : _keySet_18) {
                                      _builder.append("        ");
                                      _builder.append("<!-- ");
                                      int _plusPlus_10 = index_1++;
                                      _builder.append(_plusPlus_10, "        ");
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("        ");
                                      _builder.append("<!--");
                                      Integer _put_4 = group.get(typeName_1).get(attName).put(name, Integer.valueOf(localIndex));
                                      _builder.append(_put_4, "        ");
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("        ");
                                      _builder.append("<!--");
                                      Integer _put_5 = indexes.put(name, Integer.valueOf(index_1));
                                      _builder.append(_put_5, "        ");
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                }
                              }
                            }
                          }
                          {
                            Set<String> _keySet_19 = op_2.sortedOptions.keySet();
                            for(final String key_13 : _keySet_19) {
                              _builder.append("        ");
                              _builder.append("<!-- ");
                              List<EduTestSuperGenerator.ComparableSimpleEntry<String, AbstractMap.SimpleEntry<EClass, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry<Integer, Boolean>>>>> sortedEntries = op_2.sortedOptions.get(key_13);
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              {
                                for(final EduTestSuperGenerator.ComparableSimpleEntry<String, AbstractMap.SimpleEntry<EClass, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry<Integer, Boolean>>>> entry_9 : sortedEntries) {
                                  {
                                    if ((indexes.containsKey(entry_9.getKey()) && ((entry_9.getValue().getValue().getValue().getValue()).booleanValue() == true))) {
                                      _builder.append("        ");
                                      _builder.append("<!-- ");
                                      Integer _put_6 = solutions_3.put(entry_9.getKey(), indexes.get(entry_9.getKey()));
                                      _builder.append(_put_6, "        ");
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                }
                              }
                            }
                          }
                          _builder.append("        ");
                          _builder.append("<!--");
                          Map<String, Map<String, Map<String, Integer>>> _put_7 = groups.put(test_11, group);
                          _builder.append(_put_7, "        ");
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("        ");
                          _builder.append("<!-- ");
                          _builder.append(k_4 = tmp_1, "        ");
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          {
                            Set<String> _keySet_20 = op_2.options.keySet();
                            for(final String key_14 : _keySet_20) {
                              _builder.append("        ");
                              _builder.append("<!-- ");
                              List<EduTestSuperGenerator.ComparableSimpleEntry<String, AbstractMap.SimpleEntry<EClass, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry<Integer, Boolean>>>>> entries_4 = op_2.options.get(key_14);
                              _builder.append("-->");
                              _builder.newLineIfNotEmpty();
                              {
                                for(final EduTestSuperGenerator.ComparableSimpleEntry<String, AbstractMap.SimpleEntry<EClass, AbstractMap.SimpleEntry<String, AbstractMap.SimpleEntry<Integer, Boolean>>>> entry_10 : entries_4) {
                                  {
                                    Boolean _value_3 = entry_10.getValue().getValue().getValue().getValue();
                                    boolean _equals_22 = ((_value_3).booleanValue() == true);
                                    if (_equals_22) {
                                      _builder.append("        ");
                                      _builder.append("<!-- ");
                                      int _plusPlus_11 = k_4++;
                                      _builder.append(_plusPlus_11, "        ");
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                      _builder.append("        ");
                                      _builder.append("<!-- ");
                                      Integer _get_29 = solutions_3.get(entry_10.getKey());
                                      String _plus_69 = ("[[" + _get_29);
                                      String _plus_70 = (_plus_69 + "]]");
                                      _builder.append(opWithGaps_1 = opWithGaps_1.replace(("%" + Integer.valueOf(k_4)), _plus_70), "        ");
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                    }
                                  }
                                }
                              }
                            }
                          }
                          _builder.append("        ");
                          _builder.append("<!-- ");
                          int _plusPlus_12 = k_4++;
                          _builder.append(_plusPlus_12, "        ");
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("        ");
                          _builder.append("<!-- ");
                          _builder.append(opWithGaps_1 = opWithGaps_1.replace((" %" + Integer.valueOf(k_4)), ""), "        ");
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("\t\t");
                          _builder.append("<!-- ");
                          String _textWithGaps_1 = textWithGaps_1;
                          String _trim_10 = opWithGaps_1.trim();
                          String _plus_71 = textWithGaps_1 = (_textWithGaps_1 + _trim_10);
                          _builder.append(_plus_71, "\t\t");
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          _builder.append("        ");
                          String _xblockexpression_104 = null;
                          {
                            int _lastIndexOf_4 = diagram_6.lastIndexOf("/");
                            int _plus_72 = (_lastIndexOf_4 + 1);
                            String _substring_4 = diagram_6.substring(0, _plus_72);
                            String _name_5 = answersClass_7.getName();
                            String _plus_73 = (_substring_4 + _name_5);
                            String _plus_74 = (_plus_73 + "_");
                            int _lastIndexOf_5 = diagram_6.lastIndexOf("/");
                            int _plus_75 = (_lastIndexOf_5 + 1);
                            String _substring_5 = diagram_6.substring(_plus_75, diagram_6.length());
                            String _plus_76 = (_plus_74 + _substring_5);
                            diagram_6 = _plus_76;
                            _xblockexpression_104 = "";
                          }
                          _builder.append(_xblockexpression_104, "        ");
                          _builder.newLineIfNotEmpty();
                          _builder.append("        ");
                          _builder.append("<!--");
                          File file_7 = new File(((this.projectPath + "/src-gen/html/") + diagram_6));
                          _builder.append("-->");
                          _builder.newLineIfNotEmpty();
                          {
                            if ((file_7.isFile() && file_7.exists())) {
                              _builder.append("        ");
                              String _xblockexpression_105 = null;
                              {
                                int _indexOf_4 = diagram_6.indexOf("/src-gen/html/");
                                int _length_8 = "/src-gen/html/".length();
                                int _plus_72 = (_indexOf_4 + _length_8);
                                diagram_6 = diagram_6.substring(_plus_72, diagram_6.length());
                                _xblockexpression_105 = "";
                              }
                              _builder.append(_xblockexpression_105, "        ");
                              _builder.newLineIfNotEmpty();
                              _builder.append("        ");
                              _builder.append("<question type=\"ddwtos\">");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<name>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("     ");
                              _builder.append("<text><![CDATA[<p>");
                              String _replace_29 = test_11.getQuestion().replace("\"", "\'");
                              _builder.append(_replace_29, "             ");
                              _builder.append("<br></p>]]></text>");
                              _builder.newLineIfNotEmpty();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("</name>");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<questiontext format=\"html\">");
                              _builder.newLine();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<text><![CDATA[<p>");
                              String _replace_30 = test_11.getQuestion().replace("\"", "\'");
                              _builder.append(_replace_30, "          ");
                              _builder.append("<br><img src=\"@@PLUGINFILE@@/exercise_");
                              _builder.append(uuid_6, "          ");
                              _builder.append(".png\" alt=\"\" width=\"20%\" height=\"20%\" role=\"presentation\" class=\"img-responsive atto_image_button_text-bottom\"><br><br></p><p>");
                              String _trim_11 = textWithGaps_1.trim();
                              _builder.append(_trim_11, "          ");
                              _builder.append("<br></p>]]></text>");
                              _builder.newLineIfNotEmpty();
                              _builder.append("        ");
                              _builder.append("  ");
                              _builder.append("<file name=\"exercise_");
                              _builder.append(uuid_6, "          ");
                              _builder.append(".png\" path=\"/\" encoding=\"base64\">");
                              String _stringBase64_13 = this.getStringBase64(diagram_6);
                              _builder.append(_stringBase64_13, "          ");
                              _builder.append("</file>");
                              _builder.newLineIfNotEmpty();
                              _builder.append("    ");
                              _builder.append("</questiontext>");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<generalfeedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("      ");
                              _builder.append("<text></text>");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("</generalfeedback>");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<defaultgrade>1.0000000</defaultgrade>");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<penalty>0.3333333</penalty>");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<hidden>0</hidden>");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<idnumber></idnumber>");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<shuffleanswers>0</shuffleanswers>");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<correctfeedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("      ");
                              _builder.append("<!--<text>Respuesta correcta</text>-->");
                              _builder.newLine();
                              _builder.append("      ");
                              _builder.append("<text>Right answer.</text>");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("</correctfeedback>");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<partiallycorrectfeedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("      ");
                              _builder.append("<!--<text>Respuesta parcialmente correcta.</text>-->");
                              _builder.newLine();
                              _builder.append("      ");
                              _builder.append("<text>Partially right answer.</text>");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("</partiallycorrectfeedback>");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<incorrectfeedback format=\"html\">");
                              _builder.newLine();
                              _builder.append("      ");
                              _builder.append("<!--<text>Respuesta incorrecta.</text>-->");
                              _builder.newLine();
                              _builder.append("      ");
                              _builder.append("<text>Wrong answer.</text>");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("</incorrectfeedback>");
                              _builder.newLine();
                              _builder.append("    ");
                              _builder.append("<shownumcorrect/>");
                              _builder.newLine();
                              {
                                Set<String> _keySet_21 = groups.get(test_11).keySet();
                                for(final String typeName_2 : _keySet_21) {
                                  _builder.append("        ");
                                  _builder.append("<!-- ");
                                  Map<String, Map<String, Integer>> entries_5 = groups.get(test_11).get(typeName_2);
                                  _builder.append("-->");
                                  _builder.newLineIfNotEmpty();
                                  {
                                    Set<String> _keySet_22 = entries_5.keySet();
                                    for(final String attName_1 : _keySet_22) {
                                      _builder.append("        ");
                                      _builder.append("<!-- ");
                                      Map<String, Integer> entry_11 = groups.get(test_11).get(typeName_2).get(attName_1);
                                      _builder.append("-->");
                                      _builder.newLineIfNotEmpty();
                                      {
                                        Set<String> _keySet_23 = entry_11.keySet();
                                        for(final String key_15 : _keySet_23) {
                                          _builder.append("        ");
                                          _builder.append("<dragbox>");
                                          _builder.newLine();
                                          _builder.append("        ");
                                          _builder.append("<text>");
                                          String _trim_12 = key_15.trim();
                                          _builder.append(_trim_12, "        ");
                                          _builder.append("</text>");
                                          _builder.newLineIfNotEmpty();
                                          _builder.append("        ");
                                          _builder.append("<group>");
                                          Integer _get_30 = groups.get(test_11).get(typeName_2).get(attName_1).get(key_15);
                                          _builder.append(_get_30, "        ");
                                          _builder.append("</group>");
                                          _builder.newLineIfNotEmpty();
                                          _builder.append("        ");
                                          _builder.append("<infinite/>");
                                          _builder.newLine();
                                          _builder.append("        ");
                                          _builder.append("</dragbox>");
                                          _builder.newLine();
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                              _builder.append("        ");
                              _builder.append("</question>");
                              _builder.newLine();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      _builder.append("</quiz>");
      _builder.newLine();
      return _builder;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
