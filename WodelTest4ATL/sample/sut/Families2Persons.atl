module Families2Persons;

--@path Families=/Families2Persons/Families.ecore
--@path Persons=/Families2Persons/Persons.ecore

create OUT:Persons from IN:Families;

-- it returns whether a family member is a female 
helper context Families!Member def: isFemale(): Boolean =
	if not self.familyMother.oclIsUndefined() then
		true
	else
		if not self.familyDaughter.oclIsUndefined() then
			true
		else
			false
		endif
	endif;

-- it returns whether a family member is a male 
helper context Families!Member def: isMale(): Boolean =
	if not self.familyFather.oclIsUndefined() then
		true
	else
		if not self.familySon.oclIsUndefined() then
			true
		else
			false
		endif
	endif;

-- it returns the family name of a family member
helper context Families!Member def: familyName: String =
	if not self.familyFather.oclIsUndefined() then
		self.familyFather.lastName
	else 
		if not self.familyMother.oclIsUndefined() then
			self.familyMother.lastName
		else
			if not self.familySon.oclIsUndefined() then
				self.familySon.lastName
			else
				self.familyDaughter.lastName
			endif
		endif
	endif;

-- it creates a male from a family member that is a male
rule Member2Male {
	from s:Families!Member (not s.isFemale())
	to   t:Persons!Male (
		fullName <- s.firstName + ' ' + s.familyName
	)
}

-- it creates a female from a family member that is a female
rule Member2Female {
	from s:Families!Member (s.isFemale())
	to   t:Persons!Female (
		fullName <- s.firstName + ' ' + s.familyName
	)
}
