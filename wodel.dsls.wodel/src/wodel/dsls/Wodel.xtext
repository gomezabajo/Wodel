// automatically generated by Xtext
grammar wodel.dsls.Wodel with org.eclipse.xtext.common.Terminals

//import "http://mutatorenvironment/1.0"
import "platform:/resource/wodel.models/model/MutatorEnvironment.ecore"
import "platform:/resource/wodel.models/model/MutatorEnvironment.ecore#//miniOCL" as miniocl
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

MutatorEnvironment returns MutatorEnvironment:
	(load+=Load)*
	definition=Definition
	'with'
	('blocks' '{' blocks+=Block* '}'
		| 'commands' '{' commands+=Mutator* '}')
	('constraints' '{' constraints+= Constraint* '}')?;
	
Definition returns Definition: 
	Library | Program;

Library returns Library:
	{Library}
	'library' 'for' 'metamodel' metamodel=EString					
	;

Program returns Program:
	{Program}
	'generate' (num=EInt | exhaustive ?= 'exhaustive')? 'mutants'
	'in' output=EString	
	'from' source=Source 
	'metamodel' metamodel=EString
	('with' 'resources' 'from' '{' resources+=Resource '}' (',' '{' resources+=Resource '}')*)?
	('description' description=EString)?
	;

Source returns Source:
	{Source}
	path=EString /*(multiple?='all')?*/
;

Resource returns Resource:
	{Resource}
	name=ID '=' path=Source 'metamodel' '=' metamodel=EString
;

Block returns Block:
	name=ID (description=EString)? ('from' from+=[Block|ID] (',' from+=[Block|ID])*)? ('repeat' '=' repeat=Repeat)? '{' commands+=Mutator* '}' ('[' (min=EInt '..' max=MaxCardinality | fixed=EInt) ']')?
;

Constraint returns Constraint:
	'context' type=[ecore::EClass|ID] id=EString (':' (expressions+=InvariantCS)+ | '::' (rules+=EString)+)
;

// Expressions
InvariantCS returns miniocl::InvariantCS:
	exp=ExpCS ';'

;

// Expressions
ExpCS returns miniocl::ExpCS:
	LogicExpCS
;

LogicExpCS returns miniocl::LogicExpCS:
	CallExpCS ({miniocl::LogicExpCS.left=current} op=('=' | '<>') right=CallExpCS)*
;

CallExpCS returns miniocl::CallExpCS:
	PrimaryExpCS ({miniocl::CallExpCS.source=current} op=('.' | '->') navExp=NavigationExpCS)*
;
//CallExpCS returns miniocl::CallExpCS:
//	PrimaryExpCS ({miniocl::CallExpCS.source=current} op=('.' | '->') nameExp=NameExpCS)
//;

PrimaryExpCS returns miniocl::PrimaryExpCS:
	NameExpCS | LiteralExpCS
;

NavigationExpCS returns miniocl::NavigationExpCS:
  LoopExpCS | NavigationNameExpCS
;

LoopExpCS returns miniocl::LoopExpCS:
  CollectExpCS | IterateExpCS | ExistsExpCS | ForAllExpCS
;

CollectExpCS returns miniocl::CollectExpCS:
  'collect' '(' (itVar=IteratorVarCS '|')? exp+=ExpCS (logicOp+=('or' | 'and') exp+=ExpCS)* ')'
;

IteratorVarCS returns miniocl::IteratorVarCS:
  itName = ID (':' itType=PathNameCS)?
;

IterateExpCS returns miniocl::IterateExpCS:
  'iterate' '(' itVar=IteratorVarCS ';' accVar=AccVarCS '|' exp+=ExpCS (logicOp+=('or' | 'and') exp+=ExpCS)*  ')'
;

AccVarCS returns miniocl::AccVarCS:
  '$' accVarName = ID (':' accType=PathNameCS)? ('=' accInitExp=ExpCS)?
;

ExistsExpCS returns miniocl::ExistsExpCS:
  'exists' '(' accVars+=AccVarCS (',' accVars+=AccVarCS)* '|' exp+=ExpCS (logicOp+=('or' | 'and') exp+=ExpCS)*  ')'
;

ForAllExpCS returns miniocl::ForAllExpCS:
  'forAll' '(' accVars+=AccVarCS (',' accVars+=AccVarCS)* '|' exp+=ExpCS (logicOp+=('or' | 'and') exp+=ExpCS)*  ')'
;

NameExpCS returns miniocl::NameExpCS:
	expName=PathNameCS
	(roundedBrackets=RoundedBracketClauseCS)?
	(callExp=CallExpCS)?
;

NavigationNameExpCS returns miniocl::NavigationNameExpCS:
	expName=NavigationPathNameCS
	(roundedBrackets=RoundedBracketClauseCS)?
	(callExp=CallExpCS)?
;

RoundedBracketClauseCS returns miniocl::RoundedBracketClauseCS:
	{miniocl::RoundedBracketClauseCS}
	'('
		(args+=ExpCS (','args+=ExpCS)* )? 
	')'
;

LiteralExpCS returns miniocl::LiteralExpCS:
	IntLiteralExpCS | StringLiteralExpCS | BooleanLiteralExpCS
;

IntLiteralExpCS returns miniocl::IntLiteralExpCS:
	intSymbol=INT
;

StringLiteralExpCS returns miniocl::StringLiteralExpCS:
	stringSymbol=STRING
;

BooleanLiteralExpCS returns miniocl::BooleanLiteralExpCS:
	{miniocl::BooleanExpCS}
	(boolSymbol?='true'
	| 'false')
	;
	
PathNameCS returns miniocl::PathNameCS:
	path+=PathCS
	('::'path+=PathCS)*
;

NavigationPathNameCS returns miniocl::NavigationPathNameCS:
	path+=NavigationPathCS
	('::'path+=NavigationPathCS)*
;

PathCS returns miniocl::PathCS:
	PathElementCS | PathVariableCS
;

NavigationPathCS returns miniocl::NavigationPathCS:
	NavigationPathElementCS | NavigationPathVariableCS
;

PathElementCS returns miniocl::PathElementCS:
	pathName=[ecore::EStructuralFeature|ID]
;

NavigationPathElementCS returns miniocl::NavigationPathElementCS:
	pathName=[ecore::EStructuralFeature|ID]
;

PathVariableCS returns miniocl::PathVariableCS:
	'$' varName=EString
;

NavigationPathVariableCS returns miniocl::NavigationPathVariableCS:
	'$' varName=EString
;

Mutator returns Mutator:
	CreateObjectMutator | SelectObjectMutator | SelectSampleMutator | CompositeMutator | ModifySourceReferenceMutator | ModifyTargetReferenceMutator
	 | CreateReferenceMutator | RemoveObjectMutator | RemoveReferenceMutator | ModifyInformationMutator | CloneObjectMutator | RetypeObjectMutator;

ObSelectionStrategy returns ObSelectionStrategy:
	RandomSelection | SpecificSelection | CompleteSelection | OtherSelection | TypedSelection;
	
RandomSelection returns RandomSelection:
	RandomTypeSelection;
	
SpecificSelection returns SpecificSelection:
	SpecificObjectSelection | SpecificClosureSelection;
	
CompleteSelection returns CompleteSelection:
	CompleteTypeSelection;
	
OtherSelection returns OtherSelection:
	OtherTypeSelection;

AttributeEvaluationType returns AttributeEvaluationType:
	AttributeType | ObjectAttributeType
;

AttributeType returns AttributeType:
	NumberType | BooleanType | StringType | ListStringType | RandomType | ListType;
	
NumberType returns NumberType:
	IntegerType | DoubleType | MinValueType | MaxValueType | RandomNumberType
;

RandomNumberType returns RandomNumberType:
	RandomDoubleNumberType | RandomIntegerNumberType
;
	
Load returns Load:
	{Load}
	'import' file=EString
	;

EString returns ecore::EString:
	STRING | ID;

EInt returns ecore::EInt:
	'-'? INT;
	
EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	
EBoolean returns ecore::EBoolean:
	("true" | "false");
	
enum LogicOperator returns LogicOperator:
	and = 'and' | or = 'or'
;

enum Operator returns Operator:
	equals = '=' | different = '<>' | in = 'in' | is = 'is' | not = 'not' | gte = '>=' | lte = '<=' | gt = '>' | lt = '<'
;

enum ArithmeticOperator returns ArithmeticOperator:
	add = '+' | subtract = '-' | multiply = '*' | divide = '/' | module = '%'
;

enum Repeat returns Repeat:
	yes = 'yes' | no = 'no'	
;

enum SampleClause returns SampleClause:
	equals = 'equals' | distinct = 'distinct'
;
	
BinaryOperator returns BinaryOperator:
	{BinaryOperator}
	type = LogicOperator
;

AttributeEvaluation returns AttributeEvaluation:
	{AttributeEvaluation}
	name=[ecore::EAttribute|ID]
	value=AttributeEvaluationType
;

ReferenceEvaluation returns ReferenceEvaluation:
	{ReferenceEvaluation}
	(name=[ecore::EReference|ID] | self?='self' | container ?= 'container')
	(('.' attName=[ecore::EAttribute|ID] attValue=AttributeEvaluationType) 
		| ('->' refName=[ecore::EReference|ID] ('->' refRefName=[ecore::EReference|ID])?)?) operator=Operator (value=ObSelectionStrategy | 'null' )
;

Evaluation returns Evaluation:
	AttributeEvaluation | ReferenceEvaluation
;

Expression returns Expression:
	{Expression}
	first=Evaluation (operator+=BinaryOperator second+=Evaluation)*
;

/*
RemoveObjectMutator returns RemoveObjectMutator:	
	'remove' object=ObSelectionStrategy
	('[' (min=EInt '..')? max=MaxCardinality ']')?
	;
	
RemoveReferenceMutator returns RemoveReferenceMutator:	
	'remove' 'reference' refType=[ecore::EReference|ID]
	'in' container=ObSelectionStrategy
	('[' (min=EInt '..')? max=MaxCardinality ']')?
	;	
*/
 	
RemoveObjectMutator returns RemoveObjectMutator:
	{RemoveObjectMutator}	
	'remove' object=ObSelectionStrategy ('from' container=ObSelectionStrategy)?
	('[' (min=EInt '..')? max=MaxCardinality ']')?
;
	
RemoveReferenceMutator returns RemoveReferenceMutator:
	RemoveRandomReferenceMutator | RemoveSpecificReferenceMutator | RemoveCompleteReferenceMutator;
	
RemoveRandomReferenceMutator returns RemoveRandomReferenceMutator:
	{RemoveRandomReferenceMutator}
	'remove' 'one' 'reference' refType=[ecore::EReference|ID]
	'in' type=[ecore::EClass|ID]
	('[' (min=EInt '..')? max=MaxCardinality ']')?
	;	

RemoveSpecificReferenceMutator returns RemoveSpecificReferenceMutator:
	{RemoveSpecificReferenceMutator}
	'remove' 'reference' refType=[ecore::EReference|ID]
	'in' container=ObSelectionStrategy
	('[' (min=EInt '..')? max=MaxCardinality ']')?
	;
RemoveCompleteReferenceMutator returns RemoveCompleteReferenceMutator:
	{RemoveCompleteReferenceMutator}
	'remove' 'all' 'reference' refType=[ecore::EReference|ID]
	'in' type=[ecore::EClass|ID]
;
CreateObjectMutator returns CreateObjectMutator:	
	(name=ID '=')? 'create' type=[ecore::EClass|ID] 	 
	('in' container=ObSelectionStrategy)?
	('with' '{' (attributes+=AttributeSet | references+=ReferenceSet)? ( "," (attributes+=AttributeSet | references+=ReferenceSet))* '}' )?
	('[' (min=EInt '..')? max=MaxCardinality ']')?
	;

SelectObjectMutator returns SelectObjectMutator:
	name=ID '=' 'select' object=ObSelectionStrategy
	('in' container=ObSelectionStrategy)?
	;
	
SelectSampleMutator returns SelectSampleMutator:
	name=ID '=' 'select' 'sample'
	'from' object=ObSelectionStrategy
	('with' clause=SampleClause
	'{' (features+=[ecore::EStructuralFeature|ID])? ("," features+=[ecore::EStructuralFeature|ID])* '}' )?
;

ModifyInformationMutator returns ModifyInformationMutator:
	(name=ID '=')? 'modify' object=ObSelectionStrategy	
	('with' '{' (attributes+=AttributeSet | references+=ReferenceSet)? ( "," (attributes+=AttributeSet | references+=ReferenceSet))* '}' )?
	('[' (min=EInt '..')? max=MaxCardinality ']')?
	;
	
CreateReferenceMutator returns CreateReferenceMutator:
	(name=ID '=')? 'create' 'reference' refType=[ecore::EReference|ID]
	('to' target=ObSelectionStrategy)?
	('in' source=ObSelectionStrategy)?	
	('[' (min=EInt '..')? max=MaxCardinality ']')?
	;
	
ModifySourceReferenceMutator returns ModifySourceReferenceMutator:
	'modify' 'source' refType=[ecore::EReference|ID] 	 
	('from' source=ObSelectionStrategy)?
	('to' newSource=ObSelectionStrategy)?	
	('[' (min=EInt '..')? max=MaxCardinality ']')?	
	;

ModifyTargetReferenceMutator returns ModifyTargetReferenceMutator:
	'modify' 'target' refType=[ecore::EReference|ID] 	 
	('from' source=ObSelectionStrategy)?
	('to' newTarget=ObSelectionStrategy)?	
	('[' (min=EInt '..')? max=MaxCardinality ']')?	
	;

CompositeMutator returns CompositeMutator:
	(name=ID '=')? '['
	commands+=Mutator (commands+=Mutator)*
	']'
	('[' (min=EInt '..' max=MaxCardinality | fixed=EInt) ']')?	
	;

CloneObjectMutator returns CloneObjectMutator:	
	(name=ID '=')? (contents?='deep')? 'clone' object=ObSelectionStrategy 	 
	('in' container=ObSelectionStrategy)?
	('with' '{' (attributes+=AttributeSet | references+=ReferenceSet)? ( "," (attributes+=AttributeSet | references+=ReferenceSet))* '}' )?
	('[' (min=EInt '..')? max=MaxCardinality ']')?
	;

RetypeObjectMutator returns RetypeObjectMutator:	
	(name=ID '=')? 'retype' object=ObSelectionStrategy
	('in' container=ObSelectionStrategy)?
	'as' (type=[ecore::EClass|ID] | '[' types+=[ecore::EClass|ID] ( "," types+=[ecore::EClass|ID])* ']') 	 
	('with' '{' (attributes+=AttributeSet | references+=ReferenceSet)? ( "," (attributes+=AttributeSet | references+=ReferenceSet))* '}' )?
	('[' (min=EInt '..')? max=MaxCardinality ']')?
	;


AttributeSet returns AttributeSet:
	AttributeScalar | AttributeUnset | AttributeSwap | AttributeCopy | AttributeReverse | AttributeOperation
;

AttributeScalar returns AttributeScalar:
	attribute+=[ecore::EAttribute|ID]
	value=AttributeType
	;
	
AttributeUnset returns AttributeUnset:
	'unset' '(' attribute+=[ecore::EAttribute|ID] ')'
;

AttributeSwap returns AttributeSwap:
	'swap' '(' attribute+=[ecore::EAttribute|ID] ',' (object=ObSelectionStrategy '.')? attribute+=[ecore::EAttribute|ID] ')'
;

AttributeCopy returns AttributeCopy:
	'copy' '(' attribute+=[ecore::EAttribute|ID] ',' (object=ObSelectionStrategy '.')? attribute+=[ecore::EAttribute|ID] ')'
;

AttributeReverse returns AttributeReverse:
	'reverse' '(' attribute+=[ecore::EAttribute|ID] ')'
;

AttributeOperation returns AttributeOperation:
	attribute+=[ecore::EAttribute|ID] operator=ArithmeticOperator value=AttributeEvaluationType
;

ReferenceSet returns ReferenceSet:
	ReferenceInit | ReferenceSwap | ReferenceAtt | ReferenceAdd | ReferenceRemove
;

ReferenceInit returns ReferenceInit:
	reference+=[ecore::EReference|ID]
	'=' object=ObSelectionStrategy
;

ReferenceAdd returns ReferenceAdd:
	reference+=[ecore::EReference|ID]
	'+' '=' object=ObSelectionStrategy
;

ReferenceRemove returns ReferenceRemove:
	reference+=[ecore::EReference|ID]
	'-' '=' object=ObSelectionStrategy
;

ReferenceSwap returns ReferenceSwap:
	'swapref' '(' reference+=[ecore::EReference|ID] ',' (object=ObSelectionStrategy '->')? reference+=[ecore::EReference|ID] ')'
;

ReferenceAtt returns ReferenceAtt:
	reference+=[ecore::EReference|ID] '.' attribute=[ecore::EAttribute|ID]
	value=AttributeType
;

RandomTypeSelection returns RandomTypeSelection:
	{RandomTypeSelection}
	'one' (type=[ecore::EClass|ID] | '[' types+=[ecore::EClass|ID] ( "," types+=[ecore::EClass|ID])* ']') ('->' refType=[ecore::EReference|ID] ('->' refRefType=[ecore::EReference|ID] ('->' refRefRefType=[ecore::EReference|ID])?)?)?
	('from' resource=ID 'resources')?
	('where' '{' expression=Expression '}')?
	;

SpecificObjectSelection returns SpecificObjectSelection:
	{SpecificObjectSelection}
	objSel=[ObjectEmitter|ID] ('->' refType=[ecore::EReference|ID] ('->' refRefType=[ecore::EReference|ID] ('->' refRefRefType=[ecore::EReference|ID])?)?)?
	('where' '{' expression=Expression '}')?
	;
	
SpecificClosureSelection returns SpecificClosureSelection:
	{SpecificClosureSelection}
	'closure' '(' objSel=[ObjectEmitter|ID] ('->' refType=[ecore::EReference|ID] ('->' refRefType=[ecore::EReference|ID] ('->' refRefRefType=[ecore::EReference|ID])?)?)? ')'
	('where' '{' expression=Expression '}')?
	;

CompleteTypeSelection returns CompleteTypeSelection:
	{CompleteTypeSelection}
	'all' (type=[ecore::EClass|ID] | '[' types+=[ecore::EClass|ID] ( "," types+=[ecore::EClass|ID])* ']') ('->' refType=[ecore::EReference|ID] ('->' refRefType=[ecore::EReference|ID] ('->' refRefRefType=[ecore::EReference|ID])?)?)?
	('where' '{' expression=Expression '}')?
;

OtherTypeSelection returns OtherTypeSelection:
	{OtherTypeSelection}
	'other' (type=[ecore::EClass|ID] | '[' types+=[ecore::EClass|ID] ( "," types+=[ecore::EClass|ID])* ']') ('->' refType=[ecore::EReference|ID] ('->' refRefType=[ecore::EReference|ID] ('->' refRefRefType=[ecore::EReference|ID])?)?)?
	('where' '{' expression=Expression '}')?
;

TypedSelection returns TypedSelection:
	{TypedSelection}
	'typed' (type=[ecore::EClass|ID] | '[' types+=[ecore::EClass|ID] ( "," types+=[ecore::EClass|ID])* ']')
	('where' '{' expression=Expression '}')?
;

BooleanType returns BooleanType:
	SpecificBooleanType | RandomBooleanType 
	;

RandomBooleanType returns RandomBooleanType:
	{RandomBooleanType}
	operator=Operator
 	'random-boolean'
;

SpecificBooleanType returns SpecificBooleanType:
	{SpecificBooleanType}
	operator=Operator
	value=EBoolean
	;
StringType returns StringType:
	SpecificStringType | RandomStringType | UpperStringType | LowerStringType | CatStartStringType | CatEndStringType | ReplaceStringType | RandomStringNumberType
	;

RandomStringType returns RandomStringType :
	{RandomStringType}
	operator=Operator
	'random-string' '(' min=EInt ',' max=EInt ')'
;

SpecificStringType returns SpecificStringType:
	{SpecificStringType}
	operator=Operator
	value=STRING
	;

UpperStringType returns UpperStringType:
	{UpperStringType}
	operator=Operator
	'upper'
;

CatStartStringType returns CatStartStringType:
	{CatStartStringType}
	operator=Operator
	'catstart' '('value=EString')'
;

CatEndStringType returns CatEndStringType:
	{CatEndStringType}
	operator=Operator
	'catend' '('value=EString')'
;

ListStringType returns ListStringType:
	{ListStringType}
	operator=Operator
	'['value+=EString ( "," value+=EString)*']'
;
LowerStringType returns LowerStringType:
	{LowerStringType}
	operator=Operator
	'lower'
;

ReplaceStringType returns ReplaceStringType:
	{ReplaceStringType}
	operator=Operator
	'replace' '(' oldstring=EString ',' newstring=EString ')'
;

DoubleType returns DoubleType:
	SpecificDoubleType | RandomDoubleType
	;

RandomDoubleType returns RandomDoubleType :
	{RandomDoubleType}
	operator=Operator
	'random-double' ('(' min=EDouble ',' max=EDouble ')')?
;

SpecificDoubleType returns SpecificDoubleType:
	{SpecificDoubleType}
	operator=Operator
	value=EDouble
	;
	
MinValueType returns MinValueType:
	operator=Operator
	'min' '(' attribute=[ecore::EAttribute|ID] ')'
;

MaxValueType returns MaxValueType:
	operator=Operator
	'max' '(' attribute=[ecore::EAttribute|ID] ')'
;

IntegerType returns IntegerType:
	SpecificIntegerType | RandomIntegerType
	;

SpecificIntegerType returns SpecificIntegerType:
	{SpecificIntegerType}
	operator=Operator
	value=EInt
	;

RandomIntegerType returns RandomIntegerType:
	{RandomIntegerType}
	operator=Operator
	'random-int' ('(' min=EInt ',' max=EInt ')')?
;

RandomStringNumberType returns RandomStringNumberType:
	{RandomStringNumberType}
	operator=Operator
	'random-int-string' ('(' min=EInt ',' max=EInt ')')?
;

RandomType returns RandomType:
	{RandomType}
	operator=Operator
	'random'
;

RandomDoubleNumberType returns RandomDoubleNumberType:
	operator=Operator
	'random' '(' min=EDouble ',' (object = ObSelectionStrategy '.')? max=[ecore::EAttribute|ID] ')'
;

RandomIntegerNumberType returns RandomIntegerNumberType:
	operator=Operator
	'random' '(' min=EInt ',' (object = ObSelectionStrategy '.')? max=[ecore::EAttribute|ID] ')'
;

ListType returns ListType:
	{ListType}
	operator=Operator
	'{'value+=[ecore::EObject] ( "," value+=[ecore::EObject])*'}'
;

ObjectAttributeType returns ObjectAttributeType:
	{ObjectAttributeType}
	operator=Operator
	objSel=[ObjectEmitter|ID] '.' attribute=[ecore::EAttribute|ID]
;


MaxCardinality returns ecore::EIntegerObject: EInt | '*';
